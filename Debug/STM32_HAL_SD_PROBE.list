
STM32_HAL_SD_PROBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08009fd4  08009fd4  00019fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a61c  0800a61c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a61c  0800a61c  0001a61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a624  0800a624  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a624  0800a624  0001a624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a628  0800a628  0001a628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a62c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00002a14  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20002a9c  20002a9c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ce3  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a7  00000000  00000000  00031d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00035048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e58  00000000  00000000  00036038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f91  00000000  00000000  00036e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018738  00000000  00000000  0005be21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0bf5  00000000  00000000  00074559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013514e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004648  00000000  00000000  001351a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fbc 	.word	0x08009fbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009fbc 	.word	0x08009fbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <wavRecorder_reset>:
}Recorder_Control_e;
static volatile Recorder_Control_e recorderControlSM = Recorder_Control_Idle;

//Recorder reset
static void wavRecorder_reset(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  audioAccumSize=0;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <wavRecorder_reset+0x20>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
  recorderWriteBytes=0;
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <wavRecorder_reset+0x24>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
  recorderControlSM = Recorder_Control_Idle;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <wavRecorder_reset+0x28>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20002304 	.word	0x20002304
 8000598:	20000300 	.word	0x20000300
 800059c:	20002338 	.word	0x20002338

080005a0 <wav_recorder_fileCreate>:

/**
 * @brief Create WAV Recording file
 */
bool wav_recorder_fileCreate(const char* filePath)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  //Create WAV Header
  wavHeader.ChunkID = 0x46464952;
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005aa:	4a27      	ldr	r2, [pc, #156]	; (8000648 <wav_recorder_fileCreate+0xa8>)
 80005ac:	601a      	str	r2, [r3, #0]
  wavHeader.FileFormat = 0x45564157;
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <wav_recorder_fileCreate+0xac>)
 80005b2:	609a      	str	r2, [r3, #8]
  wavHeader.SubChunk1ID = 0x20746d66;
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005b6:	4a26      	ldr	r2, [pc, #152]	; (8000650 <wav_recorder_fileCreate+0xb0>)
 80005b8:	60da      	str	r2, [r3, #12]
  wavHeader.SubChunk1Size = 16;             //16-bit
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005bc:	2210      	movs	r2, #16
 80005be:	611a      	str	r2, [r3, #16]
  wavHeader.AudioFormat = 1;                //PCM
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	829a      	strh	r2, [r3, #20]
  wavHeader.NbrChannels = 1;                //Mono
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	82da      	strh	r2, [r3, #22]
  wavHeader.SampleRate = 44100;              //44.1KHz
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005ce:	f64a 4244 	movw	r2, #44100	; 0xac44
 80005d2:	619a      	str	r2, [r3, #24]
  wavHeader.BitPerSample = 16;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005d6:	2210      	movs	r2, #16
 80005d8:	845a      	strh	r2, [r3, #34]	; 0x22
  wavHeader.ByteRate = wavHeader.SampleRate*wavHeader.NbrChannels*wavHeader.BitPerSample/8;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005e0:	8ad2      	ldrh	r2, [r2, #22]
 80005e2:	fb02 f303 	mul.w	r3, r2, r3
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005e8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80005ea:	fb02 f303 	mul.w	r3, r2, r3
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005f2:	61d3      	str	r3, [r2, #28]
  wavHeader.BlockAlign = wavHeader.NbrChannels*wavHeader.BitPerSample/8;
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005f6:	8adb      	ldrh	r3, [r3, #22]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	da00      	bge.n	8000608 <wav_recorder_fileCreate+0x68>
 8000606:	3307      	adds	r3, #7
 8000608:	10db      	asrs	r3, r3, #3
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 800060e:	841a      	strh	r2, [r3, #32]
  wavHeader.SubChunk2ID = 0x61746164;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <wav_recorder_fileCreate+0xb4>)
 8000614:	625a      	str	r2, [r3, #36]	; 0x24

//  wavHeader.SubChunk2Size = 40960*wavHeader.NbrChannels*wavHeader.BitPerSample/8;
//  wavHeader.FileSize = 36 + wavHeader.SubChunk2Size;

  //Open WAV file for Write/Overwrite
  if(f_open(&wavFile, filePath, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8000616:	220a      	movs	r2, #10
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <wav_recorder_fileCreate+0xb8>)
 800061c:	f006 fbdc 	bl	8006dd8 <f_open>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <wav_recorder_fileCreate+0x8a>
  {
    return false;
 8000626:	2300      	movs	r3, #0
 8000628:	e007      	b.n	800063a <wav_recorder_fileCreate+0x9a>
  }
  //Skip Header section (44 Bytes)
  f_lseek(&wavFile, 44);
 800062a:	f04f 022c 	mov.w	r2, #44	; 0x2c
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <wav_recorder_fileCreate+0xb8>)
 8000634:	f007 f98d 	bl	8007952 <f_lseek>
//  f_write(&wavFile, (uint8_t *)&wavHeader, 44, &recorderWriteBytes);
  return true;
 8000638:	2301      	movs	r3, #1
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000230c 	.word	0x2000230c
 8000648:	46464952 	.word	0x46464952
 800064c:	45564157 	.word	0x45564157
 8000650:	20746d66 	.word	0x20746d66
 8000654:	61746164 	.word	0x61746164
 8000658:	200000a8 	.word	0x200000a8

0800065c <wav_recorder_record>:

/**
 * @brief Start Recording
 */
void wav_recorder_record(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  isFinished = false;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <wav_recorder_record+0x28>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
  wavRecorder_reset();
 8000666:	f7ff ff85 	bl	8000574 <wavRecorder_reset>
  //Start ADC
  WAV_RECORDER_ADC_START();
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <wav_recorder_record+0x2c>)
 8000670:	f007 ff74 	bl	800855c <adc_MIC_DMA_config>
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <wav_recorder_record+0x30>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <wav_recorder_record+0x30>)
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20002308 	.word	0x20002308
 8000688:	20000304 	.word	0x20000304
 800068c:	40001000 	.word	0x40001000

08000690 <wav_recorder_stop>:

/**
 * @brief Stop Recording
 */
void wav_recorder_stop(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  WAV_RECORDER_ADC_STOP();
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <wav_recorder_stop+0x2c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a08      	ldr	r2, [pc, #32]	; (80006bc <wav_recorder_stop+0x2c>)
 800069a:	f023 0301 	bic.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <wav_recorder_stop+0x30>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <wav_recorder_stop+0x30>)
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
  recorderControlSM = Recorder_Control_EndOfFile;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <wav_recorder_stop+0x34>)
 80006ae:	2203      	movs	r2, #3
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40020008 	.word	0x40020008
 80006c0:	40001000 	.word	0x40001000
 80006c4:	20002338 	.word	0x20002338

080006c8 <wav_recorder_process>:

/**
 * @brief Process WAV
 */
void wav_recorder_process(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  switch(recorderControlSM)
 80006ce:	4b4e      	ldr	r3, [pc, #312]	; (8000808 <wav_recorder_process+0x140>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	f200 8092 	bhi.w	80007fe <wav_recorder_process+0x136>
 80006da:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <wav_recorder_process+0x18>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	080007fd 	.word	0x080007fd
 80006e4:	080006f1 	.word	0x080006f1
 80006e8:	08000747 	.word	0x08000747
 80006ec:	080007a5 	.word	0x080007a5
  {
  case Recorder_Control_Idle:
    break;

  case Recorder_Control_HalfBuffer:
    recorderWriteBytes=0;
 80006f0:	4b46      	ldr	r3, [pc, #280]	; (800080c <wav_recorder_process+0x144>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
    for(uint16_t i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	80fb      	strh	r3, [r7, #6]
 80006fa:	e00f      	b.n	800071c <wav_recorder_process+0x54>
    {
      audioBuffer[i]= 8*(audioBuffer[i] - 1900); //Remove DC Offset;
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	4a44      	ldr	r2, [pc, #272]	; (8000810 <wav_recorder_process+0x148>)
 8000700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000704:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000708:	b29a      	uxth	r2, r3
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	00d2      	lsls	r2, r2, #3
 800070e:	b291      	uxth	r1, r2
 8000710:	4a3f      	ldr	r2, [pc, #252]	; (8000810 <wav_recorder_process+0x148>)
 8000712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	3301      	adds	r3, #1
 800071a:	80fb      	strh	r3, [r7, #6]
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000722:	d3eb      	bcc.n	80006fc <wav_recorder_process+0x34>
    }
    f_write(&wavFile, (uint8_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE, &recorderWriteBytes);
 8000724:	4b39      	ldr	r3, [pc, #228]	; (800080c <wav_recorder_process+0x144>)
 8000726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800072a:	4939      	ldr	r1, [pc, #228]	; (8000810 <wav_recorder_process+0x148>)
 800072c:	4839      	ldr	r0, [pc, #228]	; (8000814 <wav_recorder_process+0x14c>)
 800072e:	f006 fe14 	bl	800735a <f_write>
    audioAccumSize+=AUDIO_BUFFER_SIZE/2;
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <wav_recorder_process+0x150>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800073a:	4a37      	ldr	r2, [pc, #220]	; (8000818 <wav_recorder_process+0x150>)
 800073c:	6013      	str	r3, [r2, #0]
    recorderControlSM = Recorder_Control_Idle;
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <wav_recorder_process+0x140>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
    break;
 8000744:	e05b      	b.n	80007fe <wav_recorder_process+0x136>

  case Recorder_Control_FullBuffer:
    recorderWriteBytes=0;
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <wav_recorder_process+0x144>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
    for(uint16_t i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 800074c:	2300      	movs	r3, #0
 800074e:	80bb      	strh	r3, [r7, #4]
 8000750:	e013      	b.n	800077a <wav_recorder_process+0xb2>
    {
      audioBuffer[AUDIO_BUFFER_SIZE/2 + i]= 8*(audioBuffer[AUDIO_BUFFER_SIZE/2 + i]-1900); //Remove DC Offset;
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000758:	4a2d      	ldr	r2, [pc, #180]	; (8000810 <wav_recorder_process+0x148>)
 800075a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075e:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000762:	b29a      	uxth	r2, r3
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800076a:	00d2      	lsls	r2, r2, #3
 800076c:	b291      	uxth	r1, r2
 800076e:	4a28      	ldr	r2, [pc, #160]	; (8000810 <wav_recorder_process+0x148>)
 8000770:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 8000774:	88bb      	ldrh	r3, [r7, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	80bb      	strh	r3, [r7, #4]
 800077a:	88bb      	ldrh	r3, [r7, #4]
 800077c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000780:	d3e7      	bcc.n	8000752 <wav_recorder_process+0x8a>
    }
    f_write(&wavFile, (uint8_t *)&audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE, &recorderWriteBytes);
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <wav_recorder_process+0x144>)
 8000784:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000788:	4924      	ldr	r1, [pc, #144]	; (800081c <wav_recorder_process+0x154>)
 800078a:	4822      	ldr	r0, [pc, #136]	; (8000814 <wav_recorder_process+0x14c>)
 800078c:	f006 fde5 	bl	800735a <f_write>
    audioAccumSize+=AUDIO_BUFFER_SIZE/2;
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <wav_recorder_process+0x150>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000798:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <wav_recorder_process+0x150>)
 800079a:	6013      	str	r3, [r2, #0]
    recorderControlSM = Recorder_Control_Idle;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <wav_recorder_process+0x140>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
    break;
 80007a2:	e02c      	b.n	80007fe <wav_recorder_process+0x136>

  case Recorder_Control_EndOfFile:
//    f_close(&wavFile);
//    f_open(&wavFile, filePath, FA_WRITE);
    f_rewind(&wavFile);
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	4819      	ldr	r0, [pc, #100]	; (8000814 <wav_recorder_process+0x14c>)
 80007ae:	f007 f8d0 	bl	8007952 <f_lseek>
    wavHeader.SubChunk2Size = audioAccumSize*wavHeader.NbrChannels*wavHeader.BitPerSample/8;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <wav_recorder_process+0x158>)
 80007b4:	8adb      	ldrh	r3, [r3, #22]
 80007b6:	461a      	mov	r2, r3
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <wav_recorder_process+0x150>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	fb02 f303 	mul.w	r3, r2, r3
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <wav_recorder_process+0x158>)
 80007c2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	08db      	lsrs	r3, r3, #3
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <wav_recorder_process+0x158>)
 80007cc:	6293      	str	r3, [r2, #40]	; 0x28
    wavHeader.FileSize = 36 + wavHeader.SubChunk2Size;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <wav_recorder_process+0x158>)
 80007d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d2:	3324      	adds	r3, #36	; 0x24
 80007d4:	4a12      	ldr	r2, [pc, #72]	; (8000820 <wav_recorder_process+0x158>)
 80007d6:	6053      	str	r3, [r2, #4]
    f_write(&wavFile, (uint8_t *)&wavHeader, 44, &recorderWriteBytes);
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <wav_recorder_process+0x144>)
 80007da:	222c      	movs	r2, #44	; 0x2c
 80007dc:	4910      	ldr	r1, [pc, #64]	; (8000820 <wav_recorder_process+0x158>)
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <wav_recorder_process+0x14c>)
 80007e0:	f006 fdbb 	bl	800735a <f_write>
    f_close(&wavFile);
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <wav_recorder_process+0x14c>)
 80007e6:	f007 f88a 	bl	80078fe <f_close>
    wavRecorder_reset();
 80007ea:	f7ff fec3 	bl	8000574 <wavRecorder_reset>
    isFinished = true;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <wav_recorder_process+0x15c>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
    recorderControlSM = Recorder_Control_Idle;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <wav_recorder_process+0x140>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
    break;
 80007fa:	e000      	b.n	80007fe <wav_recorder_process+0x136>
    break;
 80007fc:	bf00      	nop
  }
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20002338 	.word	0x20002338
 800080c:	20000300 	.word	0x20000300
 8000810:	20000304 	.word	0x20000304
 8000814:	200000a8 	.word	0x200000a8
 8000818:	20002304 	.word	0x20002304
 800081c:	20001304 	.word	0x20001304
 8000820:	2000230c 	.word	0x2000230c
 8000824:	20002308 	.word	0x20002308

08000828 <wav_recorder_isFinished>:

/**
 * @brief Is Finished
 */
bool wav_recorder_isFinished(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return isFinished;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <wav_recorder_isFinished+0x14>)
 800082e:	781b      	ldrb	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20002308 	.word	0x20002308

08000840 <wavRecorder_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void wavRecorder_halfTransfer_Callback(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  recorderControlSM = Recorder_Control_HalfBuffer;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <wavRecorder_halfTransfer_Callback+0x14>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	20002338 	.word	0x20002338

08000858 <wavRecorder_fullTransfer_Callback>:
void wavRecorder_fullTransfer_Callback(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  recorderControlSM = Recorder_Control_FullBuffer;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <wavRecorder_fullTransfer_Callback+0x14>)
 800085e:	2202      	movs	r2, #2
 8000860:	701a      	strb	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	20002338 	.word	0x20002338

08000870 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0c      	blt.n	800089c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4907      	ldr	r1, [pc, #28]	; (80008a8 <__NVIC_ClearPendingIRQ+0x38>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	3360      	adds	r3, #96	; 0x60
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <main>:
void SystemClock_Config(void);
static void MX_SPI1_Init(void);


int main (void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	//----------Setup------------------------------//
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008b0:	f000 fb3b 	bl	8000f2a <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 80008b4:	f000 f8d8 	bl	8000a68 <SystemClock_Config>
	/* Initialize all configured peripherals */
	spi_GPIO_config();
 80008b8:	f008 f954 	bl	8008b64 <spi_GPIO_config>
	tim_TIM6_MIC_config();//4x44.1kHz Sample Rate
 80008bc:	f008 f9ac 	bl	8008c18 <tim_TIM6_MIC_config>
	opamp_config();//MIC is connected to PA0(A0), the OPAMP non-inverting input
 80008c0:	f008 f8ec 	bl	8008a9c <opamp_config>
	adc_MIC_config();
 80008c4:	f007 fd90 	bl	80083e8 <adc_MIC_config>
	gpio_LED_config();
 80008c8:	f008 f88a 	bl	80089e0 <gpio_LED_config>
	exti_buttonConfig();//Push bottom as interrupt source configuration (PA12->D2)
 80008cc:	f007 ff00 	bl	80086d0 <exti_buttonConfig>
	uart_UART2_GPIO_config();
 80008d0:	f008 fa3c 	bl	8008d4c <uart_UART2_GPIO_config>
	uart_UART2_config(systemClock);
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <main+0x110>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f008 fa99 	bl	8008e10 <uart_UART2_config>
	MX_SPI1_Init();
 80008de:	f000 f915 	bl	8000b0c <MX_SPI1_Init>
	MX_FATFS_Init();
 80008e2:	f002 fa0d 	bl	8002d00 <MX_FATFS_Init>
	//Mount SD Card
	fresult=f_mount(&fs, "/", 1);
 80008e6:	2201      	movs	r2, #1
 80008e8:	4935      	ldr	r1, [pc, #212]	; (80009c0 <main+0x114>)
 80008ea:	4836      	ldr	r0, [pc, #216]	; (80009c4 <main+0x118>)
 80008ec:	f006 fa2e 	bl	8006d4c <f_mount>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <main+0x11c>)
 80008f6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80008f8:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <main+0x11c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d003      	beq.n	8000908 <main+0x5c>
	{
		printf("Failed to mount SD card to FatFs\r\n");
 8000900:	4832      	ldr	r0, [pc, #200]	; (80009cc <main+0x120>)
 8000902:	f008 fbdd 	bl	80090c0 <puts>
 8000906:	e002      	b.n	800090e <main+0x62>
	}
	else
	{
		printf("Successfully Mounted SD card\r\n");
 8000908:	4831      	ldr	r0, [pc, #196]	; (80009d0 <main+0x124>)
 800090a:	f008 fbd9 	bl	80090c0 <puts>
	}
	//Print status
	printf("SD card result = %d\r\n",fresult);
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <main+0x11c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	482f      	ldr	r0, [pc, #188]	; (80009d4 <main+0x128>)
 8000916:	f008 fb4d 	bl	8008fb4 <iprintf>


	//----------Loop forever-----------------------//
	while(1)
	{
		gpio_LED_toggleGreen();
 800091a:	f008 f8af 	bl	8008a7c <gpio_LED_toggleGreen>
		HAL_Delay(250);
 800091e:	20fa      	movs	r0, #250	; 0xfa
 8000920:	f000 fb78 	bl	8001014 <HAL_Delay>
		//WAV Recorder
		if (exti_flag)
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <main+0x12c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0f6      	beq.n	800091a <main+0x6e>
		{
			if(wav_recorder_fileCreate("88.2kHz_OVS.wav"))
 800092c:	482b      	ldr	r0, [pc, #172]	; (80009dc <main+0x130>)
 800092e:	f7ff fe37 	bl	80005a0 <wav_recorder_fileCreate>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <main+0x9a>
			{
				printf("Audio File Created Successfully\r\n");
 8000938:	4829      	ldr	r0, [pc, #164]	; (80009e0 <main+0x134>)
 800093a:	f008 fbc1 	bl	80090c0 <puts>
				isFileCreated=true;
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <main+0x138>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e005      	b.n	8000952 <main+0xa6>
			}
			else
			{
				printf("Audio File Creation Failed\r\n");
 8000946:	4828      	ldr	r0, [pc, #160]	; (80009e8 <main+0x13c>)
 8000948:	f008 fbba 	bl	80090c0 <puts>
				isFileCreated=false;
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <main+0x138>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
			}
			if(isFileCreated)
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <main+0x138>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d027      	beq.n	80009aa <main+0xfe>
			{
				gpio_LED_writeGreen(true);
 800095a:	2001      	movs	r0, #1
 800095c:	f008 f870 	bl	8008a40 <gpio_LED_writeGreen>
				HAL_Delay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f000 fb56 	bl	8001014 <HAL_Delay>
				exti_flag=false;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <main+0x12c>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
				printf("Starting Recording...\r\n");
 800096e:	481f      	ldr	r0, [pc, #124]	; (80009ec <main+0x140>)
 8000970:	f008 fba6 	bl	80090c0 <puts>
				wav_recorder_record();
 8000974:	f7ff fe72 	bl	800065c <wav_recorder_record>
				while(!wav_recorder_isFinished())
 8000978:	e00c      	b.n	8000994 <main+0xe8>
				{
					wav_recorder_process();
 800097a:	f7ff fea5 	bl	80006c8 <wav_recorder_process>
					if(exti_flag)
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <main+0x12c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d006      	beq.n	8000994 <main+0xe8>
					{
						wav_recorder_stop();
 8000986:	f7ff fe83 	bl	8000690 <wav_recorder_stop>
						wav_recorder_process();
 800098a:	f7ff fe9d 	bl	80006c8 <wav_recorder_process>
						printf("Recording Stopped\r\n");
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <main+0x144>)
 8000990:	f008 fb96 	bl	80090c0 <puts>
				while(!wav_recorder_isFinished())
 8000994:	f7ff ff48 	bl	8000828 <wav_recorder_isFinished>
 8000998:	4603      	mov	r3, r0
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1ea      	bne.n	800097a <main+0xce>
					}
				}
				gpio_LED_writeGreen(false);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f008 f84b 	bl	8008a40 <gpio_LED_writeGreen>
			}

			HAL_Delay(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f000 fb31 	bl	8001014 <HAL_Delay>
			exti_flag=false;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <main+0x12c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
		gpio_LED_toggleGreen();
 80009b8:	e7af      	b.n	800091a <main+0x6e>
 80009ba:	bf00      	nop
 80009bc:	20000000 	.word	0x20000000
 80009c0:	08009fd4 	.word	0x08009fd4
 80009c4:	200023a4 	.word	0x200023a4
 80009c8:	200023a2 	.word	0x200023a2
 80009cc:	08009fd8 	.word	0x08009fd8
 80009d0:	08009ffc 	.word	0x08009ffc
 80009d4:	0800a01c 	.word	0x0800a01c
 80009d8:	200023a0 	.word	0x200023a0
 80009dc:	0800a034 	.word	0x0800a034
 80009e0:	0800a044 	.word	0x0800a044
 80009e4:	200023a1 	.word	0x200023a1
 80009e8:	0800a068 	.word	0x0800a068
 80009ec:	0800a084 	.word	0x0800a084
 80009f0:	0800a09c 	.word	0x0800a09c

080009f4 <EXTI15_10_IRQHandler>:


/* Interrupt Routines -----------------------------------------------*/
//Push Button Interrupt
void EXTI15_10_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	//Clearing the pending interrupt field
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80009f8:	2028      	movs	r0, #40	; 0x28
 80009fa:	f7ff ff39 	bl	8000870 <__NVIC_ClearPendingIRQ>
	EXTI->PR1 |=(EXTI_PR1_PIF12);
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <EXTI15_10_IRQHandler+0x20>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <EXTI15_10_IRQHandler+0x20>)
 8000a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a08:	6153      	str	r3, [r2, #20]
	//Application
	exti_flag =true;
 8000a0a:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <EXTI15_10_IRQHandler+0x24>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40010400 	.word	0x40010400
 8000a18:	200023a0 	.word	0x200023a0

08000a1c <DMA1_Channel1_IRQHandler>:
//DMA ADC Channel Interrupt
void DMA1_Channel1_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	//Half Transfer
	if (DMA1->ISR & DMA_ISR_HTIF1)
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <DMA1_Channel1_IRQHandler+0x48>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d007      	beq.n	8000a3c <DMA1_Channel1_IRQHandler+0x20>
	{
		//Clear half transfer complete flag
		DMA1->IFCR |= (DMA_IFCR_CHTIF1);
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <DMA1_Channel1_IRQHandler+0x48>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <DMA1_Channel1_IRQHandler+0x48>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6053      	str	r3, [r2, #4]
		////Ready for the application
		wavRecorder_halfTransfer_Callback();
 8000a38:	f7ff ff02 	bl	8000840 <wavRecorder_halfTransfer_Callback>

	}
	//Full Transfer
	if (DMA1->ISR & DMA_ISR_TCIF1)
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <DMA1_Channel1_IRQHandler+0x48>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d007      	beq.n	8000a58 <DMA1_Channel1_IRQHandler+0x3c>
	{
		//Clear transfer complete flag
		DMA1->IFCR |= (DMA_IFCR_CTCIF1);
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <DMA1_Channel1_IRQHandler+0x48>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <DMA1_Channel1_IRQHandler+0x48>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	6053      	str	r3, [r2, #4]
		////Ready for the application
		wavRecorder_fullTransfer_Callback();
 8000a54:	f7ff ff00 	bl	8000858 <wavRecorder_fullTransfer_Callback>

	}
	//Clear interrupt pending flag
	NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8000a58:	200b      	movs	r0, #11
 8000a5a:	f7ff ff09 	bl	8000870 <__NVIC_ClearPendingIRQ>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020000 	.word	0x40020000

08000a68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b096      	sub	sp, #88	; 0x58
 8000a6c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2244      	movs	r2, #68	; 0x44
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f008 fa94 	bl	8008fa4 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a8e:	f000 fd43 	bl	8001518 <HAL_PWREx_ControlVoltageScaling>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x34>
	  {
	    Error_Handler();
 8000a98:	f000 f876 	bl	8000b88 <Error_Handler>
	  }

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	617b      	str	r3, [r7, #20]
	  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aa8:	2360      	movs	r3, #96	; 0x60
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 36;
 8000ab8:	2324      	movs	r3, #36	; 0x24
 8000aba:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000abc:	2307      	movs	r3, #7
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fd79 	bl	80015c4 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x74>
	  {
	    Error_Handler();
 8000ad8:	f000 f856 	bl	8000b88 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	603b      	str	r3, [r7, #0]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	607b      	str	r3, [r7, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	2104      	movs	r1, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 f979 	bl	8001dec <HAL_RCC_ClockConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x9c>
	  {
	    Error_Handler();
 8000b00:	f000 f842 	bl	8000b88 <Error_Handler>
	  }

}
 8000b04:	bf00      	nop
 8000b06:	3758      	adds	r7, #88	; 0x58
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <MX_SPI1_Init+0x78>)
 8000b14:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b1c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b2a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b42:	2208      	movs	r2, #8
 8000b44:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b5a:	2207      	movs	r2, #7
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b6c:	f001 fb2a 	bl	80021c4 <HAL_SPI_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8000b76:	f000 f807 	bl	8000b88 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000233c 	.word	0x2000233c
 8000b84:	40013000 	.word	0x40013000

08000b88 <Error_Handler>:
 * @retval None
 */


void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>

08000b92 <__io_putchar>:
#include "uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	733b      	strb	r3, [r7, #12]
 uart_UART2_TX(&c[0], 1, 100);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2264      	movs	r2, #100	; 0x64
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 f98d 	bl	8008ec8 <uart_UART2_TX>
 return ch;
 8000bae:	687b      	ldr	r3, [r7, #4]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_write>:

int _write(int file,char *ptr, int len) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e009      	b.n	8000bde <_write+0x26>
  __io_putchar(*ptr++);
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	60ba      	str	r2, [r7, #8]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ffdd 	bl	8000b92 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbf1      	blt.n	8000bca <_write+0x12>
 }
 return len;
 8000be6:	687b      	ldr	r3, [r7, #4]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6613      	str	r3, [r2, #96]	; 0x60
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <HAL_SPI_MspInit+0xa0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d139      	bne.n	8000cce <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_SPI_MspInit+0xa4>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <HAL_SPI_MspInit+0xa4>)
 8000c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c64:	6613      	str	r3, [r2, #96]	; 0x60
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_SPI_MspInit+0xa4>)
 8000c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_SPI_MspInit+0xa4>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0xa4>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0xa4>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c8a:	23a0      	movs	r3, #160	; 0xa0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f000 fabe 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 faad 	bl	8001228 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <SDTimer_Handler+0x40>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <SDTimer_Handler+0x1c>
    Timer1--;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <SDTimer_Handler+0x40>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <SDTimer_Handler+0x40>)
 8000cfa:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <SDTimer_Handler+0x44>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <SDTimer_Handler+0x34>
    Timer2--;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <SDTimer_Handler+0x44>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SDTimer_Handler+0x44>)
 8000d12:	801a      	strh	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200025de 	.word	0x200025de
 8000d24:	200025e0 	.word	0x200025e0

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN SysTick_IRQn 0 */

		  FatFsCnt++;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <SysTick_Handler+0x30>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <SysTick_Handler+0x30>)
 8000d80:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <SysTick_Handler+0x30>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	d904      	bls.n	8000d96 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Handler+0x30>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8000d92:	f7ff ffa5 	bl	8000ce0 <SDTimer_Handler>
		  }

	  /* USER CODE END SysTick_IRQn 0 */
	  HAL_IncTick();
 8000d96:	f000 f91d 	bl	8000fd4 <HAL_IncTick>
	  /* USER CODE BEGIN SysTick_IRQn 1 */

	  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200025dc 	.word	0x200025dc

08000da4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	e00a      	b.n	8000dcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db6:	f3af 8000 	nop.w
 8000dba:	4601      	mov	r1, r0
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	b2ca      	uxtb	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf0      	blt.n	8000db6 <_read+0x12>
  }

  return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e06:	605a      	str	r2, [r3, #4]
  return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_isatty>:

int _isatty(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f008 f86a 	bl	8008f50 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20010000 	.word	0x20010000
 8000ea8:	00000800 	.word	0x00000800
 8000eac:	200025e4 	.word	0x200025e4
 8000eb0:	20002aa0 	.word	0x20002aa0

08000eb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000edc:	f7ff ffea 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <LoopForever+0xe>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <LoopForever+0x16>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f06:	f008 f829 	bl	8008f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0a:	f7ff fccf 	bl	80008ac <main>

08000f0e <LoopForever>:

LoopForever:
    b LoopForever
 8000f0e:	e7fe      	b.n	8000f0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f1c:	0800a62c 	.word	0x0800a62c
  ldr r2, =_sbss
 8000f20:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000f24:	20002a9c 	.word	0x20002a9c

08000f28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_IRQHandler>

08000f2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f943 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f80e 	bl	8000f5c <HAL_InitTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	e001      	b.n	8000f50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f4c:	f7ff fe50 	bl	8000bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_InitTick+0x6c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d023      	beq.n	8000fb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_InitTick+0x70>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_InitTick+0x6c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f941 	bl	800120e <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10f      	bne.n	8000fb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d809      	bhi.n	8000fac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 f919 	bl	80011d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_InitTick+0x74>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e007      	b.n	8000fbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e004      	b.n	8000fbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e001      	b.n	8000fbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000000c 	.word	0x2000000c
 8000fcc:	20000004 	.word	0x20000004
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	200025e8 	.word	0x200025e8

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200025e8 	.word	0x200025e8

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000000c 	.word	0x2000000c

0800105c <__NVIC_SetPriorityGrouping>:
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff47 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff5c 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff8e 	bl	8001114 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffb0 	bl	800117c <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	e148      	b.n	80014ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 813a 	beq.w	80014c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d005      	beq.n	8001268 <HAL_GPIO_Init+0x40>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d130      	bne.n	80012ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129e:	2201      	movs	r2, #1
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 0201 	and.w	r2, r3, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d017      	beq.n	8001306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d123      	bne.n	800135a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	6939      	ldr	r1, [r7, #16]
 8001356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8094 	beq.w	80014c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139c:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x2c0>)
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_GPIO_Init+0x2c0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6613      	str	r3, [r2, #96]	; 0x60
 80013a8:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x2c0>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013b4:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_GPIO_Init+0x2c4>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1d4>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a43      	ldr	r2, [pc, #268]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1d0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a42      	ldr	r2, [pc, #264]	; (80014f4 <HAL_GPIO_Init+0x2cc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1cc>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e004      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013f4:	2307      	movs	r3, #7
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013fc:	2300      	movs	r3, #0
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140e:	4937      	ldr	r1, [pc, #220]	; (80014ec <HAL_GPIO_Init+0x2c4>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141c:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001440:	4a2d      	ldr	r2, [pc, #180]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800146a:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f aeaf 	bne.w	8001238 <HAL_GPIO_Init+0x10>
  }
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000800 	.word	0x48000800
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_PWREx_GetVoltageRange+0x18>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40007000 	.word	0x40007000

08001518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001526:	d130      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001534:	d038      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2232      	movs	r2, #50	; 0x32
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	e002      	b.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3b01      	subs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d102      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f2      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001584:	d110      	bne.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e00f      	b.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d007      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40007000 	.word	0x40007000
 80015bc:	20000004 	.word	0x20000004
 80015c0:	431bde83 	.word	0x431bde83

080015c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f000 bc02 	b.w	8001ddc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d8:	4b96      	ldr	r3, [pc, #600]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e2:	4b94      	ldr	r3, [pc, #592]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80e4 	beq.w	80017c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_RCC_OscConfig+0x4c>
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	f040 808b 	bne.w	800171e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b01      	cmp	r3, #1
 800160c:	f040 8087 	bne.w	800171e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001610:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_OscConfig+0x64>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e3d9      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	4b81      	ldr	r3, [pc, #516]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_RCC_OscConfig+0x7e>
 8001638:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001640:	e005      	b.n	800164e <HAL_RCC_OscConfig+0x8a>
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164e:	4293      	cmp	r3, r2
 8001650:	d223      	bcs.n	800169a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fd54 	bl	8002104 <RCC_SetFlashLatencyFromMSIRange>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e3ba      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001666:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a72      	ldr	r2, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b70      	ldr	r3, [pc, #448]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	496d      	ldr	r1, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001684:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4968      	ldr	r1, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	e025      	b.n	80016e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169a:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4960      	ldr	r1, [pc, #384]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	495b      	ldr	r1, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fd14 	bl	8002104 <RCC_SetFlashLatencyFromMSIRange>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e37a      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e6:	f000 fc81 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b51      	ldr	r3, [pc, #324]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4950      	ldr	r1, [pc, #320]	; (8001838 <HAL_RCC_OscConfig+0x274>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_RCC_OscConfig+0x278>)
 8001704:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001706:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc26 	bl	8000f5c <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d052      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	e35e      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d032      	beq.n	800178c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a42      	ldr	r2, [pc, #264]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001732:	f7ff fc63 	bl	8000ffc <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800173a:	f7ff fc5f 	bl	8000ffc <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e347      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800174c:	4b39      	ldr	r3, [pc, #228]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a35      	ldr	r2, [pc, #212]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4930      	ldr	r1, [pc, #192]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	492b      	ldr	r1, [pc, #172]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
 800178a:	e01a      	b.n	80017c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001798:	f7ff fc30 	bl	8000ffc <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc2c 	bl	8000ffc <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e314      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1dc>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d073      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_OscConfig+0x21c>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d10e      	bne.n	80017f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d10b      	bne.n	80017f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d063      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d15f      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e2f1      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d106      	bne.n	8001810 <HAL_RCC_OscConfig+0x24c>
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e025      	b.n	800185c <HAL_RCC_OscConfig+0x298>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d114      	bne.n	8001844 <HAL_RCC_OscConfig+0x280>
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a02      	ldr	r2, [pc, #8]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e013      	b.n	800185c <HAL_RCC_OscConfig+0x298>
 8001834:	40021000 	.word	0x40021000
 8001838:	0800a104 	.word	0x0800a104
 800183c:	20000004 	.word	0x20000004
 8001840:	20000008 	.word	0x20000008
 8001844:	4ba0      	ldr	r3, [pc, #640]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a9f      	ldr	r2, [pc, #636]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b9d      	ldr	r3, [pc, #628]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a9c      	ldr	r2, [pc, #624]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fbca 	bl	8000ffc <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fbc6 	bl	8000ffc <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e2ae      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b92      	ldr	r3, [pc, #584]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x2a8>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fbb6 	bl	8000ffc <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fbb2 	bl	8000ffc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e29a      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x2d0>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d060      	beq.n	8001984 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_OscConfig+0x310>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d116      	bne.n	8001902 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	4b7c      	ldr	r3, [pc, #496]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_OscConfig+0x328>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e277      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	4973      	ldr	r1, [pc, #460]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001900:	e040      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d023      	beq.n	8001952 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190a:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fb71 	bl	8000ffc <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fb6d 	bl	8000ffc <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e255      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001930:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b62      	ldr	r3, [pc, #392]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	495f      	ldr	r1, [pc, #380]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e018      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5c      	ldr	r2, [pc, #368]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800195c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff fb4d 	bl	8000ffc <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff fb49 	bl	8000ffc <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e231      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001998:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff fb28 	bl	8000ffc <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fb24 	bl	8000ffc <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e20c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ef      	beq.n	80019b0 <HAL_RCC_OscConfig+0x3ec>
 80019d0:	e01b      	b.n	8001a0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d8:	4a3b      	ldr	r2, [pc, #236]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb0b 	bl	8000ffc <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fb07 	bl	8000ffc <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1ef      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ef      	bne.n	80019ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80a6 	beq.w	8001b64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10d      	bne.n	8001a44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d118      	bne.n	8001a82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff face 	bl	8000ffc <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a64:	f7ff faca 	bl	8000ffc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1b2      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4d8>
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9a:	e029      	b.n	8001af0 <HAL_RCC_OscConfig+0x52c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d115      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x50c>
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x52c>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	4b9a      	ldr	r3, [pc, #616]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a99      	ldr	r2, [pc, #612]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae0:	4b96      	ldr	r3, [pc, #600]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	4a95      	ldr	r2, [pc, #596]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d016      	beq.n	8001b26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff fa80 	bl	8000ffc <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff fa7c 	bl	8000ffc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e162      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b16:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ed      	beq.n	8001b00 <HAL_RCC_OscConfig+0x53c>
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff fa69 	bl	8000ffc <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff fa65 	bl	8000ffc <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e14b      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b44:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ed      	bne.n	8001b2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d03c      	beq.n	8001bea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7e:	4a6f      	ldr	r2, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff fa38 	bl	8000ffc <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b90:	f7ff fa34 	bl	8000ffc <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e11c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ba2:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ef      	beq.n	8001b90 <HAL_RCC_OscConfig+0x5cc>
 8001bb0:	e01b      	b.n	8001bea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb2:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb8:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fa1b 	bl	8000ffc <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bca:	f7ff fa17 	bl	8000ffc <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0ff      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bdc:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ef      	bne.n	8001bca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80f3 	beq.w	8001dda <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f040 80c9 	bne.w	8001d90 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0203 	and.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d12c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d123      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d11b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d113      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d109      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3b01      	subs	r3, #1
 8001c66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d06b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d062      	beq.n	8001d38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0ac      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c8e:	f7ff f9b5 	bl	8000ffc <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f9b1 	bl	8000ffc <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e099      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_OscConfig+0x77c>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cce:	0212      	lsls	r2, r2, #8
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd6:	0852      	lsrs	r2, r2, #1
 8001cd8:	3a01      	subs	r2, #1
 8001cda:	0552      	lsls	r2, r2, #21
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ce2:	0852      	lsrs	r2, r2, #1
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	0652      	lsls	r2, r2, #25
 8001ce8:	4311      	orrs	r1, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cee:	06d2      	lsls	r2, r2, #27
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	4912      	ldr	r1, [pc, #72]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d10:	f7ff f974 	bl	8000ffc <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f970 	bl	8000ffc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e058      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d36:	e050      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04f      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d144      	bne.n	8001dda <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d68:	f7ff f948 	bl	8000ffc <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f944 	bl	8000ffc <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e02c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x7ac>
 8001d8e:	e024      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d01f      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f92b 	bl	8000ffc <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f927 	bl	8000ffc <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4905      	ldr	r1, [pc, #20]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_OscConfig+0x824>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
 8001dd4:	e001      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	feeefffc 	.word	0xfeeefffc

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e7      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4970      	ldr	r1, [pc, #448]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0cf      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d908      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4960      	ldr	r1, [pc, #384]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04c      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d121      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0a6      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8a:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e09a      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e08e      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e086      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4943      	ldr	r1, [pc, #268]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed4:	f7ff f892 	bl	8000ffc <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7ff f88e 	bl	8000ffc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e06e      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d208      	bcs.n	8001f32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	492b      	ldr	r1, [pc, #172]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d210      	bcs.n	8001f62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 0207 	bic.w	r2, r3, #7
 8001f48:	4923      	ldr	r1, [pc, #140]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e036      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4918      	ldr	r1, [pc, #96]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4910      	ldr	r1, [pc, #64]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa0:	f000 f824 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	490b      	ldr	r1, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ffc9 	bl	8000f5c <HAL_InitTick>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fce:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	0800a104 	.word	0x0800a104
 8001fe4:	20000004 	.word	0x20000004
 8001fe8:	20000008 	.word	0x20000008

08001fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x34>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d121      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d11e      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e005      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d102      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	e004      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d101      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_RCC_GetSysClockFreq+0x114>)
 8002072:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d134      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0xa6>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d003      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0xac>
 8002090:	e005      	b.n	800209e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002094:	617b      	str	r3, [r7, #20]
      break;
 8002096:	e005      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_GetSysClockFreq+0x114>)
 800209a:	617b      	str	r3, [r7, #20]
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	fb03 f202 	mul.w	r2, r3, r2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	0e5b      	lsrs	r3, r3, #25
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	3301      	adds	r3, #1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e4:	69bb      	ldr	r3, [r7, #24]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	0800a114 	.word	0x0800a114
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200

08002104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800211c:	f7ff f9ee 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002120:	6178      	str	r0, [r7, #20]
 8002122:	e014      	b.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	4a24      	ldr	r2, [pc, #144]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	6593      	str	r3, [r2, #88]	; 0x58
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800213c:	f7ff f9de 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002154:	d10b      	bne.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d919      	bls.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2ba0      	cmp	r3, #160	; 0xa0
 8002160:	d902      	bls.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002162:	2302      	movs	r3, #2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	e013      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e010      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d902      	bls.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002174:	2303      	movs	r3, #3
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e00a      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b80      	cmp	r3, #128	; 0x80
 800217e:	d102      	bne.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002180:	2302      	movs	r3, #2
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e004      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b70      	cmp	r3, #112	; 0x70
 800218a:	d101      	bne.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800218c:	2301      	movs	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 0207 	bic.w	r2, r3, #7
 8002198:	4909      	ldr	r1, [pc, #36]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40022000 	.word	0x40022000

080021c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e095      	b.n	8002302 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d108      	bne.n	80021f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e6:	d009      	beq.n	80021fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
 80021ee:	e005      	b.n	80021fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fd0e 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002232:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800223c:	d902      	bls.n	8002244 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e002      	b.n	800224a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002248:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002252:	d007      	beq.n	8002264 <HAL_SPI_Init+0xa0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800225c:	d002      	beq.n	8002264 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	ea42 0103 	orr.w	r1, r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	0c1b      	lsrs	r3, r3, #16
 80022c0:	f003 0204 	and.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022e0:	ea42 0103 	orr.w	r1, r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b088      	sub	sp, #32
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_SPI_Transmit+0x22>
 8002328:	2302      	movs	r3, #2
 800232a:	e15f      	b.n	80025ec <HAL_SPI_Transmit+0x2e2>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002334:	f7fe fe62 	bl	8000ffc <HAL_GetTick>
 8002338:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d002      	beq.n	8002350 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800234a:	2302      	movs	r3, #2
 800234c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800234e:	e148      	b.n	80025e2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_SPI_Transmit+0x52>
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002360:	e13f      	b.n	80025e2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ac:	d10f      	bne.n	80023ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d007      	beq.n	80023ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023f4:	d94f      	bls.n	8002496 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_SPI_Transmit+0xfa>
 80023fe:	8afb      	ldrh	r3, [r7, #22]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d142      	bne.n	800248a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	1c9a      	adds	r2, r3, #2
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002428:	e02f      	b.n	800248a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b02      	cmp	r3, #2
 8002436:	d112      	bne.n	800245e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	1c9a      	adds	r2, r3, #2
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800245c:	e015      	b.n	800248a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245e:	f7fe fdcd 	bl	8000ffc <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d803      	bhi.n	8002476 <HAL_SPI_Transmit+0x16c>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d102      	bne.n	800247c <HAL_SPI_Transmit+0x172>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002488:	e0ab      	b.n	80025e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ca      	bne.n	800242a <HAL_SPI_Transmit+0x120>
 8002494:	e080      	b.n	8002598 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_SPI_Transmit+0x19a>
 800249e:	8afb      	ldrh	r3, [r7, #22]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d174      	bne.n	800258e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d912      	bls.n	80024d4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	881a      	ldrh	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b02      	subs	r3, #2
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024d2:	e05c      	b.n	800258e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80024fa:	e048      	b.n	800258e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d12b      	bne.n	8002562 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d912      	bls.n	800253a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b02      	subs	r3, #2
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002538:	e029      	b.n	800258e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330c      	adds	r3, #12
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002560:	e015      	b.n	800258e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002562:	f7fe fd4b 	bl	8000ffc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d803      	bhi.n	800257a <HAL_SPI_Transmit+0x270>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d102      	bne.n	8002580 <HAL_SPI_Transmit+0x276>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800258c:	e029      	b.n	80025e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1b1      	bne.n	80024fc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	6839      	ldr	r1, [r7, #0]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fb69 	bl	8002c74 <SPI_EndRxTxTransaction>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	77fb      	strb	r3, [r7, #31]
 80025d8:	e003      	b.n	80025e2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002602:	2301      	movs	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_SPI_TransmitReceive+0x26>
 8002616:	2302      	movs	r3, #2
 8002618:	e20a      	b.n	8002a30 <HAL_SPI_TransmitReceive+0x43c>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002622:	f7fe fceb 	bl	8000ffc <HAL_GetTick>
 8002626:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800262e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800263e:	7efb      	ldrb	r3, [r7, #27]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d00e      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x6e>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800264a:	d106      	bne.n	800265a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <HAL_SPI_TransmitReceive+0x66>
 8002654:	7efb      	ldrb	r3, [r7, #27]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d003      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002660:	e1e0      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_SPI_TransmitReceive+0x80>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_SPI_TransmitReceive+0x80>
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800267a:	e1d3      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b04      	cmp	r3, #4
 8002686:	d003      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2205      	movs	r2, #5
 800268c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026d2:	d802      	bhi.n	80026da <HAL_SPI_TransmitReceive+0xe6>
 80026d4:	8a3b      	ldrh	r3, [r7, #16]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d908      	bls.n	80026ec <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	e007      	b.n	80026fc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d007      	beq.n	800271a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002722:	f240 8081 	bls.w	8002828 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_SPI_TransmitReceive+0x140>
 800272e:	8a7b      	ldrh	r3, [r7, #18]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d16d      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	881a      	ldrh	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	1c9a      	adds	r2, r3, #2
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002758:	e05a      	b.n	8002810 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11b      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x1ac>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x1ac>
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	2b01      	cmp	r3, #1
 8002776:	d113      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	1c9a      	adds	r2, r3, #2
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d11c      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x1f4>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	b292      	uxth	r2, r2
 80027c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027e4:	2301      	movs	r3, #1
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027e8:	f7fe fc08 	bl	8000ffc <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d80b      	bhi.n	8002810 <HAL_SPI_TransmitReceive+0x21c>
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d007      	beq.n	8002810 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800280e:	e109      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d19f      	bne.n	800275a <HAL_SPI_TransmitReceive+0x166>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d199      	bne.n	800275a <HAL_SPI_TransmitReceive+0x166>
 8002826:	e0e3      	b.n	80029f0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x244>
 8002830:	8a7b      	ldrh	r3, [r7, #18]
 8002832:	2b01      	cmp	r3, #1
 8002834:	f040 80cf 	bne.w	80029d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d912      	bls.n	8002868 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	1c9a      	adds	r2, r3, #2
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b02      	subs	r3, #2
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002866:	e0b6      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800288e:	e0a2      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d134      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x314>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02f      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x314>
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d12c      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d912      	bls.n	80028de <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	881a      	ldrh	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	1c9a      	adds	r2, r3, #2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b02      	subs	r3, #2
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028dc:	e012      	b.n	8002904 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d148      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x3b4>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d042      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d923      	bls.n	8002976 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	b292      	uxth	r2, r2
 800293a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b02      	subs	r3, #2
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d81f      	bhi.n	80029a4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e016      	b.n	80029a4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f103 020c 	add.w	r2, r3, #12
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a4:	2301      	movs	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029a8:	f7fe fb28 	bl	8000ffc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d803      	bhi.n	80029c0 <HAL_SPI_TransmitReceive+0x3cc>
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d102      	bne.n	80029c6 <HAL_SPI_TransmitReceive+0x3d2>
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80029d4:	e026      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f47f af57 	bne.w	8002890 <HAL_SPI_TransmitReceive+0x29c>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f47f af50 	bne.w	8002890 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f93d 	bl	8002c74 <SPI_EndRxTxTransaction>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a1a:	e003      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3728      	adds	r7, #40	; 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a48:	f7fe fad8 	bl	8000ffc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a58:	f7fe fad0 	bl	8000ffc <HAL_GetTick>
 8002a5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	015b      	lsls	r3, r3, #5
 8002a64:	0d1b      	lsrs	r3, r3, #20
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a6e:	e054      	b.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d050      	beq.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a78:	f7fe fac0 	bl	8000ffc <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d902      	bls.n	8002a8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d13d      	bne.n	8002b0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa6:	d111      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab0:	d004      	beq.n	8002abc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d107      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad4:	d10f      	bne.n	8002af6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e017      	b.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4013      	ands	r3, r2
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d19b      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000004 	.word	0x20000004

08002b48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b5a:	f7fe fa4f 	bl	8000ffc <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002b6a:	f7fe fa47 	bl	8000ffc <HAL_GetTick>
 8002b6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b78:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00da      	lsls	r2, r3, #3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	0d1b      	lsrs	r3, r3, #20
 8002b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b90:	e060      	b.n	8002c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b98:	d107      	bne.n	8002baa <SPI_WaitFifoStateUntilTimeout+0x62>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d104      	bne.n	8002baa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d050      	beq.n	8002c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bb2:	f7fe fa23 	bl	8000ffc <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d902      	bls.n	8002bc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d13d      	bne.n	8002c44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be0:	d111      	bne.n	8002c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bea:	d004      	beq.n	8002bf6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf4:	d107      	bne.n	8002c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0e:	d10f      	bne.n	8002c30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e010      	b.n	8002c66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d196      	bne.n	8002b92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3728      	adds	r7, #40	; 0x28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000004 	.word	0x20000004

08002c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff ff5b 	bl	8002b48 <SPI_WaitFifoStateUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e027      	b.n	8002cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f7ff fec0 	bl	8002a38 <SPI_WaitFlagStateUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	f043 0220 	orr.w	r2, r3, #32
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e014      	b.n	8002cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff ff34 	bl	8002b48 <SPI_WaitFifoStateUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e000      	b.n	8002cf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002d04:	4904      	ldr	r1, [pc, #16]	; (8002d18 <MX_FATFS_Init+0x18>)
 8002d06:	4805      	ldr	r0, [pc, #20]	; (8002d1c <MX_FATFS_Init+0x1c>)
 8002d08:	f005 fa3c 	bl	8008184 <FATFS_LinkDriver>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <MX_FATFS_Init+0x20>)
 8002d12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200025f0 	.word	0x200025f0
 8002d1c:	20000010 	.word	0x20000010
 8002d20:	200025ec 	.word	0x200025ec

08002d24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002d28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	spi_cs_sd_write(false);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f005 ff4d 	bl	8008bd8 <spi_cs_sd_write>
	HAL_Delay(1);
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f7fe f968 	bl	8001014 <HAL_Delay>
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	spi_cs_sd_write(true);
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f005 ff43 	bl	8008bd8 <spi_cs_sd_write>
	HAL_Delay(1);
 8002d52:	2001      	movs	r0, #1
 8002d54:	f7fe f95e 	bl	8001014 <HAL_Delay>
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d66:	bf00      	nop
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <SPI_TxByte+0x30>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d1f8      	bne.n	8002d68 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002d76:	1df9      	adds	r1, r7, #7
 8002d78:	2364      	movs	r3, #100	; 0x64
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	4803      	ldr	r0, [pc, #12]	; (8002d8c <SPI_TxByte+0x30>)
 8002d7e:	f7ff fac4 	bl	800230a <HAL_SPI_Transmit>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000233c 	.word	0x2000233c

08002d90 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d9c:	bf00      	nop
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <SPI_TxBuffer+0x30>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d1f8      	bne.n	8002d9e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002dac:	887a      	ldrh	r2, [r7, #2]
 8002dae:	2364      	movs	r3, #100	; 0x64
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4803      	ldr	r0, [pc, #12]	; (8002dc0 <SPI_TxBuffer+0x30>)
 8002db4:	f7ff faa9 	bl	800230a <HAL_SPI_Transmit>
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	2000233c 	.word	0x2000233c

08002dc4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002dca:	23ff      	movs	r3, #255	; 0xff
 8002dcc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002dce:	bf00      	nop
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <SPI_RxByte+0x34>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d1f8      	bne.n	8002dd0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002dde:	1dba      	adds	r2, r7, #6
 8002de0:	1df9      	adds	r1, r7, #7
 8002de2:	2364      	movs	r3, #100	; 0x64
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2301      	movs	r3, #1
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <SPI_RxByte+0x34>)
 8002dea:	f7ff fc03 	bl	80025f4 <HAL_SPI_TransmitReceive>

	return data;
 8002dee:	79bb      	ldrb	r3, [r7, #6]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	2000233c 	.word	0x2000233c

08002dfc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002e04:	f7ff ffde 	bl	8002dc4 <SPI_RxByte>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	701a      	strb	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <SD_ReadyWait+0x30>)
 8002e20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e24:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002e26:	f7ff ffcd 	bl	8002dc4 <SPI_RxByte>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	2bff      	cmp	r3, #255	; 0xff
 8002e32:	d004      	beq.n	8002e3e <SD_ReadyWait+0x26>
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <SD_ReadyWait+0x30>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f3      	bne.n	8002e26 <SD_ReadyWait+0xe>

	return res;
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200025e0 	.word	0x200025e0

08002e4c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002e52:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002e56:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002e58:	f7ff ff76 	bl	8002d48 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	e005      	b.n	8002e6e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002e62:	20ff      	movs	r0, #255	; 0xff
 8002e64:	f7ff ff7a 	bl	8002d5c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b09      	cmp	r3, #9
 8002e72:	ddf6      	ble.n	8002e62 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002e74:	f7ff ff5e 	bl	8002d34 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002e78:	2340      	movs	r3, #64	; 0x40
 8002e7a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002e8c:	2395      	movs	r3, #149	; 0x95
 8002e8e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002e90:	463b      	mov	r3, r7
 8002e92:	2106      	movs	r1, #6
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff7b 	bl	8002d90 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8002e9a:	e002      	b.n	8002ea2 <SD_PowerOn+0x56>
	{
		cnt--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8002ea2:	f7ff ff8f 	bl	8002dc4 <SPI_RxByte>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d002      	beq.n	8002eb2 <SD_PowerOn+0x66>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f4      	bne.n	8002e9c <SD_PowerOn+0x50>
	}

	DESELECT();
 8002eb2:	f7ff ff49 	bl	8002d48 <DESELECT>
	SPI_TxByte(0XFF);
 8002eb6:	20ff      	movs	r0, #255	; 0xff
 8002eb8:	f7ff ff50 	bl	8002d5c <SPI_TxByte>

	PowerFlag = 1;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <SD_PowerOn+0x80>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200025f5 	.word	0x200025f5

08002ed0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <SD_PowerOff+0x14>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	200025f5 	.word	0x200025f5

08002ee8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <SD_CheckPower+0x14>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	200025f5 	.word	0x200025f5

08002f00 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <SD_RxDataBlock+0x5c>)
 8002f0c:	22c8      	movs	r2, #200	; 0xc8
 8002f0e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002f10:	f7ff ff58 	bl	8002dc4 <SPI_RxByte>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2bff      	cmp	r3, #255	; 0xff
 8002f1c:	d104      	bne.n	8002f28 <SD_RxDataBlock+0x28>
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <SD_RxDataBlock+0x5c>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f3      	bne.n	8002f10 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2bfe      	cmp	r3, #254	; 0xfe
 8002f2c:	d001      	beq.n	8002f32 <SD_RxDataBlock+0x32>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e00f      	b.n	8002f52 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff5f 	bl	8002dfc <SPI_RxBytePtr>
	} while(len--);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	1e5a      	subs	r2, r3, #1
 8002f42:	603a      	str	r2, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f4      	bne.n	8002f32 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002f48:	f7ff ff3c 	bl	8002dc4 <SPI_RxByte>
	SPI_RxByte();
 8002f4c:	f7ff ff3a 	bl	8002dc4 <SPI_RxByte>

	return TRUE;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200025de 	.word	0x200025de

08002f60 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002f70:	f7ff ff52 	bl	8002e18 <SD_ReadyWait>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	d001      	beq.n	8002f7e <SD_TxDataBlock+0x1e>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e02f      	b.n	8002fde <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff feeb 	bl	8002d5c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	2bfd      	cmp	r3, #253	; 0xfd
 8002f8a:	d020      	beq.n	8002fce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fefd 	bl	8002d90 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002f96:	f7ff ff15 	bl	8002dc4 <SPI_RxByte>
		SPI_RxByte();
 8002f9a:	f7ff ff13 	bl	8002dc4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002f9e:	e00b      	b.n	8002fb8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002fa0:	f7ff ff10 	bl	8002dc4 <SPI_RxByte>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d006      	beq.n	8002fc0 <SD_TxDataBlock+0x60>
			i++;
 8002fb2:	7bbb      	ldrb	r3, [r7, #14]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002fb8:	7bbb      	ldrb	r3, [r7, #14]
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d9f0      	bls.n	8002fa0 <SD_TxDataBlock+0x40>
 8002fbe:	e000      	b.n	8002fc2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002fc0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002fc2:	bf00      	nop
 8002fc4:	f7ff fefe 	bl	8002dc4 <SPI_RxByte>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0fa      	beq.n	8002fc4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d101      	bne.n	8002fdc <SD_TxDataBlock+0x7c>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <SD_TxDataBlock+0x7e>

	return FALSE;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	4603      	mov	r3, r0
 8002fee:	6039      	str	r1, [r7, #0]
 8002ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002ff2:	f7ff ff11 	bl	8002e18 <SD_ReadyWait>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2bff      	cmp	r3, #255	; 0xff
 8002ffa:	d001      	beq.n	8003000 <SD_SendCmd+0x1a>
 8002ffc:	23ff      	movs	r3, #255	; 0xff
 8002ffe:	e042      	b.n	8003086 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff feaa 	bl	8002d5c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	0e1b      	lsrs	r3, r3, #24
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fea4 	bl	8002d5c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fe9e 	bl	8002d5c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fe98 	bl	8002d5c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fe93 	bl	8002d5c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d102      	bne.n	8003042 <SD_SendCmd+0x5c>
 800303c:	2395      	movs	r3, #149	; 0x95
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e007      	b.n	8003052 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b48      	cmp	r3, #72	; 0x48
 8003046:	d102      	bne.n	800304e <SD_SendCmd+0x68>
 8003048:	2387      	movs	r3, #135	; 0x87
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e001      	b.n	8003052 <SD_SendCmd+0x6c>
	else crc = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fe81 	bl	8002d5c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b4c      	cmp	r3, #76	; 0x4c
 800305e:	d101      	bne.n	8003064 <SD_SendCmd+0x7e>
 8003060:	f7ff feb0 	bl	8002dc4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003064:	230a      	movs	r3, #10
 8003066:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003068:	f7ff feac 	bl	8002dc4 <SPI_RxByte>
 800306c:	4603      	mov	r3, r0
 800306e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003070:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003074:	2b00      	cmp	r3, #0
 8003076:	da05      	bge.n	8003084 <SD_SendCmd+0x9e>
 8003078:	7bbb      	ldrb	r3, [r7, #14]
 800307a:	3b01      	subs	r3, #1
 800307c:	73bb      	strb	r3, [r7, #14]
 800307e:	7bbb      	ldrb	r3, [r7, #14]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f1      	bne.n	8003068 <SD_SendCmd+0x82>

	return res;
 8003084:	7b7b      	ldrb	r3, [r7, #13]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <SD_disk_initialize+0x14>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0d6      	b.n	8003252 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80030a4:	4b6d      	ldr	r3, [pc, #436]	; (800325c <SD_disk_initialize+0x1cc>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <SD_disk_initialize+0x2a>
 80030b2:	4b6a      	ldr	r3, [pc, #424]	; (800325c <SD_disk_initialize+0x1cc>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	e0cb      	b.n	8003252 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80030ba:	f7ff fec7 	bl	8002e4c <SD_PowerOn>

	/* slave select */
	SELECT();
 80030be:	f7ff fe39 	bl	8002d34 <SELECT>

	/* check disk type */
	type = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80030c6:	2100      	movs	r1, #0
 80030c8:	2040      	movs	r0, #64	; 0x40
 80030ca:	f7ff ff8c 	bl	8002fe6 <SD_SendCmd>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 80a6 	bne.w	8003222 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80030d6:	4b62      	ldr	r3, [pc, #392]	; (8003260 <SD_disk_initialize+0x1d0>)
 80030d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030dc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80030de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80030e2:	2048      	movs	r0, #72	; 0x48
 80030e4:	f7ff ff7f 	bl	8002fe6 <SD_SendCmd>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d158      	bne.n	80031a0 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	e00c      	b.n	800310e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80030f4:	7bfc      	ldrb	r4, [r7, #15]
 80030f6:	f7ff fe65 	bl	8002dc4 <SPI_RxByte>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	f104 0310 	add.w	r3, r4, #16
 8003102:	443b      	add	r3, r7
 8003104:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	3301      	adds	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d9ef      	bls.n	80030f4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003114:	7abb      	ldrb	r3, [r7, #10]
 8003116:	2b01      	cmp	r3, #1
 8003118:	f040 8083 	bne.w	8003222 <SD_disk_initialize+0x192>
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	2baa      	cmp	r3, #170	; 0xaa
 8003120:	d17f      	bne.n	8003222 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003122:	2100      	movs	r1, #0
 8003124:	2077      	movs	r0, #119	; 0x77
 8003126:	f7ff ff5e 	bl	8002fe6 <SD_SendCmd>
 800312a:	4603      	mov	r3, r0
 800312c:	2b01      	cmp	r3, #1
 800312e:	d807      	bhi.n	8003140 <SD_disk_initialize+0xb0>
 8003130:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003134:	2069      	movs	r0, #105	; 0x69
 8003136:	f7ff ff56 	bl	8002fe6 <SD_SendCmd>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8003140:	4b47      	ldr	r3, [pc, #284]	; (8003260 <SD_disk_initialize+0x1d0>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1eb      	bne.n	8003122 <SD_disk_initialize+0x92>
 800314a:	e000      	b.n	800314e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800314c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800314e:	4b44      	ldr	r3, [pc, #272]	; (8003260 <SD_disk_initialize+0x1d0>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d064      	beq.n	8003222 <SD_disk_initialize+0x192>
 8003158:	2100      	movs	r1, #0
 800315a:	207a      	movs	r0, #122	; 0x7a
 800315c:	f7ff ff43 	bl	8002fe6 <SD_SendCmd>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d15d      	bne.n	8003222 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e00c      	b.n	8003186 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800316c:	7bfc      	ldrb	r4, [r7, #15]
 800316e:	f7ff fe29 	bl	8002dc4 <SPI_RxByte>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	f104 0310 	add.w	r3, r4, #16
 800317a:	443b      	add	r3, r7
 800317c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	3301      	adds	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d9ef      	bls.n	800316c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800318c:	7a3b      	ldrb	r3, [r7, #8]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <SD_disk_initialize+0x10a>
 8003196:	230c      	movs	r3, #12
 8003198:	e000      	b.n	800319c <SD_disk_initialize+0x10c>
 800319a:	2304      	movs	r3, #4
 800319c:	73bb      	strb	r3, [r7, #14]
 800319e:	e040      	b.n	8003222 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80031a0:	2100      	movs	r1, #0
 80031a2:	2077      	movs	r0, #119	; 0x77
 80031a4:	f7ff ff1f 	bl	8002fe6 <SD_SendCmd>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d808      	bhi.n	80031c0 <SD_disk_initialize+0x130>
 80031ae:	2100      	movs	r1, #0
 80031b0:	2069      	movs	r0, #105	; 0x69
 80031b2:	f7ff ff18 	bl	8002fe6 <SD_SendCmd>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d801      	bhi.n	80031c0 <SD_disk_initialize+0x130>
 80031bc:	2302      	movs	r3, #2
 80031be:	e000      	b.n	80031c2 <SD_disk_initialize+0x132>
 80031c0:	2301      	movs	r3, #1
 80031c2:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80031c4:	7bbb      	ldrb	r3, [r7, #14]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d10e      	bne.n	80031e8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80031ca:	2100      	movs	r1, #0
 80031cc:	2077      	movs	r0, #119	; 0x77
 80031ce:	f7ff ff0a 	bl	8002fe6 <SD_SendCmd>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d80e      	bhi.n	80031f6 <SD_disk_initialize+0x166>
 80031d8:	2100      	movs	r1, #0
 80031da:	2069      	movs	r0, #105	; 0x69
 80031dc:	f7ff ff03 	bl	8002fe6 <SD_SendCmd>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <SD_disk_initialize+0x166>
 80031e6:	e00d      	b.n	8003204 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80031e8:	2100      	movs	r1, #0
 80031ea:	2041      	movs	r0, #65	; 0x41
 80031ec:	f7ff fefb 	bl	8002fe6 <SD_SendCmd>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <SD_disk_initialize+0x1d0>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e1      	bne.n	80031c4 <SD_disk_initialize+0x134>
 8003200:	e000      	b.n	8003204 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003202:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <SD_disk_initialize+0x1d0>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <SD_disk_initialize+0x18e>
 800320e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003212:	2050      	movs	r0, #80	; 0x50
 8003214:	f7ff fee7 	bl	8002fe6 <SD_SendCmd>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <SD_disk_initialize+0x192>
 800321e:	2300      	movs	r3, #0
 8003220:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <SD_disk_initialize+0x1d4>)
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003228:	f7ff fd8e 	bl	8002d48 <DESELECT>
	SPI_RxByte();
 800322c:	f7ff fdca 	bl	8002dc4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003230:	7bbb      	ldrb	r3, [r7, #14]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <SD_disk_initialize+0x1cc>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <SD_disk_initialize+0x1cc>)
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e001      	b.n	800324c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003248:	f7ff fe42 	bl	8002ed0 <SD_PowerOff>
	}

	return Stat;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <SD_disk_initialize+0x1cc>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b2db      	uxtb	r3, r3
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	2000000d 	.word	0x2000000d
 8003260:	200025de 	.word	0x200025de
 8003264:	200025f4 	.word	0x200025f4

08003268 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <SD_disk_status+0x14>
 8003278:	2301      	movs	r3, #1
 800327a:	e002      	b.n	8003282 <SD_disk_status+0x1a>
	return Stat;
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SD_disk_status+0x28>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	2000000d 	.word	0x2000000d

08003294 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <SD_disk_read+0x1c>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <SD_disk_read+0x20>
 80032b0:	2304      	movs	r3, #4
 80032b2:	e054      	b.n	800335e <SD_disk_read+0xca>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <SD_disk_read+0xd4>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <SD_disk_read+0x32>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e04b      	b.n	800335e <SD_disk_read+0xca>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80032c6:	4b29      	ldr	r3, [pc, #164]	; (800336c <SD_disk_read+0xd8>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <SD_disk_read+0x44>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	607b      	str	r3, [r7, #4]

	SELECT();
 80032d8:	f7ff fd2c 	bl	8002d34 <SELECT>

	if (count == 1)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d111      	bne.n	8003306 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	2051      	movs	r0, #81	; 0x51
 80032e6:	f7ff fe7e 	bl	8002fe6 <SD_SendCmd>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d12c      	bne.n	800334a <SD_disk_read+0xb6>
 80032f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032f4:	68b8      	ldr	r0, [r7, #8]
 80032f6:	f7ff fe03 	bl	8002f00 <SD_RxDataBlock>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d024      	beq.n	800334a <SD_disk_read+0xb6>
 8003300:	2300      	movs	r3, #0
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	e021      	b.n	800334a <SD_disk_read+0xb6>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	2052      	movs	r0, #82	; 0x52
 800330a:	f7ff fe6c 	bl	8002fe6 <SD_SendCmd>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11a      	bne.n	800334a <SD_disk_read+0xb6>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003318:	68b8      	ldr	r0, [r7, #8]
 800331a:	f7ff fdf1 	bl	8002f00 <SD_RxDataBlock>
 800331e:	4603      	mov	r3, r0
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <SD_disk_read+0xac>
				buff += 512;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003330:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3b01      	subs	r3, #1
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ea      	bne.n	8003314 <SD_disk_read+0x80>
 800333e:	e000      	b.n	8003342 <SD_disk_read+0xae>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003340:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003342:	2100      	movs	r1, #0
 8003344:	204c      	movs	r0, #76	; 0x4c
 8003346:	f7ff fe4e 	bl	8002fe6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800334a:	f7ff fcfd 	bl	8002d48 <DESELECT>
	SPI_RxByte();
 800334e:	f7ff fd39 	bl	8002dc4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	2000000d 	.word	0x2000000d
 800336c:	200025f4 	.word	0x200025f4

08003370 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <SD_disk_write+0x1c>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <SD_disk_write+0x20>
 800338c:	2304      	movs	r3, #4
 800338e:	e071      	b.n	8003474 <SD_disk_write+0x104>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003390:	4b3a      	ldr	r3, [pc, #232]	; (800347c <SD_disk_write+0x10c>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <SD_disk_write+0x32>
 800339e:	2303      	movs	r3, #3
 80033a0:	e068      	b.n	8003474 <SD_disk_write+0x104>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80033a2:	4b36      	ldr	r3, [pc, #216]	; (800347c <SD_disk_write+0x10c>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <SD_disk_write+0x44>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e05f      	b.n	8003474 <SD_disk_write+0x104>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80033b4:	4b32      	ldr	r3, [pc, #200]	; (8003480 <SD_disk_write+0x110>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <SD_disk_write+0x56>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	025b      	lsls	r3, r3, #9
 80033c4:	607b      	str	r3, [r7, #4]

	SELECT();
 80033c6:	f7ff fcb5 	bl	8002d34 <SELECT>

	if (count == 1)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d110      	bne.n	80033f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	2058      	movs	r0, #88	; 0x58
 80033d4:	f7ff fe07 	bl	8002fe6 <SD_SendCmd>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d140      	bne.n	8003460 <SD_disk_write+0xf0>
 80033de:	21fe      	movs	r1, #254	; 0xfe
 80033e0:	68b8      	ldr	r0, [r7, #8]
 80033e2:	f7ff fdbd 	bl	8002f60 <SD_TxDataBlock>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d039      	beq.n	8003460 <SD_disk_write+0xf0>
			count = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	e036      	b.n	8003460 <SD_disk_write+0xf0>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <SD_disk_write+0x110>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80033fe:	2100      	movs	r1, #0
 8003400:	2077      	movs	r0, #119	; 0x77
 8003402:	f7ff fdf0 	bl	8002fe6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	2057      	movs	r0, #87	; 0x57
 800340a:	f7ff fdec 	bl	8002fe6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	2059      	movs	r0, #89	; 0x59
 8003412:	f7ff fde8 	bl	8002fe6 <SD_SendCmd>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d121      	bne.n	8003460 <SD_disk_write+0xf0>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800341c:	21fc      	movs	r1, #252	; 0xfc
 800341e:	68b8      	ldr	r0, [r7, #8]
 8003420:	f7ff fd9e 	bl	8002f60 <SD_TxDataBlock>
 8003424:	4603      	mov	r3, r0
 8003426:	f083 0301 	eor.w	r3, r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <SD_disk_write+0xd6>
				buff += 512;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003436:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	3b01      	subs	r3, #1
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1eb      	bne.n	800341c <SD_disk_write+0xac>
 8003444:	e000      	b.n	8003448 <SD_disk_write+0xd8>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003446:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003448:	21fd      	movs	r1, #253	; 0xfd
 800344a:	2000      	movs	r0, #0
 800344c:	f7ff fd88 	bl	8002f60 <SD_TxDataBlock>
 8003450:	4603      	mov	r3, r0
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <SD_disk_write+0xf0>
			{
				count = 1;
 800345c:	2301      	movs	r3, #1
 800345e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003460:	f7ff fc72 	bl	8002d48 <DESELECT>
	SPI_RxByte();
 8003464:	f7ff fcae 	bl	8002dc4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	2000000d 	.word	0x2000000d
 8003480:	200025f4 	.word	0x200025f4

08003484 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b08b      	sub	sp, #44	; 0x2c
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	603a      	str	r2, [r7, #0]
 800348e:	71fb      	strb	r3, [r7, #7]
 8003490:	460b      	mov	r3, r1
 8003492:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <SD_disk_ioctl+0x1e>
 800349e:	2304      	movs	r3, #4
 80034a0:	e115      	b.n	80036ce <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80034a8:	79bb      	ldrb	r3, [r7, #6]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d124      	bne.n	80034f8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d012      	beq.n	80034dc <SD_disk_ioctl+0x58>
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	dc1a      	bgt.n	80034f0 <SD_disk_ioctl+0x6c>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <SD_disk_ioctl+0x40>
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d006      	beq.n	80034d0 <SD_disk_ioctl+0x4c>
 80034c2:	e015      	b.n	80034f0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80034c4:	f7ff fd04 	bl	8002ed0 <SD_PowerOff>
			res = RES_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80034ce:	e0fc      	b.n	80036ca <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80034d0:	f7ff fcbc 	bl	8002e4c <SD_PowerOn>
			res = RES_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80034da:	e0f6      	b.n	80036ca <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	1c5c      	adds	r4, r3, #1
 80034e0:	f7ff fd02 	bl	8002ee8 <SD_CheckPower>
 80034e4:	4603      	mov	r3, r0
 80034e6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80034ee:	e0ec      	b.n	80036ca <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80034f0:	2304      	movs	r3, #4
 80034f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034f6:	e0e8      	b.n	80036ca <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80034f8:	4b77      	ldr	r3, [pc, #476]	; (80036d8 <SD_disk_ioctl+0x254>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <SD_disk_ioctl+0x86>
 8003506:	2303      	movs	r3, #3
 8003508:	e0e1      	b.n	80036ce <SD_disk_ioctl+0x24a>

		SELECT();
 800350a:	f7ff fc13 	bl	8002d34 <SELECT>

		switch (ctrl)
 800350e:	79bb      	ldrb	r3, [r7, #6]
 8003510:	2b0d      	cmp	r3, #13
 8003512:	f200 80cb 	bhi.w	80036ac <SD_disk_ioctl+0x228>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <SD_disk_ioctl+0x98>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003617 	.word	0x08003617
 8003520:	08003555 	.word	0x08003555
 8003524:	08003607 	.word	0x08003607
 8003528:	080036ad 	.word	0x080036ad
 800352c:	080036ad 	.word	0x080036ad
 8003530:	080036ad 	.word	0x080036ad
 8003534:	080036ad 	.word	0x080036ad
 8003538:	080036ad 	.word	0x080036ad
 800353c:	080036ad 	.word	0x080036ad
 8003540:	080036ad 	.word	0x080036ad
 8003544:	080036ad 	.word	0x080036ad
 8003548:	08003629 	.word	0x08003629
 800354c:	0800364d 	.word	0x0800364d
 8003550:	08003671 	.word	0x08003671
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003554:	2100      	movs	r1, #0
 8003556:	2049      	movs	r0, #73	; 0x49
 8003558:	f7ff fd45 	bl	8002fe6 <SD_SendCmd>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80a8 	bne.w	80036b4 <SD_disk_ioctl+0x230>
 8003564:	f107 030c 	add.w	r3, r7, #12
 8003568:	2110      	movs	r1, #16
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fcc8 	bl	8002f00 <SD_RxDataBlock>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 809e 	beq.w	80036b4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8003578:	7b3b      	ldrb	r3, [r7, #12]
 800357a:	099b      	lsrs	r3, r3, #6
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10e      	bne.n	80035a0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003582:	7d7b      	ldrb	r3, [r7, #21]
 8003584:	b29a      	uxth	r2, r3
 8003586:	7d3b      	ldrb	r3, [r7, #20]
 8003588:	b29b      	uxth	r3, r3
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	b29b      	uxth	r3, r3
 800358e:	4413      	add	r3, r2
 8003590:	b29b      	uxth	r3, r3
 8003592:	3301      	adds	r3, #1
 8003594:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003596:	8bfb      	ldrh	r3, [r7, #30]
 8003598:	029a      	lsls	r2, r3, #10
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e02e      	b.n	80035fe <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80035a0:	7c7b      	ldrb	r3, [r7, #17]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	7dbb      	ldrb	r3, [r7, #22]
 80035aa:	09db      	lsrs	r3, r3, #7
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	7d7b      	ldrb	r3, [r7, #21]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 0306 	and.w	r3, r3, #6
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	4413      	add	r3, r2
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	3302      	adds	r3, #2
 80035c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80035c8:	7d3b      	ldrb	r3, [r7, #20]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4413      	add	r3, r2
 80035da:	b29a      	uxth	r2, r3
 80035dc:	7cbb      	ldrb	r3, [r7, #18]
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80035f0:	8bfa      	ldrh	r2, [r7, #30]
 80035f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035f6:	3b09      	subs	r3, #9
 80035f8:	409a      	lsls	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003604:	e056      	b.n	80036b4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003614:	e055      	b.n	80036c2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003616:	f7ff fbff 	bl	8002e18 <SD_ReadyWait>
 800361a:	4603      	mov	r3, r0
 800361c:	2bff      	cmp	r3, #255	; 0xff
 800361e:	d14b      	bne.n	80036b8 <SD_disk_ioctl+0x234>
 8003620:	2300      	movs	r3, #0
 8003622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003626:	e047      	b.n	80036b8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003628:	2100      	movs	r1, #0
 800362a:	2049      	movs	r0, #73	; 0x49
 800362c:	f7ff fcdb 	bl	8002fe6 <SD_SendCmd>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d142      	bne.n	80036bc <SD_disk_ioctl+0x238>
 8003636:	2110      	movs	r1, #16
 8003638:	6a38      	ldr	r0, [r7, #32]
 800363a:	f7ff fc61 	bl	8002f00 <SD_RxDataBlock>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03b      	beq.n	80036bc <SD_disk_ioctl+0x238>
 8003644:	2300      	movs	r3, #0
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800364a:	e037      	b.n	80036bc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800364c:	2100      	movs	r1, #0
 800364e:	204a      	movs	r0, #74	; 0x4a
 8003650:	f7ff fcc9 	bl	8002fe6 <SD_SendCmd>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d132      	bne.n	80036c0 <SD_disk_ioctl+0x23c>
 800365a:	2110      	movs	r1, #16
 800365c:	6a38      	ldr	r0, [r7, #32]
 800365e:	f7ff fc4f 	bl	8002f00 <SD_RxDataBlock>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02b      	beq.n	80036c0 <SD_disk_ioctl+0x23c>
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800366e:	e027      	b.n	80036c0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003670:	2100      	movs	r1, #0
 8003672:	207a      	movs	r0, #122	; 0x7a
 8003674:	f7ff fcb7 	bl	8002fe6 <SD_SendCmd>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003684:	e00b      	b.n	800369e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8003686:	6a3c      	ldr	r4, [r7, #32]
 8003688:	1c63      	adds	r3, r4, #1
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	f7ff fb9a 	bl	8002dc4 <SPI_RxByte>
 8003690:	4603      	mov	r3, r0
 8003692:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003698:	3301      	adds	r3, #1
 800369a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800369e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d9ef      	bls.n	8003686 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036b2:	e006      	b.n	80036c2 <SD_disk_ioctl+0x23e>
			break;
 80036b4:	bf00      	nop
 80036b6:	e004      	b.n	80036c2 <SD_disk_ioctl+0x23e>
			break;
 80036b8:	bf00      	nop
 80036ba:	e002      	b.n	80036c2 <SD_disk_ioctl+0x23e>
			break;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <SD_disk_ioctl+0x23e>
			break;
 80036c0:	bf00      	nop
		}

		DESELECT();
 80036c2:	f7ff fb41 	bl	8002d48 <DESELECT>
		SPI_RxByte();
 80036c6:	f7ff fb7d 	bl	8002dc4 <SPI_RxByte>
	}

	return res;
 80036ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	372c      	adds	r7, #44	; 0x2c
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000000d 	.word	0x2000000d

080036dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive number to identify the drive */
)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fcd1 	bl	8003090 <SD_disk_initialize>
 80036ee:	4603      	mov	r3, r0
 80036f0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fdae 	bl	8003268 <SD_disk_status>
 800370c:	4603      	mov	r3, r0
 800370e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4603      	mov	r3, r0
 8003726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003728:	7bf8      	ldrb	r0, [r7, #15]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	f7ff fdb0 	bl	8003294 <SD_disk_read>
 8003734:	4603      	mov	r3, r0
 8003736:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <USER_write>:
	BYTE pdrv,          /* Physical drive number to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4603      	mov	r3, r0
 800374e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003750:	7bf8      	ldrb	r0, [r7, #15]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	f7ff fe0a 	bl	8003370 <SD_disk_write>
 800375c:	4603      	mov	r3, r0
 800375e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	603a      	str	r2, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
 8003774:	460b      	mov	r3, r1
 8003776:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	79b9      	ldrb	r1, [r7, #6]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fe80 	bl	8003484 <SD_disk_ioctl>
 8003784:	4603      	mov	r3, r0
 8003786:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <disk_status+0x30>)
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	79fa      	ldrb	r2, [r7, #7]
 80037a8:	4905      	ldr	r1, [pc, #20]	; (80037c0 <disk_status+0x30>)
 80037aa:	440a      	add	r2, r1
 80037ac:	7a12      	ldrb	r2, [r2, #8]
 80037ae:	4610      	mov	r0, r2
 80037b0:	4798      	blx	r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20002a80 	.word	0x20002a80

080037c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <disk_initialize+0x48>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d111      	bne.n	8003800 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	4a0b      	ldr	r2, [pc, #44]	; (800380c <disk_initialize+0x48>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <disk_initialize+0x48>)
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	79fa      	ldrb	r2, [r7, #7]
 80037f2:	4906      	ldr	r1, [pc, #24]	; (800380c <disk_initialize+0x48>)
 80037f4:	440a      	add	r2, r1
 80037f6:	7a12      	ldrb	r2, [r2, #8]
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
 80037fc:	4603      	mov	r3, r0
 80037fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20002a80 	.word	0x20002a80

08003810 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <disk_read+0x3c>)
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	689c      	ldr	r4, [r3, #8]
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	4a07      	ldr	r2, [pc, #28]	; (800384c <disk_read+0x3c>)
 8003830:	4413      	add	r3, r2
 8003832:	7a18      	ldrb	r0, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	47a0      	blx	r4
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
}
 8003842:	4618      	mov	r0, r3
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}
 800384a:	bf00      	nop
 800384c:	20002a80 	.word	0x20002a80

08003850 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	4603      	mov	r3, r0
 800385e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <disk_write+0x3c>)
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68dc      	ldr	r4, [r3, #12]
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <disk_write+0x3c>)
 8003870:	4413      	add	r3, r2
 8003872:	7a18      	ldrb	r0, [r3, #8]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	47a0      	blx	r4
 800387c:	4603      	mov	r3, r0
 800387e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	bf00      	nop
 800388c:	20002a80 	.word	0x20002a80

08003890 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	603a      	str	r2, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
 800389c:	460b      	mov	r3, r1
 800389e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <disk_ioctl+0x38>)
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	79fa      	ldrb	r2, [r7, #7]
 80038ae:	4906      	ldr	r1, [pc, #24]	; (80038c8 <disk_ioctl+0x38>)
 80038b0:	440a      	add	r2, r1
 80038b2:	7a10      	ldrb	r0, [r2, #8]
 80038b4:	79b9      	ldrb	r1, [r7, #6]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	4798      	blx	r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20002a80 	.word	0x20002a80

080038cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3301      	adds	r3, #1
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80038dc:	89fb      	ldrh	r3, [r7, #14]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	b21a      	sxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b21b      	sxth	r3, r3
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b21b      	sxth	r3, r3
 80038ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80038ee:	89fb      	ldrh	r3, [r7, #14]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3303      	adds	r3, #3
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	3202      	adds	r2, #2
 8003914:	7812      	ldrb	r2, [r2, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	3201      	adds	r2, #1
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
	return rv;
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8003942:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003946:	b09d      	sub	sp, #116	; 0x74
 8003948:	af00      	add	r7, sp, #0
 800394a:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800394c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800394e:	3307      	adds	r3, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2200      	movs	r2, #0
 8003956:	469a      	mov	sl, r3
 8003958:	4693      	mov	fp, r2
 800395a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800395e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	0219      	lsls	r1, r3, #8
 800396c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003970:	0210      	lsls	r0, r2, #8
 8003972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003974:	3306      	adds	r3, #6
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2200      	movs	r2, #0
 800397c:	461c      	mov	r4, r3
 800397e:	4615      	mov	r5, r2
 8003980:	ea40 0804 	orr.w	r8, r0, r4
 8003984:	ea41 0905 	orr.w	r9, r1, r5
 8003988:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800398c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003990:	f04f 0000 	mov.w	r0, #0
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	0219      	lsls	r1, r3, #8
 800399a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800399e:	0210      	lsls	r0, r2, #8
 80039a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a2:	3305      	adds	r3, #5
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ac:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039ae:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80039b2:	4623      	mov	r3, r4
 80039b4:	4303      	orrs	r3, r0
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b8:	462b      	mov	r3, r5
 80039ba:	430b      	orrs	r3, r1
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039be:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80039c2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 80039c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80039ca:	f04f 0000 	mov.w	r0, #0
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	0219      	lsls	r1, r3, #8
 80039d4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80039d8:	0210      	lsls	r0, r2, #8
 80039da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039dc:	3304      	adds	r3, #4
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2200      	movs	r2, #0
 80039e4:	653b      	str	r3, [r7, #80]	; 0x50
 80039e6:	657a      	str	r2, [r7, #84]	; 0x54
 80039e8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80039ec:	4623      	mov	r3, r4
 80039ee:	4303      	orrs	r3, r0
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	462b      	mov	r3, r5
 80039f4:	430b      	orrs	r3, r1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80039fc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8003a00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0219      	lsls	r1, r3, #8
 8003a0e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a12:	0210      	lsls	r0, r2, #8
 8003a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a16:	3303      	adds	r3, #3
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a22:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003a26:	4623      	mov	r3, r4
 8003a28:	4303      	orrs	r3, r0
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003a36:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8003a3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	0219      	lsls	r1, r3, #8
 8003a48:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a4c:	0210      	lsls	r0, r2, #8
 8003a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a50:	3302      	adds	r3, #2
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2200      	movs	r2, #0
 8003a58:	643b      	str	r3, [r7, #64]	; 0x40
 8003a5a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a5c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8003a60:	4623      	mov	r3, r4
 8003a62:	4303      	orrs	r3, r0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	462b      	mov	r3, r5
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a70:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8003a74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	020b      	lsls	r3, r1, #8
 8003a82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a86:	0202      	lsls	r2, r0, #8
 8003a88:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a8a:	3101      	adds	r1, #1
 8003a8c:	7809      	ldrb	r1, [r1, #0]
 8003a8e:	b2c9      	uxtb	r1, r1
 8003a90:	2000      	movs	r0, #0
 8003a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a94:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003a96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4319      	orrs	r1, r3
 8003aa4:	60f9      	str	r1, [r7, #12]
 8003aa6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003aaa:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8003aae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	020b      	lsls	r3, r1, #8
 8003abc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ac0:	0202      	lsls	r2, r0, #8
 8003ac2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003ac4:	7809      	ldrb	r1, [r1, #0]
 8003ac6:	b2c9      	uxtb	r1, r1
 8003ac8:	2000      	movs	r0, #0
 8003aca:	6339      	str	r1, [r7, #48]	; 0x30
 8003acc:	6378      	str	r0, [r7, #52]	; 0x34
 8003ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4311      	orrs	r1, r2
 8003ad6:	6039      	str	r1, [r7, #0]
 8003ad8:	4629      	mov	r1, r5
 8003ada:	4319      	orrs	r1, r3
 8003adc:	6079      	str	r1, [r7, #4]
 8003ade:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ae2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8003ae6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	3774      	adds	r7, #116	; 0x74
 8003af0:	46bd      	mov	sp, r7
 8003af2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003af6:	4770      	bx	lr

08003af8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	887a      	ldrh	r2, [r7, #2]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	60fa      	str	r2, [r7, #12]
 8003b98:	783a      	ldrb	r2, [r7, #0]
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	0a02      	lsrs	r2, r0, #8
 8003baa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003bae:	0a0b      	lsrs	r3, r1, #8
 8003bb0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	60fa      	str	r2, [r7, #12]
 8003bba:	783a      	ldrb	r2, [r7, #0]
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	0a02      	lsrs	r2, r0, #8
 8003bcc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003bd0:	0a0b      	lsrs	r3, r1, #8
 8003bd2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	60fa      	str	r2, [r7, #12]
 8003bdc:	783a      	ldrb	r2, [r7, #0]
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	0a02      	lsrs	r2, r0, #8
 8003bee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003bf2:	0a0b      	lsrs	r3, r1, #8
 8003bf4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	60fa      	str	r2, [r7, #12]
 8003bfe:	783a      	ldrb	r2, [r7, #0]
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	0a02      	lsrs	r2, r0, #8
 8003c10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c14:	0a0b      	lsrs	r3, r1, #8
 8003c16:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	60fa      	str	r2, [r7, #12]
 8003c20:	783a      	ldrb	r2, [r7, #0]
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	0a02      	lsrs	r2, r0, #8
 8003c32:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c36:	0a0b      	lsrs	r3, r1, #8
 8003c38:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	60fa      	str	r2, [r7, #12]
 8003c42:	783a      	ldrb	r2, [r7, #0]
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	0a02      	lsrs	r2, r0, #8
 8003c54:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c58:	0a0b      	lsrs	r3, r1, #8
 8003c5a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	60fa      	str	r2, [r7, #12]
 8003c64:	783a      	ldrb	r2, [r7, #0]
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	0a02      	lsrs	r2, r0, #8
 8003c76:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c7a:	0a0b      	lsrs	r3, r1, #8
 8003c7c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	60fa      	str	r2, [r7, #12]
 8003c86:	783a      	ldrb	r2, [r7, #0]
 8003c88:	701a      	strb	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	1c53      	adds	r3, r2, #1
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	6179      	str	r1, [r7, #20]
 8003cbc:	7812      	ldrb	r2, [r2, #0]
 8003cbe:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f1      	bne.n	8003cb0 <mem_cpy+0x1a>
	}
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	617a      	str	r2, [r7, #20]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f3      	bne.n	8003ce8 <mem_set+0x10>
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003d0e:	b480      	push	{r7}
 8003d10:	b089      	sub	sp, #36	; 0x24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	61fa      	str	r2, [r7, #28]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	61ba      	str	r2, [r7, #24]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	1acb      	subs	r3, r1, r3
 8003d3a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <mem_cmp+0x40>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0eb      	beq.n	8003d26 <mem_cmp+0x18>

	return r;
 8003d4e:	697b      	ldr	r3, [r7, #20]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3724      	adds	r7, #36	; 0x24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003d66:	e002      	b.n	8003d6e <chk_chr+0x12>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <chk_chr+0x26>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d1f2      	bne.n	8003d68 <chk_chr+0xc>
	return *str;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	781b      	ldrb	r3, [r3, #0]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e029      	b.n	8003dfc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <chk_lock+0xb4>)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4413      	add	r3, r2
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01d      	beq.n	8003df2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003db6:	4a24      	ldr	r2, [pc, #144]	; (8003e48 <chk_lock+0xb4>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	4413      	add	r3, r2
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d116      	bne.n	8003df6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <chk_lock+0xb4>)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4413      	add	r3, r2
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10c      	bne.n	8003df6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <chk_lock+0xb4>)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4413      	add	r3, r2
 8003de4:	3308      	adds	r3, #8
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d102      	bne.n	8003df6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003df0:	e007      	b.n	8003e02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d9d2      	bls.n	8003da8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d109      	bne.n	8003e1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <chk_lock+0x80>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d101      	bne.n	8003e18 <chk_lock+0x84>
 8003e14:	2300      	movs	r3, #0
 8003e16:	e010      	b.n	8003e3a <chk_lock+0xa6>
 8003e18:	2312      	movs	r3, #18
 8003e1a:	e00e      	b.n	8003e3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d108      	bne.n	8003e34 <chk_lock+0xa0>
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <chk_lock+0xb4>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	4413      	add	r3, r2
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d101      	bne.n	8003e38 <chk_lock+0xa4>
 8003e34:	2310      	movs	r3, #16
 8003e36:	e000      	b.n	8003e3a <chk_lock+0xa6>
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20002600 	.word	0x20002600

08003e4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	e002      	b.n	8003e5e <enq_lock+0x12>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d806      	bhi.n	8003e72 <enq_lock+0x26>
 8003e64:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <enq_lock+0x40>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	4413      	add	r3, r2
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f2      	bne.n	8003e58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20002600 	.word	0x20002600

08003e90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e01f      	b.n	8003ee0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003ea0:	4a41      	ldr	r2, [pc, #260]	; (8003fa8 <inc_lock+0x118>)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4413      	add	r3, r2
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d113      	bne.n	8003eda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003eb2:	4a3d      	ldr	r2, [pc, #244]	; (8003fa8 <inc_lock+0x118>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	4413      	add	r3, r2
 8003eba:	3304      	adds	r3, #4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d109      	bne.n	8003eda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003ec6:	4a38      	ldr	r2, [pc, #224]	; (8003fa8 <inc_lock+0x118>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	4413      	add	r3, r2
 8003ece:	3308      	adds	r3, #8
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d006      	beq.n	8003ee8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3301      	adds	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9dc      	bls.n	8003ea0 <inc_lock+0x10>
 8003ee6:	e000      	b.n	8003eea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003ee8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d132      	bne.n	8003f56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e002      	b.n	8003efc <inc_lock+0x6c>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d806      	bhi.n	8003f10 <inc_lock+0x80>
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <inc_lock+0x118>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	4413      	add	r3, r2
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f2      	bne.n	8003ef6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d101      	bne.n	8003f1a <inc_lock+0x8a>
 8003f16:	2300      	movs	r3, #0
 8003f18:	e040      	b.n	8003f9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4922      	ldr	r1, [pc, #136]	; (8003fa8 <inc_lock+0x118>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	440b      	add	r3, r1
 8003f26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	491e      	ldr	r1, [pc, #120]	; (8003fa8 <inc_lock+0x118>)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	440b      	add	r3, r1
 8003f34:	3304      	adds	r3, #4
 8003f36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f3c:	491a      	ldr	r1, [pc, #104]	; (8003fa8 <inc_lock+0x118>)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	440b      	add	r3, r1
 8003f44:	3308      	adds	r3, #8
 8003f46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <inc_lock+0x118>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	4413      	add	r3, r2
 8003f50:	330c      	adds	r3, #12
 8003f52:	2200      	movs	r2, #0
 8003f54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d009      	beq.n	8003f70 <inc_lock+0xe0>
 8003f5c:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <inc_lock+0x118>)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	4413      	add	r3, r2
 8003f64:	330c      	adds	r3, #12
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <inc_lock+0xe0>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e015      	b.n	8003f9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <inc_lock+0xf8>
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <inc_lock+0x118>)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	4413      	add	r3, r2
 8003f7e:	330c      	adds	r3, #12
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	e001      	b.n	8003f8c <inc_lock+0xfc>
 8003f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f8c:	4906      	ldr	r1, [pc, #24]	; (8003fa8 <inc_lock+0x118>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	440b      	add	r3, r1
 8003f94:	330c      	adds	r3, #12
 8003f96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3301      	adds	r3, #1
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	20002600 	.word	0x20002600

08003fac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d825      	bhi.n	800400c <dec_lock+0x60>
		n = Files[i].ctr;
 8003fc0:	4a17      	ldr	r2, [pc, #92]	; (8004020 <dec_lock+0x74>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	4413      	add	r3, r2
 8003fc8:	330c      	adds	r3, #12
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003fce:	89fb      	ldrh	r3, [r7, #14]
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd4:	d101      	bne.n	8003fda <dec_lock+0x2e>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <dec_lock+0x3a>
 8003fe0:	89fb      	ldrh	r3, [r7, #14]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <dec_lock+0x74>)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	4413      	add	r3, r2
 8003fee:	330c      	adds	r3, #12
 8003ff0:	89fa      	ldrh	r2, [r7, #14]
 8003ff2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <dec_lock+0x5a>
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <dec_lock+0x74>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	4413      	add	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	737b      	strb	r3, [r7, #13]
 800400a:	e001      	b.n	8004010 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800400c:	2302      	movs	r3, #2
 800400e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004010:	7b7b      	ldrb	r3, [r7, #13]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20002600 	.word	0x20002600

08004024 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e010      	b.n	8004054 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004032:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <clear_lock+0x44>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4413      	add	r3, r2
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	d105      	bne.n	800404e <clear_lock+0x2a>
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <clear_lock+0x44>)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	4413      	add	r3, r2
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3301      	adds	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d9eb      	bls.n	8004032 <clear_lock+0xe>
	}
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	20002600 	.word	0x20002600

0800406c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	78db      	ldrb	r3, [r3, #3]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d034      	beq.n	80040ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	7858      	ldrb	r0, [r3, #1]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004090:	2301      	movs	r3, #1
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	f7ff fbdc 	bl	8003850 <disk_write>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	e022      	b.n	80040ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	1ad2      	subs	r2, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d217      	bcs.n	80040ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	789b      	ldrb	r3, [r3, #2]
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	e010      	b.n	80040e4 <sync_window+0x78>
					wsect += fs->fsize;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4413      	add	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	7858      	ldrb	r0, [r3, #1]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040d6:	2301      	movs	r3, #1
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	f7ff fbb9 	bl	8003850 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d8eb      	bhi.n	80040c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d01b      	beq.n	8004144 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ffad 	bl	800406c <sync_window>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d113      	bne.n	8004144 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7858      	ldrb	r0, [r3, #1]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004126:	2301      	movs	r3, #1
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	f7ff fb71 	bl	8003810 <disk_read>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d004      	beq.n	800413e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff87 	bl	800406c <sync_window>
 800415e:	4603      	mov	r3, r0
 8004160:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d158      	bne.n	800421a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d148      	bne.n	8004202 <sync_fs+0xb2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	791b      	ldrb	r3, [r3, #4]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d144      	bne.n	8004202 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3338      	adds	r3, #56	; 0x38
 800417c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fda8 	bl	8003cd8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3338      	adds	r3, #56	; 0x38
 800418c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004190:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fcaf 	bl	8003af8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3338      	adds	r3, #56	; 0x38
 800419e:	4921      	ldr	r1, [pc, #132]	; (8004224 <sync_fs+0xd4>)
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fcc4 	bl	8003b2e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3338      	adds	r3, #56	; 0x38
 80041aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80041ae:	491e      	ldr	r1, [pc, #120]	; (8004228 <sync_fs+0xd8>)
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fcbc 	bl	8003b2e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3338      	adds	r3, #56	; 0x38
 80041ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7ff fcb2 	bl	8003b2e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3338      	adds	r3, #56	; 0x38
 80041ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f7ff fca8 	bl	8003b2e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7858      	ldrb	r0, [r3, #1]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f6:	2301      	movs	r3, #1
 80041f8:	f7ff fb2a 	bl	8003850 <disk_write>
			fs->fsi_flag = 0;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2200      	movs	r2, #0
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fb40 	bl	8003890 <disk_ioctl>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <sync_fs+0xca>
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	41615252 	.word	0x41615252
 8004228:	61417272 	.word	0x61417272

0800422c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	3b02      	subs	r3, #2
 800423a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	3b02      	subs	r3, #2
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d301      	bcc.n	800424c <clust2sect+0x20>
 8004248:	2300      	movs	r3, #0
 800424a:	e008      	b.n	800425e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	895b      	ldrh	r3, [r3, #10]
 8004250:	461a      	mov	r2, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	fb03 f202 	mul.w	r2, r3, r2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	4413      	add	r3, r2
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	6809      	ldr	r1, [r1, #0]
 800427a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800427c:	6839      	ldr	r1, [r7, #0]
 800427e:	2901      	cmp	r1, #1
 8004280:	d904      	bls.n	800428c <get_fat+0x20>
 8004282:	69b9      	ldr	r1, [r7, #24]
 8004284:	69c9      	ldr	r1, [r1, #28]
 8004286:	6838      	ldr	r0, [r7, #0]
 8004288:	4288      	cmp	r0, r1
 800428a:	d302      	bcc.n	8004292 <get_fat+0x26>
		val = 1;	/* Internal error */
 800428c:	2301      	movs	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	e101      	b.n	8004496 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004292:	f04f 31ff 	mov.w	r1, #4294967295
 8004296:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	7809      	ldrb	r1, [r1, #0]
 800429c:	3901      	subs	r1, #1
 800429e:	2903      	cmp	r1, #3
 80042a0:	f200 80ed 	bhi.w	800447e <get_fat+0x212>
 80042a4:	a001      	add	r0, pc, #4	; (adr r0, 80042ac <get_fat+0x40>)
 80042a6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	08004345 	.word	0x08004345
 80042b4:	0800437b 	.word	0x0800437b
 80042b8:	080043b3 	.word	0x080043b3
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	0a5b      	lsrs	r3, r3, #9
 80042d2:	4413      	add	r3, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f7ff ff0c 	bl	80040f4 <move_window>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 80d0 	bne.w	8004484 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	60fa      	str	r2, [r7, #12]
 80042ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4413      	add	r3, r2
 80042f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	0a5b      	lsrs	r3, r3, #9
 8004300:	4413      	add	r3, r2
 8004302:	4619      	mov	r1, r3
 8004304:	69b8      	ldr	r0, [r7, #24]
 8004306:	f7ff fef5 	bl	80040f4 <move_window>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 80bb 	bne.w	8004488 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <get_fat+0xce>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	e002      	b.n	8004340 <get_fat+0xd4>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004340:	61fb      	str	r3, [r7, #28]
			break;
 8004342:	e0a8      	b.n	8004496 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	4413      	add	r3, r2
 800434e:	4619      	mov	r1, r3
 8004350:	69b8      	ldr	r0, [r7, #24]
 8004352:	f7ff fecf 	bl	80040f4 <move_window>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	f040 8097 	bne.w	800448c <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800436c:	4413      	add	r3, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff faac 	bl	80038cc <ld_word>
 8004374:	4603      	mov	r3, r0
 8004376:	61fb      	str	r3, [r7, #28]
			break;
 8004378:	e08d      	b.n	8004496 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	09db      	lsrs	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	4619      	mov	r1, r3
 8004386:	69b8      	ldr	r0, [r7, #24]
 8004388:	f7ff feb4 	bl	80040f4 <move_window>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d17e      	bne.n	8004490 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80043a0:	4413      	add	r3, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff faaa 	bl	80038fc <ld_dword>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043ae:	61fb      	str	r3, [r7, #28]
			break;
 80043b0:	e071      	b.n	8004496 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80043b8:	4301      	orrs	r1, r0
 80043ba:	d060      	beq.n	800447e <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	6889      	ldr	r1, [r1, #8]
 80043c0:	6838      	ldr	r0, [r7, #0]
 80043c2:	1a41      	subs	r1, r0, r1
 80043c4:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80043cc:	1e42      	subs	r2, r0, #1
 80043ce:	f141 33ff 	adc.w	r3, r1, #4294967295
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	0a50      	lsrs	r0, r2, #9
 80043dc:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80043e0:	0a59      	lsrs	r1, r3, #9
 80043e2:	4602      	mov	r2, r0
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	895b      	ldrh	r3, [r3, #10]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	79db      	ldrb	r3, [r3, #7]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d10e      	bne.n	8004414 <get_fat+0x1a8>
					if (cofs <= clen) {
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d80a      	bhi.n	8004414 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	429a      	cmp	r2, r3
 8004404:	d002      	beq.n	800440c <get_fat+0x1a0>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	e001      	b.n	8004410 <get_fat+0x1a4>
 800440c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004410:	61fb      	str	r3, [r7, #28]
						break;
 8004412:	e040      	b.n	8004496 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	79db      	ldrb	r3, [r3, #7]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d108      	bne.n	800442e <get_fat+0x1c2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	429a      	cmp	r2, r3
 8004424:	d203      	bcs.n	800442e <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
					break;
 800442c:	e033      	b.n	8004496 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	79db      	ldrb	r3, [r3, #7]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d023      	beq.n	800447e <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800443e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004442:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8004444:	e027      	b.n	8004496 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	09db      	lsrs	r3, r3, #7
 800444e:	4413      	add	r3, r2
 8004450:	4619      	mov	r1, r3
 8004452:	69b8      	ldr	r0, [r7, #24]
 8004454:	f7ff fe4e 	bl	80040f4 <move_window>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11a      	bne.n	8004494 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800446c:	4413      	add	r3, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fa44 	bl	80038fc <ld_dword>
 8004474:	4603      	mov	r3, r0
 8004476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800447a:	61fb      	str	r3, [r7, #28]
					break;
 800447c:	e00b      	b.n	8004496 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800447e:	2301      	movs	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e008      	b.n	8004496 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004484:	bf00      	nop
 8004486:	e006      	b.n	8004496 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004488:	bf00      	nop
 800448a:	e004      	b.n	8004496 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800448c:	bf00      	nop
 800448e:	e002      	b.n	8004496 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004490:	bf00      	nop
 8004492:	e000      	b.n	8004496 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004494:	bf00      	nop
		}
	}

	return val;
 8004496:	69fb      	ldr	r3, [r7, #28]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80044ac:	2302      	movs	r3, #2
 80044ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	f240 80d6 	bls.w	8004664 <put_fat+0x1c4>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	f080 80d0 	bcs.w	8004664 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	f300 80d4 	bgt.w	8004676 <put_fat+0x1d6>
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	f280 8093 	bge.w	80045fa <put_fat+0x15a>
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d002      	beq.n	80044de <put_fat+0x3e>
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d06e      	beq.n	80045ba <put_fat+0x11a>
 80044dc:	e0cb      	b.n	8004676 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4413      	add	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	0a5b      	lsrs	r3, r3, #9
 80044f4:	4413      	add	r3, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fdfb 	bl	80040f4 <move_window>
 80044fe:	4603      	mov	r3, r0
 8004500:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004502:	7ffb      	ldrb	r3, [r7, #31]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 80af 	bne.w	8004668 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1c59      	adds	r1, r3, #1
 8004514:	61b9      	str	r1, [r7, #24]
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	4413      	add	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <put_fat+0xa4>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b25b      	sxtb	r3, r3
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	b25a      	sxtb	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	b25b      	sxtb	r3, r3
 800453c:	4313      	orrs	r3, r2
 800453e:	b25b      	sxtb	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e001      	b.n	8004548 <put_fat+0xa8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	0a5b      	lsrs	r3, r3, #9
 800455a:	4413      	add	r3, r2
 800455c:	4619      	mov	r1, r3
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff fdc8 	bl	80040f4 <move_window>
 8004564:	4603      	mov	r3, r0
 8004566:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004568:	7ffb      	ldrb	r3, [r7, #31]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d17e      	bne.n	800466c <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	4413      	add	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <put_fat+0xf0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e00e      	b.n	80045ae <put_fat+0x10e>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b25b      	sxtb	r3, r3
 8004596:	f023 030f 	bic.w	r3, r3, #15
 800459a:	b25a      	sxtb	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	4313      	orrs	r3, r2
 80045aa:	b25b      	sxtb	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	70da      	strb	r2, [r3, #3]
			break;
 80045b8:	e05d      	b.n	8004676 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	4413      	add	r3, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff fd94 	bl	80040f4 <move_window>
 80045cc:	4603      	mov	r3, r0
 80045ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d14c      	bne.n	8004670 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80045e4:	4413      	add	r3, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	b292      	uxth	r2, r2
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fa83 	bl	8003af8 <st_word>
			fs->wflag = 1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	70da      	strb	r2, [r3, #3]
			break;
 80045f8:	e03d      	b.n	8004676 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	09db      	lsrs	r3, r3, #7
 8004602:	4413      	add	r3, r2
 8004604:	4619      	mov	r1, r3
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff fd74 	bl	80040f4 <move_window>
 800460c:	4603      	mov	r3, r0
 800460e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004610:	7ffb      	ldrb	r3, [r7, #31]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d12e      	bne.n	8004674 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b04      	cmp	r3, #4
 800461c:	d012      	beq.n	8004644 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004632:	4413      	add	r3, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff f961 	bl	80038fc <ld_dword>
 800463a:	4603      	mov	r3, r0
 800463c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004640:	4323      	orrs	r3, r4
 8004642:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004652:	4413      	add	r3, r2
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fa69 	bl	8003b2e <st_dword>
			fs->wflag = 1;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	70da      	strb	r2, [r3, #3]
			break;
 8004662:	e008      	b.n	8004676 <put_fat+0x1d6>
		}
	}
 8004664:	bf00      	nop
 8004666:	e006      	b.n	8004676 <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004668:	bf00      	nop
 800466a:	e004      	b.n	8004676 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800466c:	bf00      	nop
 800466e:	e002      	b.n	8004676 <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004670:	bf00      	nop
 8004672:	e000      	b.n	8004676 <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004674:	bf00      	nop
	return res;
 8004676:	7ffb      	ldrb	r3, [r7, #31]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3724      	adds	r7, #36	; 0x24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd90      	pop	{r4, r7, pc}

08004680 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	; 0x28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	3b02      	subs	r3, #2
 8004690:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	3b02      	subs	r3, #2
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	d301      	bcc.n	80046a2 <find_bitmap+0x22>
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	0b1b      	lsrs	r3, r3, #12
 80046b6:	4413      	add	r3, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff fd1a 	bl	80040f4 <move_window>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <find_bitmap+0x4c>
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	e051      	b.n	8004770 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	08db      	lsrs	r3, r3, #3
 80046d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	2201      	movs	r2, #1
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	4413      	add	r3, r2
 80046ec:	3338      	adds	r3, #56	; 0x38
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f4:	4013      	ands	r3, r2
 80046f6:	74fb      	strb	r3, [r7, #19]
 80046f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3301      	adds	r3, #1
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	3b02      	subs	r3, #2
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	429a      	cmp	r2, r3
 8004712:	d307      	bcc.n	8004724 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800471e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004722:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	3301      	adds	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	429a      	cmp	r2, r3
 8004736:	d106      	bne.n	8004746 <find_bitmap+0xc6>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	3302      	adds	r3, #2
 800473c:	e018      	b.n	8004770 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	429a      	cmp	r2, r3
 800474c:	d101      	bne.n	8004752 <find_bitmap+0xd2>
 800474e:	2300      	movs	r3, #0
 8004750:	e00e      	b.n	8004770 <find_bitmap+0xf0>
			} while (bm);
 8004752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1c5      	bne.n	80046e6 <find_bitmap+0x66>
			bm = 1;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	3301      	adds	r3, #1
 8004764:	623b      	str	r3, [r7, #32]
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476c:	d3bb      	bcc.n	80046e6 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800476e:	e79e      	b.n	80046ae <find_bitmap+0x2e>
	}
}
 8004770:	4618      	mov	r0, r3
 8004772:	3728      	adds	r7, #40	; 0x28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3b02      	subs	r3, #2
 800478a:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	0b1b      	lsrs	r3, r3, #12
 8004794:	4413      	add	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	2201      	movs	r2, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	617a      	str	r2, [r7, #20]
 80047b6:	4619      	mov	r1, r3
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff fc9b 	bl	80040f4 <move_window>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <change_bitmap+0x50>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e03d      	b.n	8004844 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4413      	add	r3, r2
 80047ce:	3338      	adds	r3, #56	; 0x38
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	7ffb      	ldrb	r3, [r7, #31]
 80047d4:	4013      	ands	r3, r2
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <change_bitmap+0x76>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e02a      	b.n	8004844 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	4413      	add	r3, r2
 80047f4:	3338      	adds	r3, #56	; 0x38
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	7ffb      	ldrb	r3, [r7, #31]
 80047fa:	4053      	eors	r3, r2
 80047fc:	b2d9      	uxtb	r1, r3
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	4413      	add	r3, r2
 8004804:	3338      	adds	r3, #56	; 0x38
 8004806:	460a      	mov	r2, r1
 8004808:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <change_bitmap+0xa8>
 800481c:	2300      	movs	r3, #0
 800481e:	e011      	b.n	8004844 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8004820:	7ffb      	ldrb	r3, [r7, #31]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	77fb      	strb	r3, [r7, #31]
 8004826:	7ffb      	ldrb	r3, [r7, #31]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1cd      	bne.n	80047c8 <change_bitmap+0x50>
			bm = 1;
 800482c:	2301      	movs	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	3301      	adds	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d3c4      	bcc.n	80047c8 <change_bitmap+0x50>
		i = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8004842:	e7b5      	b.n	80047b0 <change_bitmap+0x38>
	}
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	79db      	ldrb	r3, [r3, #7]
 8004858:	2b03      	cmp	r3, #3
 800485a:	d121      	bne.n	80048a0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	e014      	b.n	8004894 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	3301      	adds	r3, #1
 8004872:	461a      	mov	r2, r3
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	f7ff fe13 	bl	80044a0 <put_fat>
 800487a:	4603      	mov	r3, r0
 800487c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <fill_first_frag+0x3c>
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	e00c      	b.n	80048a2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	3301      	adds	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3b01      	subs	r3, #1
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e7      	bne.n	800486a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80048b6:	e020      	b.n	80048fa <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d905      	bls.n	80048da <fill_last_frag+0x30>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	3302      	adds	r3, #2
 80048d8:	e000      	b.n	80048dc <fill_last_frag+0x32>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	461a      	mov	r2, r3
 80048de:	f7ff fddf 	bl	80044a0 <put_fat>
 80048e2:	4603      	mov	r3, r0
 80048e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <fill_last_frag+0x46>
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	e009      	b.n	8004904 <fill_last_frag+0x5a>
		obj->n_frag--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	1e5a      	subs	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1da      	bne.n	80048b8 <fill_last_frag+0xe>
	}
	return FR_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d904      	bls.n	800493a <remove_chain+0x2e>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d301      	bcc.n	800493e <remove_chain+0x32>
 800493a:	2302      	movs	r3, #2
 800493c:	e096      	b.n	8004a6c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d014      	beq.n	800496e <remove_chain+0x62>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d103      	bne.n	8004954 <remove_chain+0x48>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	79db      	ldrb	r3, [r3, #7]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d00c      	beq.n	800496e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	69b8      	ldr	r0, [r7, #24]
 800495c:	f7ff fda0 	bl	80044a0 <put_fat>
 8004960:	4603      	mov	r3, r0
 8004962:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004964:	7ffb      	ldrb	r3, [r7, #31]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <remove_chain+0x62>
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	e07e      	b.n	8004a6c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff fc7b 	bl	800426c <get_fat>
 8004976:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d055      	beq.n	8004a2a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <remove_chain+0x7c>
 8004984:	2302      	movs	r3, #2
 8004986:	e071      	b.n	8004a6c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d101      	bne.n	8004994 <remove_chain+0x88>
 8004990:	2301      	movs	r3, #1
 8004992:	e06b      	b.n	8004a6c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b04      	cmp	r3, #4
 800499a:	d00b      	beq.n	80049b4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800499c:	2200      	movs	r2, #0
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	69b8      	ldr	r0, [r7, #24]
 80049a2:	f7ff fd7d 	bl	80044a0 <put_fat>
 80049a6:	4603      	mov	r3, r0
 80049a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80049aa:	7ffb      	ldrb	r3, [r7, #31]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <remove_chain+0xa8>
 80049b0:	7ffb      	ldrb	r3, [r7, #31]
 80049b2:	e05b      	b.n	8004a6c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	3b02      	subs	r3, #2
 80049be:	429a      	cmp	r2, r3
 80049c0:	d20b      	bcs.n	80049da <remove_chain+0xce>
			fs->free_clst++;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	791b      	ldrb	r3, [r3, #4]
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	3301      	adds	r3, #1
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d102      	bne.n	80049ea <remove_chain+0xde>
			ecl = nxt;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	e017      	b.n	8004a1a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d10f      	bne.n	8004a12 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80049f2:	6a3a      	ldr	r2, [r7, #32]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	2300      	movs	r3, #0
 80049fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049fe:	69b8      	ldr	r0, [r7, #24]
 8004a00:	f7ff feba 	bl	8004778 <change_bitmap>
 8004a04:	4603      	mov	r3, r0
 8004a06:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <remove_chain+0x106>
 8004a0e:	7ffb      	ldrb	r3, [r7, #31]
 8004a10:	e02c      	b.n	8004a6c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	623b      	str	r3, [r7, #32]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d3a2      	bcc.n	800496e <remove_chain+0x62>
 8004a28:	e000      	b.n	8004a2c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8004a2a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d11a      	bne.n	8004a6a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	71da      	strb	r2, [r3, #7]
 8004a40:	e013      	b.n	8004a6a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	79db      	ldrb	r3, [r3, #7]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d10f      	bne.n	8004a6a <remove_chain+0x15e>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d30a      	bcc.n	8004a6a <remove_chain+0x15e>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d802      	bhi.n	8004a6a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2202      	movs	r2, #2
 8004a68:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3728      	adds	r7, #40	; 0x28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10d      	bne.n	8004aa6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <create_chain+0x2c>
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d31b      	bcc.n	8004ad8 <create_chain+0x64>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e018      	b.n	8004ad8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fbdf 	bl	800426c <get_fat>
 8004aae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d801      	bhi.n	8004aba <create_chain+0x46>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0d9      	b.n	8004c6e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d101      	bne.n	8004ac6 <create_chain+0x52>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	e0d3      	b.n	8004c6e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d201      	bcs.n	8004ad4 <create_chain+0x60>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	e0cc      	b.n	8004c6e <create_chain+0x1fa>
		scl = clst;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d164      	bne.n	8004baa <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	69b9      	ldr	r1, [r7, #24]
 8004ae4:	6938      	ldr	r0, [r7, #16]
 8004ae6:	f7ff fdcb 	bl	8004680 <find_bitmap>
 8004aea:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <create_chain+0x86>
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d101      	bne.n	8004afe <create_chain+0x8a>
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	e0b7      	b.n	8004c6e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8004afe:	2301      	movs	r3, #1
 8004b00:	2201      	movs	r2, #1
 8004b02:	69f9      	ldr	r1, [r7, #28]
 8004b04:	6938      	ldr	r0, [r7, #16]
 8004b06:	f7ff fe37 	bl	8004778 <change_bitmap>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d101      	bne.n	8004b18 <create_chain+0xa4>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0aa      	b.n	8004c6e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d102      	bne.n	8004b24 <create_chain+0xb0>
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b22:	e0a4      	b.n	8004c6e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	71da      	strb	r2, [r3, #7]
 8004b30:	e011      	b.n	8004b56 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	79db      	ldrb	r3, [r3, #7]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d10d      	bne.n	8004b56 <create_chain+0xe2>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d008      	beq.n	8004b56 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	1ad2      	subs	r2, r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2203      	movs	r2, #3
 8004b54:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	79db      	ldrb	r3, [r3, #7]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d064      	beq.n	8004c28 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d10b      	bne.n	8004b80 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <create_chain+0x104>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	e000      	b.n	8004b7a <create_chain+0x106>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	61d3      	str	r3, [r2, #28]
 8004b7e:	e053      	b.n	8004c28 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <create_chain+0x11a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fe89 	bl	80048aa <fill_last_frag>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d142      	bne.n	8004c28 <create_chain+0x1b4>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	61da      	str	r2, [r3, #28]
 8004ba8:	e03e      	b.n	8004c28 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d307      	bcc.n	8004bce <create_chain+0x15a>
				ncl = 2;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d901      	bls.n	8004bce <create_chain+0x15a>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e04f      	b.n	8004c6e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004bce:	69f9      	ldr	r1, [r7, #28]
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fb4b 	bl	800426c <get_fat>
 8004bd6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d003      	beq.n	8004bec <create_chain+0x178>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d101      	bne.n	8004bf0 <create_chain+0x17c>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	e03e      	b.n	8004c6e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d1da      	bne.n	8004bae <create_chain+0x13a>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e038      	b.n	8004c6e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8004bfc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004c02:	69f9      	ldr	r1, [r7, #28]
 8004c04:	6938      	ldr	r0, [r7, #16]
 8004c06:	f7ff fc4b 	bl	80044a0 <put_fat>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <create_chain+0x1b4>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d006      	beq.n	8004c28 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	6938      	ldr	r0, [r7, #16]
 8004c20:	f7ff fc3e 	bl	80044a0 <put_fat>
 8004c24:	4603      	mov	r3, r0
 8004c26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d116      	bne.n	8004c5c <create_chain+0x1e8>
		fs->last_clst = ncl;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	3b02      	subs	r3, #2
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d804      	bhi.n	8004c4c <create_chain+0x1d8>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	1e5a      	subs	r2, r3, #1
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	791b      	ldrb	r3, [r3, #4]
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	711a      	strb	r2, [r3, #4]
 8004c5a:	e007      	b.n	8004c6c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <create_chain+0x1f4>
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	e000      	b.n	8004c6a <create_chain+0x1f6>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c6c:	69fb      	ldr	r3, [r7, #28]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c76:	b5b0      	push	{r4, r5, r7, lr}
 8004c78:	b088      	sub	sp, #32
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c94:	f04f 0000 	mov.w	r0, #0
 8004c98:	f04f 0100 	mov.w	r1, #0
 8004c9c:	0a50      	lsrs	r0, r2, #9
 8004c9e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8004ca2:	0a59      	lsrs	r1, r3, #9
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	895b      	ldrh	r3, [r3, #10]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2200      	movs	r2, #0
 8004cac:	461c      	mov	r4, r3
 8004cae:	4615      	mov	r5, r2
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	f7fb fadc 	bl	8000270 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	1d1a      	adds	r2, r3, #4
 8004cc4:	61ba      	str	r2, [r7, #24]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <clmt_clust+0x5e>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e010      	b.n	8004cf6 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d307      	bcc.n	8004cec <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cea:	e7e9      	b.n	8004cc0 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8004cec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bdb0      	pop	{r4, r5, r7, pc}

08004cfe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d102      	bne.n	8004d1c <dir_sdi+0x1e>
 8004d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1a:	e001      	b.n	8004d20 <dir_sdi+0x22>
 8004d1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d904      	bls.n	8004d30 <dir_sdi+0x32>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <dir_sdi+0x36>
		return FR_INT_ERR;
 8004d30:	2302      	movs	r3, #2
 8004d32:	e066      	b.n	8004e02 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <dir_sdi+0x5c>
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d905      	bls.n	8004d5a <dir_sdi+0x5c>
		clst = fs->dirbase;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10c      	bne.n	8004d7a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	8912      	ldrh	r2, [r2, #8]
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d301      	bcc.n	8004d70 <dir_sdi+0x72>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e048      	b.n	8004e02 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38
 8004d78:	e029      	b.n	8004dce <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	895b      	ldrh	r3, [r3, #10]
 8004d7e:	025b      	lsls	r3, r3, #9
 8004d80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d82:	e019      	b.n	8004db8 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fa6f 	bl	800426c <get_fat>
 8004d8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d101      	bne.n	8004d9c <dir_sdi+0x9e>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e032      	b.n	8004e02 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d904      	bls.n	8004dac <dir_sdi+0xae>
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d301      	bcc.n	8004db0 <dir_sdi+0xb2>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e028      	b.n	8004e02 <dir_sdi+0x104>
			ofs -= csz;
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d2e1      	bcs.n	8004d84 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8004dc0:	6979      	ldr	r1, [r7, #20]
 8004dc2:	6938      	ldr	r0, [r7, #16]
 8004dc4:	f7ff fa32 	bl	800422c <clust2sect>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <dir_sdi+0xe2>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e010      	b.n	8004e02 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	0a5b      	lsrs	r3, r3, #9
 8004de8:	441a      	add	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	441a      	add	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b086      	sub	sp, #24
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	3320      	adds	r3, #32
 8004e20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <dir_next+0x38>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d102      	bne.n	8004e38 <dir_next+0x2e>
 8004e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e36:	e001      	b.n	8004e3c <dir_next+0x32>
 8004e38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d801      	bhi.n	8004e46 <dir_next+0x3c>
 8004e42:	2304      	movs	r3, #4
 8004e44:	e0b2      	b.n	8004fac <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 80a0 	bne.w	8004f92 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	8912      	ldrh	r2, [r2, #8]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f0c0 8090 	bcc.w	8004f92 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
 8004e78:	2304      	movs	r3, #4
 8004e7a:	e097      	b.n	8004fac <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	0a5b      	lsrs	r3, r3, #9
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	8952      	ldrh	r2, [r2, #10]
 8004e84:	3a01      	subs	r2, #1
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 8082 	bne.w	8004f92 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f7ff f9e8 	bl	800426c <get_fat>
 8004e9c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d801      	bhi.n	8004ea8 <dir_next+0x9e>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e081      	b.n	8004fac <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d101      	bne.n	8004eb4 <dir_next+0xaa>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e07b      	b.n	8004fac <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d35f      	bcc.n	8004f7e <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eca:	2304      	movs	r3, #4
 8004ecc:	e06e      	b.n	8004fac <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7ff fdcc 	bl	8004a74 <create_chain>
 8004edc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <dir_next+0xde>
 8004ee4:	2307      	movs	r3, #7
 8004ee6:	e061      	b.n	8004fac <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <dir_next+0xe8>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e05c      	b.n	8004fac <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d101      	bne.n	8004efe <dir_next+0xf4>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e056      	b.n	8004fac <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	79db      	ldrb	r3, [r3, #7]
 8004f02:	f043 0304 	orr.w	r3, r3, #4
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7ff f8ad 	bl	800406c <sync_window>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <dir_next+0x112>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e047      	b.n	8004fac <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3338      	adds	r3, #56	; 0x38
 8004f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fed6 	bl	8003cd8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	6979      	ldr	r1, [r7, #20]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff f97a 	bl	800422c <clust2sect>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f3e:	e012      	b.n	8004f66 <dir_next+0x15c>
						fs->wflag = 1;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff f890 	bl	800406c <sync_window>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <dir_next+0x14c>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e02a      	b.n	8004fac <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	635a      	str	r2, [r3, #52]	; 0x34
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	895b      	ldrh	r3, [r3, #10]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d3e6      	bcc.n	8004f40 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad2      	subs	r2, r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8004f84:	6979      	ldr	r1, [r7, #20]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff f950 	bl	800422c <clust2sect>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fe99 	bl	8004cfe <dir_sdi>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d140      	bne.n	8005058 <dir_alloc+0xa4>
		n = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	4619      	mov	r1, r3
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff f887 	bl	80040f4 <move_window>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d132      	bne.n	8005056 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d108      	bne.n	800500a <dir_alloc+0x56>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	09db      	lsrs	r3, r3, #7
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e00f      	b.n	800502a <dir_alloc+0x76>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2be5      	cmp	r3, #229	; 0xe5
 8005012:	d004      	beq.n	800501e <dir_alloc+0x6a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <dir_alloc+0x6e>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <dir_alloc+0x70>
 8005022:	2300      	movs	r3, #0
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	3301      	adds	r3, #1
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d102      	bne.n	8005042 <dir_alloc+0x8e>
 800503c:	e00c      	b.n	8005058 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005042:	2101      	movs	r1, #1
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff fee0 	bl	8004e0a <dir_next>
 800504a:	4603      	mov	r3, r0
 800504c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0c2      	beq.n	8004fda <dir_alloc+0x26>
 8005054:	e000      	b.n	8005058 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8005056:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b04      	cmp	r3, #4
 800505c:	d101      	bne.n	8005062 <dir_alloc+0xae>
 800505e:	2307      	movs	r3, #7
 8005060:	75fb      	strb	r3, [r7, #23]
	return res;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	331a      	adds	r3, #26
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fc26 	bl	80038cc <ld_word>
 8005080:	4603      	mov	r3, r0
 8005082:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d109      	bne.n	80050a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	3314      	adds	r3, #20
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe fc1b 	bl	80038cc <ld_word>
 8005096:	4603      	mov	r3, r0
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80050a0:	68fb      	ldr	r3, [r7, #12]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	331a      	adds	r3, #26
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	b292      	uxth	r2, r2
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe fd19 	bl	8003af8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d109      	bne.n	80050e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f103 0214 	add.w	r2, r3, #20
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	0c1b      	lsrs	r3, r3, #16
 80050d8:	b29b      	uxth	r3, r3
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f7fe fd0b 	bl	8003af8 <st_word>
	}
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	331a      	adds	r3, #26
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fbe6 	bl	80038cc <ld_word>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <cmp_lfn+0x1e>
 8005106:	2300      	movs	r3, #0
 8005108:	e059      	b.n	80051be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005112:	1e5a      	subs	r2, r3, #1
 8005114:	4613      	mov	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005120:	2301      	movs	r3, #1
 8005122:	81fb      	strh	r3, [r7, #14]
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e033      	b.n	8005192 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800512a:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <cmp_lfn+0xdc>)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4413      	add	r3, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f7fe fbc7 	bl	80038cc <ld_word>
 800513e:	4603      	mov	r3, r0
 8005140:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005142:	89fb      	ldrh	r3, [r7, #14]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01a      	beq.n	800517e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2bfe      	cmp	r3, #254	; 0xfe
 800514c:	d812      	bhi.n	8005174 <cmp_lfn+0x88>
 800514e:	89bb      	ldrh	r3, [r7, #12]
 8005150:	4618      	mov	r0, r3
 8005152:	f003 f863 	bl	800821c <ff_wtoupper>
 8005156:	4603      	mov	r3, r0
 8005158:	461c      	mov	r4, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	617a      	str	r2, [r7, #20]
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f003 f857 	bl	800821c <ff_wtoupper>
 800516e:	4603      	mov	r3, r0
 8005170:	429c      	cmp	r4, r3
 8005172:	d001      	beq.n	8005178 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005174:	2300      	movs	r3, #0
 8005176:	e022      	b.n	80051be <cmp_lfn+0xd2>
			}
			wc = uc;
 8005178:	89bb      	ldrh	r3, [r7, #12]
 800517a:	81fb      	strh	r3, [r7, #14]
 800517c:	e006      	b.n	800518c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800517e:	89bb      	ldrh	r3, [r7, #12]
 8005180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005184:	4293      	cmp	r3, r2
 8005186:	d001      	beq.n	800518c <cmp_lfn+0xa0>
 8005188:	2300      	movs	r3, #0
 800518a:	e018      	b.n	80051be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	3301      	adds	r3, #1
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b0c      	cmp	r3, #12
 8005196:	d9c8      	bls.n	800512a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <cmp_lfn+0xd0>
 80051a4:	89fb      	ldrh	r3, [r7, #14]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <cmp_lfn+0xd0>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <cmp_lfn+0xd0>
 80051b8:	2300      	movs	r3, #0
 80051ba:	e000      	b.n	80051be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80051bc:	2301      	movs	r3, #1
}
 80051be:	4618      	mov	r0, r3
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	0800a1c4 	.word	0x0800a1c4

080051cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	331a      	adds	r3, #26
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fb76 	bl	80038cc <ld_word>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <pick_lfn+0x1e>
 80051e6:	2300      	movs	r3, #0
 80051e8:	e04d      	b.n	8005286 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f2:	1e5a      	subs	r2, r3, #1
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005200:	2301      	movs	r3, #1
 8005202:	81fb      	strh	r3, [r7, #14]
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	e028      	b.n	800525c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <pick_lfn+0xc4>)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4413      	add	r3, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f7fe fb57 	bl	80038cc <ld_word>
 800521e:	4603      	mov	r3, r0
 8005220:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005222:	89fb      	ldrh	r3, [r7, #14]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00f      	beq.n	8005248 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2bfe      	cmp	r3, #254	; 0xfe
 800522c:	d901      	bls.n	8005232 <pick_lfn+0x66>
 800522e:	2300      	movs	r3, #0
 8005230:	e029      	b.n	8005286 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005232:	89bb      	ldrh	r3, [r7, #12]
 8005234:	81fb      	strh	r3, [r7, #14]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	617a      	str	r2, [r7, #20]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	89fa      	ldrh	r2, [r7, #14]
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	e006      	b.n	8005256 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005248:	89bb      	ldrh	r3, [r7, #12]
 800524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524e:	4293      	cmp	r3, r2
 8005250:	d001      	beq.n	8005256 <pick_lfn+0x8a>
 8005252:	2300      	movs	r3, #0
 8005254:	e017      	b.n	8005286 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3301      	adds	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d9d3      	bls.n	800520a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2bfe      	cmp	r3, #254	; 0xfe
 8005272:	d901      	bls.n	8005278 <pick_lfn+0xac>
 8005274:	2300      	movs	r3, #0
 8005276:	e006      	b.n	8005286 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	4413      	add	r3, r2
 8005280:	2200      	movs	r2, #0
 8005282:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005284:	2301      	movs	r3, #1
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	0800a1c4 	.word	0x0800a1c4

08005294 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4611      	mov	r1, r2
 80052a0:	461a      	mov	r2, r3
 80052a2:	460b      	mov	r3, r1
 80052a4:	71fb      	strb	r3, [r7, #7]
 80052a6:	4613      	mov	r3, r2
 80052a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	330d      	adds	r3, #13
 80052ae:	79ba      	ldrb	r2, [r7, #6]
 80052b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	330b      	adds	r3, #11
 80052b6:	220f      	movs	r2, #15
 80052b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	330c      	adds	r3, #12
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	331a      	adds	r3, #26
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe fc15 	bl	8003af8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	1e5a      	subs	r2, r3, #1
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	82fb      	strh	r3, [r7, #22]
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80052e6:	8afb      	ldrh	r3, [r7, #22]
 80052e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <put_lfn+0x6c>
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	61fa      	str	r2, [r7, #28]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005300:	4a17      	ldr	r2, [pc, #92]	; (8005360 <put_lfn+0xcc>)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	4413      	add	r3, r2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	8afa      	ldrh	r2, [r7, #22]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fbf0 	bl	8003af8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <put_lfn+0x90>
 800531e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005322:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	3301      	adds	r3, #1
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b0c      	cmp	r3, #12
 800532e:	d9da      	bls.n	80052e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005330:	8afb      	ldrh	r3, [r7, #22]
 8005332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005336:	4293      	cmp	r3, r2
 8005338:	d006      	beq.n	8005348 <put_lfn+0xb4>
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <put_lfn+0xbc>
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	79fa      	ldrb	r2, [r7, #7]
 8005354:	701a      	strb	r2, [r3, #0]
}
 8005356:	bf00      	nop
 8005358:	3720      	adds	r7, #32
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	0800a1c4 	.word	0x0800a1c4

08005364 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08c      	sub	sp, #48	; 0x30
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005372:	220b      	movs	r2, #11
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7fe fc8d 	bl	8003c96 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b05      	cmp	r3, #5
 8005380:	d92b      	bls.n	80053da <gen_numname+0x76>
		sr = seq;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005386:	e022      	b.n	80053ce <gen_numname+0x6a>
			wc = *lfn++;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005392:	2300      	movs	r3, #0
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
 8005396:	e017      	b.n	80053c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	005a      	lsls	r2, r3, #1
 800539c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80053a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <gen_numname+0x5e>
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80053bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80053c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	3301      	adds	r3, #1
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d9e4      	bls.n	8005398 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1d8      	bne.n	8005388 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80053da:	2307      	movs	r3, #7
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	3330      	adds	r3, #48	; 0x30
 80053ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80053ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053f2:	2b39      	cmp	r3, #57	; 0x39
 80053f4:	d904      	bls.n	8005400 <gen_numname+0x9c>
 80053f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053fa:	3307      	adds	r3, #7
 80053fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	1e5a      	subs	r2, r3, #1
 8005404:	62ba      	str	r2, [r7, #40]	; 0x28
 8005406:	3330      	adds	r3, #48	; 0x30
 8005408:	443b      	add	r3, r7
 800540a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800540e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	091b      	lsrs	r3, r3, #4
 8005416:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1df      	bne.n	80053de <gen_numname+0x7a>
	ns[i] = '~';
 800541e:	f107 0214 	add.w	r2, r7, #20
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	4413      	add	r3, r2
 8005426:	227e      	movs	r2, #126	; 0x7e
 8005428:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	e002      	b.n	8005436 <gen_numname+0xd2>
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	429a      	cmp	r2, r3
 800543c:	d205      	bcs.n	800544a <gen_numname+0xe6>
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	4413      	add	r3, r2
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b20      	cmp	r3, #32
 8005448:	d1f2      	bne.n	8005430 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	2b07      	cmp	r3, #7
 800544e:	d807      	bhi.n	8005460 <gen_numname+0xfc>
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	62ba      	str	r2, [r7, #40]	; 0x28
 8005456:	3330      	adds	r3, #48	; 0x30
 8005458:	443b      	add	r3, r7
 800545a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800545e:	e000      	b.n	8005462 <gen_numname+0xfe>
 8005460:	2120      	movs	r1, #32
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	627a      	str	r2, [r7, #36]	; 0x24
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	460a      	mov	r2, r1
 800546e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	2b07      	cmp	r3, #7
 8005474:	d9e9      	bls.n	800544a <gen_numname+0xe6>
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	3730      	adds	r7, #48	; 0x30
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800548c:	230b      	movs	r3, #11
 800548e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	0852      	lsrs	r2, r2, #1
 8005496:	01db      	lsls	r3, r3, #7
 8005498:	4313      	orrs	r3, r2
 800549a:	b2da      	uxtb	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1c59      	adds	r1, r3, #1
 80054a0:	6079      	str	r1, [r7, #4]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ed      	bne.n	8005490 <sum_sfn+0x10>
	return sum;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b087      	sub	sp, #28
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3301      	adds	r3, #1
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	3301      	adds	r3, #1
 80054d2:	015b      	lsls	r3, r3, #5
 80054d4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80054d6:	2300      	movs	r3, #0
 80054d8:	827b      	strh	r3, [r7, #18]
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e018      	b.n	8005512 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d103      	bne.n	80054ee <xdir_sum+0x2c>
			i++;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	3301      	adds	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e00e      	b.n	800550c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80054ee:	8a7b      	ldrh	r3, [r7, #18]
 80054f0:	03db      	lsls	r3, r3, #15
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	8a7b      	ldrh	r3, [r7, #18]
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	440b      	add	r3, r1
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	4413      	add	r3, r2
 800550a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	3301      	adds	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	429a      	cmp	r2, r3
 8005518:	d3e2      	bcc.n	80054e0 <xdir_sum+0x1e>
		}
	}
	return sum;
 800551a:	8a7b      	ldrh	r3, [r7, #18]
}
 800551c:	4618      	mov	r0, r3
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8005534:	e01f      	b.n	8005576 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8005536:	89bb      	ldrh	r3, [r7, #12]
 8005538:	4618      	mov	r0, r3
 800553a:	f002 fe6f 	bl	800821c <ff_wtoupper>
 800553e:	4603      	mov	r3, r0
 8005540:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	03db      	lsls	r3, r3, #15
 8005546:	b29a      	uxth	r2, r3
 8005548:	89fb      	ldrh	r3, [r7, #14]
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	b29b      	uxth	r3, r3
 800554e:	4413      	add	r3, r2
 8005550:	b29a      	uxth	r2, r3
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	b29b      	uxth	r3, r3
 8005558:	4413      	add	r3, r2
 800555a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800555c:	89fb      	ldrh	r3, [r7, #14]
 800555e:	03db      	lsls	r3, r3, #15
 8005560:	b29a      	uxth	r2, r3
 8005562:	89fb      	ldrh	r3, [r7, #14]
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	b29b      	uxth	r3, r3
 8005568:	4413      	add	r3, r2
 800556a:	b29a      	uxth	r2, r3
 800556c:	89bb      	ldrh	r3, [r7, #12]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	b29b      	uxth	r3, r3
 8005572:	4413      	add	r3, r2
 8005574:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	1c9a      	adds	r2, r3, #2
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	81bb      	strh	r3, [r7, #12]
 8005580:	89bb      	ldrh	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1d7      	bne.n	8005536 <xname_sum+0xe>
	}
	return sum;
 8005586:	89fb      	ldrh	r3, [r7, #14]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	4619      	mov	r1, r3
 80055aa:	4610      	mov	r0, r2
 80055ac:	f7fe fda2 	bl	80040f4 <move_window>
 80055b0:	4603      	mov	r3, r0
 80055b2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <load_xdir+0x2e>
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	e09f      	b.n	80056fe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b85      	cmp	r3, #133	; 0x85
 80055c6:	d001      	beq.n	80055cc <load_xdir+0x3c>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e098      	b.n	80056fe <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	2220      	movs	r2, #32
 80055d2:	4619      	mov	r1, r3
 80055d4:	6938      	ldr	r0, [r7, #16]
 80055d6:	f7fe fb5e 	bl	8003c96 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3301      	adds	r3, #1
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	015b      	lsls	r3, r3, #5
 80055e4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b5f      	cmp	r3, #95	; 0x5f
 80055ea:	d903      	bls.n	80055f4 <load_xdir+0x64>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80055f2:	d901      	bls.n	80055f8 <load_xdir+0x68>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e082      	b.n	80056fe <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80055f8:	2100      	movs	r1, #0
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fc05 	bl	8004e0a <dir_next>
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <load_xdir+0x7e>
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	e077      	b.n	80056fe <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f7fe fd6b 	bl	80040f4 <move_window>
 800561e:	4603      	mov	r3, r0
 8005620:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <load_xdir+0x9c>
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	e068      	b.n	80056fe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2bc0      	cmp	r3, #192	; 0xc0
 8005634:	d001      	beq.n	800563a <load_xdir+0xaa>
 8005636:	2302      	movs	r3, #2
 8005638:	e061      	b.n	80056fe <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f103 0020 	add.w	r0, r3, #32
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	2220      	movs	r2, #32
 8005646:	4619      	mov	r1, r3
 8005648:	f7fe fb25 	bl	8003c96 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	3323      	adds	r3, #35	; 0x23
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	332c      	adds	r3, #44	; 0x2c
 8005654:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <load_xdir+0x178>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	08db      	lsrs	r3, r3, #3
 800565c:	015b      	lsls	r3, r3, #5
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d201      	bcs.n	8005668 <load_xdir+0xd8>
 8005664:	2302      	movs	r3, #2
 8005666:	e04a      	b.n	80056fe <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800566c:	2100      	movs	r1, #0
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fbcb 	bl	8004e0a <dir_next>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <load_xdir+0xf2>
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	e03d      	b.n	80056fe <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f7fe fd31 	bl	80040f4 <move_window>
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <load_xdir+0x110>
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	e02e      	b.n	80056fe <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2bc1      	cmp	r3, #193	; 0xc1
 80056a8:	d001      	beq.n	80056ae <load_xdir+0x11e>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e027      	b.n	80056fe <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80056b4:	d208      	bcs.n	80056c8 <load_xdir+0x138>
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	18d0      	adds	r0, r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	2220      	movs	r2, #32
 80056c2:	4619      	mov	r1, r3
 80056c4:	f7fe fae7 	bl	8003c96 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3320      	adds	r3, #32
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d3ca      	bcc.n	800566c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80056dc:	d80e      	bhi.n	80056fc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f7ff feef 	bl	80054c2 <xdir_sum>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461c      	mov	r4, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3302      	adds	r3, #2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe f8ed 	bl	80038cc <ld_word>
 80056f2:	4603      	mov	r3, r0
 80056f4:	429c      	cmp	r4, r3
 80056f6:	d001      	beq.n	80056fc <load_xdir+0x16c>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e000      	b.n	80056fe <load_xdir+0x16e>
	}
	return FR_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd90      	pop	{r4, r7, pc}
 8005706:	bf00      	nop
 8005708:	88888889 	.word	0x88888889

0800570c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800570c:	b5b0      	push	{r4, r5, r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6808      	ldr	r0, [r1, #0]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	6a08      	ldr	r0, [r1, #32]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800572a:	b2c8      	uxtb	r0, r1
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005734:	2000      	movs	r0, #0
 8005736:	460c      	mov	r4, r1
 8005738:	4605      	mov	r5, r0
 800573a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800573e:	2300      	movs	r3, #0
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff fad2 	bl	8004cfe <dir_sdi>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff ff13 	bl	8005590 <load_xdir>
 800576a:	4603      	mov	r3, r0
 800576c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bdb0      	pop	{r4, r5, r7, pc}

08005778 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1c9c      	adds	r4, r3, #2
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fe98 	bl	80054c2 <xdir_sum>
 8005792:	4603      	mov	r3, r0
 8005794:	4619      	mov	r1, r3
 8005796:	4620      	mov	r0, r4
 8005798:	f7fe f9ae 	bl	8003af8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	3301      	adds	r3, #1
 80057a4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff faa6 	bl	8004cfe <dir_sdi>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80057b6:	e026      	b.n	8005806 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7fe fc96 	bl	80040f4 <move_window>
 80057c8:	4603      	mov	r3, r0
 80057ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11d      	bne.n	800580e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	2220      	movs	r2, #32
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe fa5b 	bl	8003c96 <mem_cpy>
		dp->obj.fs->wflag = 1;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2201      	movs	r2, #1
 80057e6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <store_xdir+0x9a>
		dirb += SZDIRE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3320      	adds	r3, #32
 80057f8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80057fa:	2100      	movs	r1, #0
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fb04 	bl	8004e0a <dir_next>
 8005802:	4603      	mov	r3, r0
 8005804:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8005806:	7dfb      	ldrb	r3, [r7, #23]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0d5      	beq.n	80057b8 <store_xdir+0x40>
 800580c:	e002      	b.n	8005814 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800580e:	bf00      	nop
 8005810:	e000      	b.n	8005814 <store_xdir+0x9c>
		if (--nent == 0) break;
 8005812:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <store_xdir+0xa8>
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <store_xdir+0xac>
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	e000      	b.n	8005826 <store_xdir+0xae>
 8005824:	2302      	movs	r3, #2
}
 8005826:	4618      	mov	r0, r3
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	bd90      	pop	{r4, r7, pc}

0800582e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800582e:	b590      	push	{r4, r7, lr}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8005838:	2240      	movs	r2, #64	; 0x40
 800583a:	2100      	movs	r1, #0
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7fe fa4b 	bl	8003cd8 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2285      	movs	r2, #133	; 0x85
 8005846:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3320      	adds	r3, #32
 800584c:	22c0      	movs	r2, #192	; 0xc0
 800584e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8005850:	2300      	movs	r3, #0
 8005852:	72bb      	strb	r3, [r7, #10]
 8005854:	2301      	movs	r3, #1
 8005856:	72fb      	strb	r3, [r7, #11]
 8005858:	2301      	movs	r3, #1
 800585a:	813b      	strh	r3, [r7, #8]
 800585c:	2340      	movs	r3, #64	; 0x40
 800585e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	60fa      	str	r2, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	22c1      	movs	r2, #193	; 0xc1
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	60fa      	str	r2, [r7, #12]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800587c:	893b      	ldrh	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <create_xdir+0x6c>
 8005882:	7abb      	ldrb	r3, [r7, #10]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	813b      	strh	r3, [r7, #8]
 800588e:	893b      	ldrh	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <create_xdir+0x6c>
 8005894:	7abb      	ldrb	r3, [r7, #10]
 8005896:	3301      	adds	r3, #1
 8005898:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	893a      	ldrh	r2, [r7, #8]
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fe f927 	bl	8003af8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3302      	adds	r3, #2
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e0      	bne.n	800587c <create_xdir+0x4e>
		nb++;
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	3301      	adds	r3, #1
 80058be:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80058c0:	7abb      	ldrb	r3, [r7, #10]
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1c8      	bne.n	8005860 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3323      	adds	r3, #35	; 0x23
 80058d2:	7aba      	ldrb	r2, [r7, #10]
 80058d4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3301      	adds	r3, #1
 80058da:	7afa      	ldrb	r2, [r7, #11]
 80058dc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80058e4:	6838      	ldr	r0, [r7, #0]
 80058e6:	f7ff fe1f 	bl	8005528 <xname_sum>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4619      	mov	r1, r3
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7fe f902 	bl	8003af8 <st_word>
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd90      	pop	{r4, r7, pc}

080058fc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005906:	2304      	movs	r3, #4
 8005908:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8005910:	23ff      	movs	r3, #255	; 0xff
 8005912:	757b      	strb	r3, [r7, #21]
 8005914:	23ff      	movs	r3, #255	; 0xff
 8005916:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005918:	e09f      	b.n	8005a5a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	4619      	mov	r1, r3
 8005920:	6938      	ldr	r0, [r7, #16]
 8005922:	f7fe fbe7 	bl	80040f4 <move_window>
 8005926:	4603      	mov	r3, r0
 8005928:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 809a 	bne.w	8005a66 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800593a:	7dbb      	ldrb	r3, [r7, #22]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d102      	bne.n	8005946 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005940:	2304      	movs	r3, #4
 8005942:	75fb      	strb	r3, [r7, #23]
 8005944:	e096      	b.n	8005a74 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d118      	bne.n	8005980 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800594e:	7dbb      	ldrb	r3, [r7, #22]
 8005950:	2b85      	cmp	r3, #133	; 0x85
 8005952:	d179      	bne.n	8005a48 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fe17 	bl	8005590 <load_xdir>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8005966:	7dfb      	ldrb	r3, [r7, #23]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d17e      	bne.n	8005a6a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	3304      	adds	r3, #4
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005978:	b2da      	uxtb	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800597e:	e074      	b.n	8005a6a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005984:	330b      	adds	r3, #11
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800598c:	73fb      	strb	r3, [r7, #15]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7bfa      	ldrb	r2, [r7, #15]
 8005992:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005994:	7dbb      	ldrb	r3, [r7, #22]
 8005996:	2be5      	cmp	r3, #229	; 0xe5
 8005998:	d00e      	beq.n	80059b8 <dir_read+0xbc>
 800599a:	7dbb      	ldrb	r3, [r7, #22]
 800599c:	2b2e      	cmp	r3, #46	; 0x2e
 800599e:	d00b      	beq.n	80059b8 <dir_read+0xbc>
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	f023 0320 	bic.w	r3, r3, #32
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	bf0c      	ite	eq
 80059aa:	2301      	moveq	r3, #1
 80059ac:	2300      	movne	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d002      	beq.n	80059be <dir_read+0xc2>
				ord = 0xFF;
 80059b8:	23ff      	movs	r3, #255	; 0xff
 80059ba:	757b      	strb	r3, [r7, #21]
 80059bc:	e044      	b.n	8005a48 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b0f      	cmp	r3, #15
 80059c2:	d12f      	bne.n	8005a24 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80059c4:	7dbb      	ldrb	r3, [r7, #22]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	7b5b      	ldrb	r3, [r3, #13]
 80059d4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80059d6:	7dbb      	ldrb	r3, [r7, #22]
 80059d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059dc:	75bb      	strb	r3, [r7, #22]
 80059de:	7dbb      	ldrb	r3, [r7, #22]
 80059e0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80059ea:	7dba      	ldrb	r2, [r7, #22]
 80059ec:	7d7b      	ldrb	r3, [r7, #21]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d115      	bne.n	8005a1e <dir_read+0x122>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	330d      	adds	r3, #13
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	7d3a      	ldrb	r2, [r7, #20]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d10e      	bne.n	8005a1e <dir_read+0x122>
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f7ff fbde 	bl	80051cc <pick_lfn>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <dir_read+0x122>
 8005a16:	7d7b      	ldrb	r3, [r7, #21]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	e000      	b.n	8005a20 <dir_read+0x124>
 8005a1e:	23ff      	movs	r3, #255	; 0xff
 8005a20:	757b      	strb	r3, [r7, #21]
 8005a22:	e011      	b.n	8005a48 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005a24:	7d7b      	ldrb	r3, [r7, #21]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <dir_read+0x142>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff fd26 	bl	8005480 <sum_sfn>
 8005a34:	4603      	mov	r3, r0
 8005a36:	461a      	mov	r2, r3
 8005a38:	7d3b      	ldrb	r3, [r7, #20]
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d017      	beq.n	8005a6e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295
 8005a44:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8005a46:	e012      	b.n	8005a6e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005a48:	2100      	movs	r1, #0
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff f9dd 	bl	8004e0a <dir_next>
 8005a50:	4603      	mov	r3, r0
 8005a52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <dir_read+0x176>
	while (dp->sect) {
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f47f af5b 	bne.w	800591a <dir_read+0x1e>
 8005a64:	e006      	b.n	8005a74 <dir_read+0x178>
		if (res != FR_OK) break;
 8005a66:	bf00      	nop
 8005a68:	e004      	b.n	8005a74 <dir_read+0x178>
					break;
 8005a6a:	bf00      	nop
 8005a6c:	e002      	b.n	8005a74 <dir_read+0x178>
					break;
 8005a6e:	bf00      	nop
 8005a70:	e000      	b.n	8005a74 <dir_read+0x178>
		if (res != FR_OK) break;
 8005a72:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <dir_read+0x184>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005a8a:	b590      	push	{r4, r7, lr}
 8005a8c:	b089      	sub	sp, #36	; 0x24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005a98:	2100      	movs	r1, #0
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff f92f 	bl	8004cfe <dir_sdi>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8005aa4:	7ffb      	ldrb	r3, [r7, #31]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <dir_find+0x24>
 8005aaa:	7ffb      	ldrb	r3, [r7, #31]
 8005aac:	e112      	b.n	8005cd4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d164      	bne.n	8005b80 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff fd34 	bl	8005528 <xname_sum>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8005ac4:	e04f      	b.n	8005b66 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	3324      	adds	r3, #36	; 0x24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fd fefd 	bl	80038cc <ld_word>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	893b      	ldrh	r3, [r7, #8]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d000      	beq.n	8005ade <dir_find+0x54>
 8005adc:	e043      	b.n	8005b66 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005ae6:	76fb      	strb	r3, [r7, #27]
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	e029      	b.n	8005b46 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <dir_find+0x78>
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	3302      	adds	r3, #2
 8005b00:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	4413      	add	r3, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fd fede 	bl	80038cc <ld_word>
 8005b10:	4603      	mov	r3, r0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f002 fb82 	bl	800821c <ff_wtoupper>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461c      	mov	r4, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f002 fb77 	bl	800821c <ff_wtoupper>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d10c      	bne.n	8005b4e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005b34:	7efb      	ldrb	r3, [r7, #27]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	76fb      	strb	r3, [r7, #27]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	3301      	adds	r3, #1
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	7efb      	ldrb	r3, [r7, #27]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1d2      	bne.n	8005af2 <dir_find+0x68>
 8005b4c:	e000      	b.n	8005b50 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005b4e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005b50:	7efb      	ldrb	r3, [r7, #27]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <dir_find+0xdc>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8005b66:	2100      	movs	r1, #0
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff fec7 	bl	80058fc <dir_read>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	7ffb      	ldrb	r3, [r7, #31]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0a6      	beq.n	8005ac6 <dir_find+0x3c>
 8005b78:	e000      	b.n	8005b7c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005b7a:	bf00      	nop
		}
		return res;
 8005b7c:	7ffb      	ldrb	r3, [r7, #31]
 8005b7e:	e0a9      	b.n	8005cd4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005b80:	23ff      	movs	r3, #255	; 0xff
 8005b82:	773b      	strb	r3, [r7, #28]
 8005b84:	7f3b      	ldrb	r3, [r7, #28]
 8005b86:	777b      	strb	r3, [r7, #29]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	4619      	mov	r1, r3
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7fe faac 	bl	80040f4 <move_window>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8005ba0:	7ffb      	ldrb	r3, [r7, #31]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 8090 	bne.w	8005cc8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005bb0:	7fbb      	ldrb	r3, [r7, #30]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <dir_find+0x132>
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e08a      	b.n	8005cd2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	330b      	adds	r3, #11
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc8:	72fb      	strb	r3, [r7, #11]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7afa      	ldrb	r2, [r7, #11]
 8005bce:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005bd0:	7fbb      	ldrb	r3, [r7, #30]
 8005bd2:	2be5      	cmp	r3, #229	; 0xe5
 8005bd4:	d007      	beq.n	8005be6 <dir_find+0x15c>
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <dir_find+0x16a>
 8005be0:	7afb      	ldrb	r3, [r7, #11]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d006      	beq.n	8005bf4 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005be6:	23ff      	movs	r3, #255	; 0xff
 8005be8:	777b      	strb	r3, [r7, #29]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf0:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bf2:	e05e      	b.n	8005cb2 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005bf4:	7afb      	ldrb	r3, [r7, #11]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d136      	bne.n	8005c68 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d154      	bne.n	8005cb2 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005c08:	7fbb      	ldrb	r3, [r7, #30]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	7b5b      	ldrb	r3, [r3, #13]
 8005c18:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005c1a:	7fbb      	ldrb	r3, [r7, #30]
 8005c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c20:	77bb      	strb	r3, [r7, #30]
 8005c22:	7fbb      	ldrb	r3, [r7, #30]
 8005c24:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c2e:	7fba      	ldrb	r2, [r7, #30]
 8005c30:	7f7b      	ldrb	r3, [r7, #29]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d115      	bne.n	8005c62 <dir_find+0x1d8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	330d      	adds	r3, #13
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	7f3a      	ldrb	r2, [r7, #28]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d10e      	bne.n	8005c62 <dir_find+0x1d8>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7ff fa4c 	bl	80050ec <cmp_lfn>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <dir_find+0x1d8>
 8005c5a:	7f7b      	ldrb	r3, [r7, #29]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e000      	b.n	8005c64 <dir_find+0x1da>
 8005c62:	23ff      	movs	r3, #255	; 0xff
 8005c64:	777b      	strb	r3, [r7, #29]
 8005c66:	e024      	b.n	8005cb2 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c68:	7f7b      	ldrb	r3, [r7, #29]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <dir_find+0x1f8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fc04 	bl	8005480 <sum_sfn>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	7f3b      	ldrb	r3, [r7, #28]
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d024      	beq.n	8005ccc <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <dir_find+0x21c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3340      	adds	r3, #64	; 0x40
 8005c98:	220b      	movs	r2, #11
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f7fe f837 	bl	8003d0e <mem_cmp>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d014      	beq.n	8005cd0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005ca6:	23ff      	movs	r3, #255	; 0xff
 8005ca8:	777b      	strb	r3, [r7, #29]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f8a8 	bl	8004e0a <dir_next>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8005cbe:	7ffb      	ldrb	r3, [r7, #31]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f43f af65 	beq.w	8005b90 <dir_find+0x106>
 8005cc6:	e004      	b.n	8005cd2 <dir_find+0x248>
		if (res != FR_OK) break;
 8005cc8:	bf00      	nop
 8005cca:	e002      	b.n	8005cd2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005ccc:	bf00      	nop
 8005cce:	e000      	b.n	8005cd2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005cd0:	bf00      	nop

	return res;
 8005cd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3724      	adds	r7, #36	; 0x24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd90      	pop	{r4, r7, pc}

08005cdc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005cdc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ce0:	b0a0      	sub	sp, #128	; 0x80
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005cf2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <dir_register+0x22>
 8005cfa:	2306      	movs	r3, #6
 8005cfc:	e18e      	b.n	800601c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005cfe:	2300      	movs	r3, #0
 8005d00:	677b      	str	r3, [r7, #116]	; 0x74
 8005d02:	e002      	b.n	8005d0a <dir_register+0x2e>
 8005d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d06:	3301      	adds	r3, #1
 8005d08:	677b      	str	r3, [r7, #116]	; 0x74
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f4      	bne.n	8005d04 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	f040 809f 	bne.w	8005e62 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d26:	330e      	adds	r3, #14
 8005d28:	4aa2      	ldr	r2, [pc, #648]	; (8005fb4 <dir_register+0x2d8>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	08db      	lsrs	r3, r3, #3
 8005d30:	3302      	adds	r3, #2
 8005d32:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8005d34:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff f93c 	bl	8004fb4 <dir_alloc>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8005d42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <dir_register+0x74>
 8005d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d4e:	e165      	b.n	800601c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d56:	3b01      	subs	r3, #1
 8005d58:	015b      	lsls	r3, r3, #5
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d072      	beq.n	8005e4e <dir_register+0x172>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	79db      	ldrb	r3, [r3, #7]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d06c      	beq.n	8005e4e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005d7a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005d7c:	8949      	ldrh	r1, [r1, #10]
 8005d7e:	0249      	lsls	r1, r1, #9
 8005d80:	2000      	movs	r0, #0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4605      	mov	r5, r0
 8005d86:	eb12 0804 	adds.w	r8, r2, r4
 8005d8a:	eb43 0905 	adc.w	r9, r3, r5
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fd58 	bl	800484c <fill_first_frag>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005da2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <dir_register+0xd4>
 8005daa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005dae:	e135      	b.n	800601c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dba:	4619      	mov	r1, r3
 8005dbc:	f7fe fd75 	bl	80048aa <fill_last_frag>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005dc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <dir_register+0xf8>
 8005dce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005dd2:	e123      	b.n	800601c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	f107 0308 	add.w	r3, r7, #8
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fc95 	bl	800570c <load_obj_dir>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005de8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <dir_register+0x11a>
 8005df0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005df4:	e112      	b.n	800601c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e04:	4608      	mov	r0, r1
 8005e06:	f7fd febe 	bl	8003b86 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8005e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e18:	4608      	mov	r0, r1
 8005e1a:	f7fd feb4 	bl	8003b86 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	79da      	ldrb	r2, [r3, #7]
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	3321      	adds	r3, #33	; 0x21
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8005e30:	f107 0308 	add.w	r3, r7, #8
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fc9f 	bl	8005778 <store_xdir>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005e40:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <dir_register+0x172>
 8005e48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e4c:	e0e6      	b.n	800601c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8005e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f7ff fce8 	bl	800582e <create_xdir>
		return FR_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e0dc      	b.n	800601c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8005e68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e6c:	220c      	movs	r2, #12
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fd ff11 	bl	8003c96 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d033      	beq.n	8005ee8 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2240      	movs	r2, #64	; 0x40
 8005e84:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8005e88:	2301      	movs	r3, #1
 8005e8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e8c:	e016      	b.n	8005ebc <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9e:	f7ff fa61 	bl	8005364 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fdf1 	bl	8005a8a <dir_find>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8005eae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8005eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb8:	3301      	adds	r3, #1
 8005eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ebe:	2b63      	cmp	r3, #99	; 0x63
 8005ec0:	d9e5      	bls.n	8005e8e <dir_register+0x1b2>
 8005ec2:	e000      	b.n	8005ec6 <dir_register+0x1ea>
			if (res != FR_OK) break;
 8005ec4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec8:	2b64      	cmp	r3, #100	; 0x64
 8005eca:	d101      	bne.n	8005ed0 <dir_register+0x1f4>
 8005ecc:	2307      	movs	r3, #7
 8005ece:	e0a5      	b.n	800601c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005ed0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d002      	beq.n	8005ede <dir_register+0x202>
 8005ed8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005edc:	e09e      	b.n	800601c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005ede:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ee8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <dir_register+0x228>
 8005ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <dir_register+0x2dc>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	089b      	lsrs	r3, r3, #2
 8005f00:	3301      	adds	r3, #1
 8005f02:	e000      	b.n	8005f06 <dir_register+0x22a>
 8005f04:	2301      	movs	r3, #1
 8005f06:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005f08:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff f852 	bl	8004fb4 <dir_alloc>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005f16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d14f      	bne.n	8005fbe <dir_register+0x2e2>
 8005f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f20:	3b01      	subs	r3, #1
 8005f22:	673b      	str	r3, [r7, #112]	; 0x70
 8005f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d049      	beq.n	8005fbe <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f30:	015b      	lsls	r3, r3, #5
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fe fee1 	bl	8004cfe <dir_sdi>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005f42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d139      	bne.n	8005fbe <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3340      	adds	r3, #64	; 0x40
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fa96 	bl	8005480 <sum_sfn>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f62:	f7fe f8c7 	bl	80040f4 <move_window>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8005f6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d123      	bne.n	8005fbc <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f76:	68d8      	ldr	r0, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005f84:	f7ff f986 	bl	8005294 <put_lfn>
				fs->wflag = 1;
 8005f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005f8e:	2100      	movs	r1, #0
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fe ff3a 	bl	8004e0a <dir_next>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8005f9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10c      	bne.n	8005fbe <dir_register+0x2e2>
 8005fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	673b      	str	r3, [r7, #112]	; 0x70
 8005faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1d4      	bne.n	8005f5a <dir_register+0x27e>
 8005fb0:	e005      	b.n	8005fbe <dir_register+0x2e2>
 8005fb2:	bf00      	nop
 8005fb4:	88888889 	.word	0x88888889
 8005fb8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8005fbc:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005fbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d128      	bne.n	8006018 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fce:	f7fe f891 	bl	80040f4 <move_window>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005fd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d11b      	bne.n	8006018 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fd fe75 	bl	8003cd8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3340      	adds	r3, #64	; 0x40
 8005ff6:	220b      	movs	r2, #11
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f7fd fe4c 	bl	8003c96 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006008:	330c      	adds	r3, #12
 800600a:	f002 0218 	and.w	r2, r2, #24
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	2201      	movs	r2, #1
 8006016:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006018:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800601c:	4618      	mov	r0, r3
 800601e:	3780      	adds	r7, #128	; 0x80
 8006020:	46bd      	mov	sp, r7
 8006022:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006026:	bf00      	nop

08006028 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	; 0x28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	61ba      	str	r2, [r7, #24]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4413      	add	r3, r2
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006058:	2b1f      	cmp	r3, #31
 800605a:	d940      	bls.n	80060de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800605c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800605e:	2b2f      	cmp	r3, #47	; 0x2f
 8006060:	d006      	beq.n	8006070 <create_name+0x48>
 8006062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006064:	2b5c      	cmp	r3, #92	; 0x5c
 8006066:	d110      	bne.n	800608a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006068:	e002      	b.n	8006070 <create_name+0x48>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3301      	adds	r3, #1
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4413      	add	r3, r2
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b2f      	cmp	r3, #47	; 0x2f
 800607a:	d0f6      	beq.n	800606a <create_name+0x42>
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	4413      	add	r3, r2
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b5c      	cmp	r3, #92	; 0x5c
 8006086:	d0f0      	beq.n	800606a <create_name+0x42>
			break;
 8006088:	e02a      	b.n	80060e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2bfe      	cmp	r3, #254	; 0xfe
 800608e:	d901      	bls.n	8006094 <create_name+0x6c>
 8006090:	2306      	movs	r3, #6
 8006092:	e17d      	b.n	8006390 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006096:	b2db      	uxtb	r3, r3
 8006098:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800609a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800609c:	2101      	movs	r1, #1
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 f880 	bl	80081a4 <ff_convert>
 80060a4:	4603      	mov	r3, r0
 80060a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80060a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <create_name+0x8a>
 80060ae:	2306      	movs	r3, #6
 80060b0:	e16e      	b.n	8006390 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80060b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060b4:	2b7f      	cmp	r3, #127	; 0x7f
 80060b6:	d809      	bhi.n	80060cc <create_name+0xa4>
 80060b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ba:	4619      	mov	r1, r3
 80060bc:	488d      	ldr	r0, [pc, #564]	; (80062f4 <create_name+0x2cc>)
 80060be:	f7fd fe4d 	bl	8003d5c <chk_chr>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <create_name+0xa4>
 80060c8:	2306      	movs	r3, #6
 80060ca:	e161      	b.n	8006390 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	617a      	str	r2, [r7, #20]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80060dc:	e7b4      	b.n	8006048 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80060de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	441a      	add	r2, r3
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80060ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ec:	2b1f      	cmp	r3, #31
 80060ee:	d801      	bhi.n	80060f4 <create_name+0xcc>
 80060f0:	2304      	movs	r3, #4
 80060f2:	e000      	b.n	80060f6 <create_name+0xce>
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80060fa:	e011      	b.n	8006120 <create_name+0xf8>
		w = lfn[di - 1];
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006102:	3b01      	subs	r3, #1
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800610e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006110:	2b20      	cmp	r3, #32
 8006112:	d002      	beq.n	800611a <create_name+0xf2>
 8006114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006116:	2b2e      	cmp	r3, #46	; 0x2e
 8006118:	d106      	bne.n	8006128 <create_name+0x100>
		di--;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	3b01      	subs	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1ea      	bne.n	80060fc <create_name+0xd4>
 8006126:	e000      	b.n	800612a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006128:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	2200      	movs	r2, #0
 8006134:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <create_name+0x118>
 800613c:	2306      	movs	r3, #6
 800613e:	e127      	b.n	8006390 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3340      	adds	r3, #64	; 0x40
 8006144:	220b      	movs	r2, #11
 8006146:	2120      	movs	r1, #32
 8006148:	4618      	mov	r0, r3
 800614a:	f7fd fdc5 	bl	8003cd8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e002      	b.n	800615a <create_name+0x132>
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	3301      	adds	r3, #1
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	2b20      	cmp	r3, #32
 8006166:	d0f5      	beq.n	8006154 <create_name+0x12c>
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	2b2e      	cmp	r3, #46	; 0x2e
 8006174:	d0ee      	beq.n	8006154 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d009      	beq.n	8006190 <create_name+0x168>
 800617c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006180:	f043 0303 	orr.w	r3, r3, #3
 8006184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006188:	e002      	b.n	8006190 <create_name+0x168>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	3b01      	subs	r3, #1
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <create_name+0x182>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800619c:	3b01      	subs	r3, #1
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	2b2e      	cmp	r3, #46	; 0x2e
 80061a8:	d1ef      	bne.n	800618a <create_name+0x162>

	i = b = 0; ni = 8;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061b0:	2300      	movs	r3, #0
 80061b2:	623b      	str	r3, [r7, #32]
 80061b4:	2308      	movs	r3, #8
 80061b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	61ba      	str	r2, [r7, #24]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80061c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 8090 	beq.w	80062f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d006      	beq.n	80061e4 <create_name+0x1bc>
 80061d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061d8:	2b2e      	cmp	r3, #46	; 0x2e
 80061da:	d10a      	bne.n	80061f2 <create_name+0x1ca>
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d006      	beq.n	80061f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80061e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e8:	f043 0303 	orr.w	r3, r3, #3
 80061ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061f0:	e07d      	b.n	80062ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80061f2:	6a3a      	ldr	r2, [r7, #32]
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d203      	bcs.n	8006202 <create_name+0x1da>
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d123      	bne.n	800624a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b0b      	cmp	r3, #11
 8006206:	d106      	bne.n	8006216 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800620c:	f043 0303 	orr.w	r3, r3, #3
 8006210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006214:	e075      	b.n	8006302 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	429a      	cmp	r2, r3
 800621c:	d005      	beq.n	800622a <create_name+0x202>
 800621e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006222:	f043 0303 	orr.w	r3, r3, #3
 8006226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	429a      	cmp	r2, r3
 8006230:	d866      	bhi.n	8006300 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	2308      	movs	r3, #8
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	230b      	movs	r3, #11
 800623c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800623e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006248:	e051      	b.n	80062ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800624a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800624c:	2b7f      	cmp	r3, #127	; 0x7f
 800624e:	d914      	bls.n	800627a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f001 ffa5 	bl	80081a4 <ff_convert>
 800625a:	4603      	mov	r3, r0
 800625c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800625e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <create_name+0x246>
 8006264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006266:	3b80      	subs	r3, #128	; 0x80
 8006268:	4a23      	ldr	r2, [pc, #140]	; (80062f8 <create_name+0x2d0>)
 800626a:	5cd3      	ldrb	r3, [r2, r3]
 800626c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800626e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006272:	f043 0302 	orr.w	r3, r3, #2
 8006276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800627a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <create_name+0x268>
 8006280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006282:	4619      	mov	r1, r3
 8006284:	481d      	ldr	r0, [pc, #116]	; (80062fc <create_name+0x2d4>)
 8006286:	f7fd fd69 	bl	8003d5c <chk_chr>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006290:	235f      	movs	r3, #95	; 0x5f
 8006292:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006298:	f043 0303 	orr.w	r3, r3, #3
 800629c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062a0:	e01b      	b.n	80062da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80062a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d909      	bls.n	80062bc <create_name+0x294>
 80062a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062aa:	2b5a      	cmp	r3, #90	; 0x5a
 80062ac:	d806      	bhi.n	80062bc <create_name+0x294>
					b |= 2;
 80062ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062b2:	f043 0302 	orr.w	r3, r3, #2
 80062b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062ba:	e00e      	b.n	80062da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80062bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062be:	2b60      	cmp	r3, #96	; 0x60
 80062c0:	d90b      	bls.n	80062da <create_name+0x2b2>
 80062c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062c4:	2b7a      	cmp	r3, #122	; 0x7a
 80062c6:	d808      	bhi.n	80062da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80062c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062d6:	3b20      	subs	r3, #32
 80062d8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	623a      	str	r2, [r7, #32]
 80062e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062e2:	b2d1      	uxtb	r1, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4413      	add	r3, r2
 80062e8:	460a      	mov	r2, r1
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 80062ee:	e763      	b.n	80061b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80062f0:	bf00      	nop
 80062f2:	e006      	b.n	8006302 <create_name+0x2da>
 80062f4:	0800a0b0 	.word	0x0800a0b0
 80062f8:	0800a144 	.word	0x0800a144
 80062fc:	0800a0bc 	.word	0x0800a0bc
			if (si > di) break;			/* No extension */
 8006300:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006308:	2be5      	cmp	r3, #229	; 0xe5
 800630a:	d103      	bne.n	8006314 <create_name+0x2ec>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2205      	movs	r2, #5
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b08      	cmp	r3, #8
 8006318:	d104      	bne.n	8006324 <create_name+0x2fc>
 800631a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006324:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006328:	f003 030c 	and.w	r3, r3, #12
 800632c:	2b0c      	cmp	r3, #12
 800632e:	d005      	beq.n	800633c <create_name+0x314>
 8006330:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b03      	cmp	r3, #3
 800633a:	d105      	bne.n	8006348 <create_name+0x320>
 800633c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006340:	f043 0302 	orr.w	r3, r3, #2
 8006344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d117      	bne.n	8006384 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d105      	bne.n	800636c <create_name+0x344>
 8006360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006364:	f043 0310 	orr.w	r3, r3, #16
 8006368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800636c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006370:	f003 030c 	and.w	r3, r3, #12
 8006374:	2b04      	cmp	r3, #4
 8006376:	d105      	bne.n	8006384 <create_name+0x35c>
 8006378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800637c:	f043 0308 	orr.w	r3, r3, #8
 8006380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800638a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800638e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006390:	4618      	mov	r0, r3
 8006392:	3728      	adds	r7, #40	; 0x28
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80063ac:	e002      	b.n	80063b4 <follow_path+0x1c>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b2f      	cmp	r3, #47	; 0x2f
 80063ba:	d0f8      	beq.n	80063ae <follow_path+0x16>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b5c      	cmp	r3, #92	; 0x5c
 80063c2:	d0f4      	beq.n	80063ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2200      	movs	r2, #0
 80063ce:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b1f      	cmp	r3, #31
 80063d6:	d80a      	bhi.n	80063ee <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2280      	movs	r2, #128	; 0x80
 80063dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80063e0:	2100      	movs	r1, #0
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fe fc8b 	bl	8004cfe <dir_sdi>
 80063e8:	4603      	mov	r3, r0
 80063ea:	75fb      	strb	r3, [r7, #23]
 80063ec:	e078      	b.n	80064e0 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80063ee:	463b      	mov	r3, r7
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fe18 	bl	8006028 <create_name>
 80063f8:	4603      	mov	r3, r0
 80063fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d169      	bne.n	80064d6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fb41 	bl	8005a8a <dir_find>
 8006408:	4603      	mov	r3, r0
 800640a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006412:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d15c      	bne.n	80064da <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d157      	bne.n	80064da <follow_path+0x142>
 800642a:	2305      	movs	r3, #5
 800642c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800642e:	e054      	b.n	80064da <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006430:	7afb      	ldrb	r3, [r7, #11]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d151      	bne.n	80064de <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	799b      	ldrb	r3, [r3, #6]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8006446:	2305      	movs	r3, #5
 8006448:	75fb      	strb	r3, [r7, #23]
 800644a:	e049      	b.n	80064e0 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d130      	bne.n	80064b6 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006462:	4613      	mov	r3, r2
 8006464:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	79d2      	ldrb	r2, [r2, #7]
 800646c:	431a      	orrs	r2, r3
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	3334      	adds	r3, #52	; 0x34
 8006480:	4618      	mov	r0, r3
 8006482:	f7fd fa3b 	bl	80038fc <ld_dword>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	3321      	adds	r3, #33	; 0x21
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	b2da      	uxtb	r2, r3
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	3338      	adds	r3, #56	; 0x38
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fd fa4c 	bl	8003942 <ld_qword>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	6939      	ldr	r1, [r7, #16]
 80064b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80064b4:	e79b      	b.n	80063ee <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c4:	4413      	add	r3, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7fe fdcf 	bl	800506c <ld_clust>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064d4:	e78b      	b.n	80063ee <follow_path+0x56>
			if (res != FR_OK) break;
 80064d6:	bf00      	nop
 80064d8:	e002      	b.n	80064e0 <follow_path+0x148>
				break;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064de:	bf00      	nop
			}
		}
	}

	return res;
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b087      	sub	sp, #28
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064f2:	f04f 33ff 	mov.w	r3, #4294967295
 80064f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d031      	beq.n	8006564 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	e002      	b.n	800650e <get_ldnumber+0x24>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	3301      	adds	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b1f      	cmp	r3, #31
 8006514:	d903      	bls.n	800651e <get_ldnumber+0x34>
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b3a      	cmp	r3, #58	; 0x3a
 800651c:	d1f4      	bne.n	8006508 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b3a      	cmp	r3, #58	; 0x3a
 8006524:	d11c      	bne.n	8006560 <get_ldnumber+0x76>
			tp = *path;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	60fa      	str	r2, [r7, #12]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	3b30      	subs	r3, #48	; 0x30
 8006536:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b09      	cmp	r3, #9
 800653c:	d80e      	bhi.n	800655c <get_ldnumber+0x72>
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	429a      	cmp	r2, r3
 8006544:	d10a      	bne.n	800655c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d107      	bne.n	800655c <get_ldnumber+0x72>
					vol = (int)i;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	3301      	adds	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	e002      	b.n	8006566 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006564:	693b      	ldr	r3, [r7, #16]
}
 8006566:	4618      	mov	r0, r3
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	70da      	strb	r2, [r3, #3]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f04f 32ff 	mov.w	r2, #4294967295
 800658a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fd fdb0 	bl	80040f4 <move_window>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <check_fs+0x2a>
 800659a:	2304      	movs	r3, #4
 800659c:	e044      	b.n	8006628 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3338      	adds	r3, #56	; 0x38
 80065a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fd f990 	bl	80038cc <ld_word>
 80065ac:	4603      	mov	r3, r0
 80065ae:	461a      	mov	r2, r3
 80065b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <check_fs+0x48>
 80065b8:	2303      	movs	r3, #3
 80065ba:	e035      	b.n	8006628 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065c2:	2be9      	cmp	r3, #233	; 0xe9
 80065c4:	d009      	beq.n	80065da <check_fs+0x66>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065cc:	2beb      	cmp	r3, #235	; 0xeb
 80065ce:	d11e      	bne.n	800660e <check_fs+0x9a>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065d6:	2b90      	cmp	r3, #144	; 0x90
 80065d8:	d119      	bne.n	800660e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3338      	adds	r3, #56	; 0x38
 80065de:	3336      	adds	r3, #54	; 0x36
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fd f98b 	bl	80038fc <ld_dword>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065ec:	4a10      	ldr	r2, [pc, #64]	; (8006630 <check_fs+0xbc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d101      	bne.n	80065f6 <check_fs+0x82>
 80065f2:	2300      	movs	r3, #0
 80065f4:	e018      	b.n	8006628 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3338      	adds	r3, #56	; 0x38
 80065fa:	3352      	adds	r3, #82	; 0x52
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fd f97d 	bl	80038fc <ld_dword>
 8006602:	4603      	mov	r3, r0
 8006604:	4a0b      	ldr	r2, [pc, #44]	; (8006634 <check_fs+0xc0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d101      	bne.n	800660e <check_fs+0x9a>
 800660a:	2300      	movs	r3, #0
 800660c:	e00c      	b.n	8006628 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3338      	adds	r3, #56	; 0x38
 8006612:	220b      	movs	r2, #11
 8006614:	4908      	ldr	r1, [pc, #32]	; (8006638 <check_fs+0xc4>)
 8006616:	4618      	mov	r0, r3
 8006618:	f7fd fb79 	bl	8003d0e <mem_cmp>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <check_fs+0xb2>
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <check_fs+0xb4>
#endif
	return 2;
 8006626:	2302      	movs	r3, #2
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	00544146 	.word	0x00544146
 8006634:	33544146 	.word	0x33544146
 8006638:	0800a0c4 	.word	0x0800a0c4

0800663c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800663c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006640:	b09c      	sub	sp, #112	; 0x70
 8006642:	af00      	add	r7, sp, #0
 8006644:	61f8      	str	r0, [r7, #28]
 8006646:	61b9      	str	r1, [r7, #24]
 8006648:	4613      	mov	r3, r2
 800664a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006652:	69f8      	ldr	r0, [r7, #28]
 8006654:	f7ff ff49 	bl	80064ea <get_ldnumber>
 8006658:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800665a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665c:	2b00      	cmp	r3, #0
 800665e:	da01      	bge.n	8006664 <find_volume+0x28>
 8006660:	230b      	movs	r3, #11
 8006662:	e32d      	b.n	8006cc0 <find_volume+0x684>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006664:	4a99      	ldr	r2, [pc, #612]	; (80068cc <find_volume+0x290>)
 8006666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800666c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800666e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <find_volume+0x3c>
 8006674:	230c      	movs	r3, #12
 8006676:	e323      	b.n	8006cc0 <find_volume+0x684>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800667c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01a      	beq.n	80066c4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800668e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fd f87c 	bl	8003790 <disk_status>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800669e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10c      	bne.n	80066c4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <find_volume+0x84>
 80066b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80066bc:	230a      	movs	r3, #10
 80066be:	e2ff      	b.n	8006cc0 <find_volume+0x684>
			}
			return FR_OK;				/* The file system object is valid */
 80066c0:	2300      	movs	r3, #0
 80066c2:	e2fd      	b.n	8006cc0 <find_volume+0x684>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80066c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80066ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80066d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fd f874 	bl	80037c4 <disk_initialize>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80066e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80066ee:	2303      	movs	r3, #3
 80066f0:	e2e6      	b.n	8006cc0 <find_volume+0x684>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <find_volume+0xcc>
 80066f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006704:	230a      	movs	r3, #10
 8006706:	e2db      	b.n	8006cc0 <find_volume+0x684>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800670c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800670e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006710:	f7ff ff30 	bl	8006574 <check_fs>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800671a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800671e:	2b02      	cmp	r3, #2
 8006720:	d14d      	bne.n	80067be <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006722:	2300      	movs	r3, #0
 8006724:	65bb      	str	r3, [r7, #88]	; 0x58
 8006726:	e020      	b.n	800676a <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800672e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006736:	4413      	add	r3, r2
 8006738:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800673a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673c:	3304      	adds	r3, #4
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d006      	beq.n	8006752 <find_volume+0x116>
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	3308      	adds	r3, #8
 8006748:	4618      	mov	r0, r3
 800674a:	f7fd f8d7 	bl	80038fc <ld_dword>
 800674e:	4602      	mov	r2, r0
 8006750:	e000      	b.n	8006754 <find_volume+0x118>
 8006752:	2200      	movs	r2, #0
 8006754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	3360      	adds	r3, #96	; 0x60
 800675a:	f107 0110 	add.w	r1, r7, #16
 800675e:	440b      	add	r3, r1
 8006760:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006766:	3301      	adds	r3, #1
 8006768:	65bb      	str	r3, [r7, #88]	; 0x58
 800676a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800676c:	2b03      	cmp	r3, #3
 800676e:	d9db      	bls.n	8006728 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006770:	2300      	movs	r3, #0
 8006772:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 8006774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <find_volume+0x144>
 800677a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800677c:	3b01      	subs	r3, #1
 800677e:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	3360      	adds	r3, #96	; 0x60
 8006786:	f107 0210 	add.w	r2, r7, #16
 800678a:	4413      	add	r3, r2
 800678c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8006790:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <find_volume+0x168>
 8006798:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800679a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800679c:	f7ff feea 	bl	8006574 <check_fs>
 80067a0:	4603      	mov	r3, r0
 80067a2:	e000      	b.n	80067a6 <find_volume+0x16a>
 80067a4:	2303      	movs	r3, #3
 80067a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80067aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d905      	bls.n	80067be <find_volume+0x182>
 80067b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067b4:	3301      	adds	r3, #1
 80067b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d9e0      	bls.n	8006780 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80067be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d101      	bne.n	80067ca <find_volume+0x18e>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e27a      	b.n	8006cc0 <find_volume+0x684>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80067ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d901      	bls.n	80067d6 <find_volume+0x19a>
 80067d2:	230d      	movs	r3, #13
 80067d4:	e274      	b.n	8006cc0 <find_volume+0x684>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80067d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80067da:	2b01      	cmp	r3, #1
 80067dc:	f040 80fa 	bne.w	80069d4 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80067e0:	230b      	movs	r3, #11
 80067e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067e4:	e002      	b.n	80067ec <find_volume+0x1b0>
 80067e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e8:	3301      	adds	r3, #1
 80067ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80067ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ee:	2b3f      	cmp	r3, #63	; 0x3f
 80067f0:	d806      	bhi.n	8006800 <find_volume+0x1c4>
 80067f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067f6:	4413      	add	r3, r2
 80067f8:	3338      	adds	r3, #56	; 0x38
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0f2      	beq.n	80067e6 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8006800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006802:	2b3f      	cmp	r3, #63	; 0x3f
 8006804:	d801      	bhi.n	800680a <find_volume+0x1ce>
 8006806:	230d      	movs	r3, #13
 8006808:	e25a      	b.n	8006cc0 <find_volume+0x684>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800680a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680c:	3338      	adds	r3, #56	; 0x38
 800680e:	3368      	adds	r3, #104	; 0x68
 8006810:	4618      	mov	r0, r3
 8006812:	f7fd f85b 	bl	80038cc <ld_word>
 8006816:	4603      	mov	r3, r0
 8006818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681c:	d001      	beq.n	8006822 <find_volume+0x1e6>
 800681e:	230d      	movs	r3, #13
 8006820:	e24e      	b.n	8006cc0 <find_volume+0x684>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8006822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006824:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006828:	2b09      	cmp	r3, #9
 800682a:	d001      	beq.n	8006830 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800682c:	230d      	movs	r3, #13
 800682e:	e247      	b.n	8006cc0 <find_volume+0x684>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8006830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006832:	3338      	adds	r3, #56	; 0x38
 8006834:	3348      	adds	r3, #72	; 0x48
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd f883 	bl	8003942 <ld_qword>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006842:	2000      	movs	r0, #0
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	1851      	adds	r1, r2, r1
 800684c:	6039      	str	r1, [r7, #0]
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	eb43 0101 	adc.w	r1, r3, r1
 8006854:	6079      	str	r1, [r7, #4]
 8006856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800685e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006862:	2b01      	cmp	r3, #1
 8006864:	d301      	bcc.n	800686a <find_volume+0x22e>
 8006866:	230d      	movs	r3, #13
 8006868:	e22a      	b.n	8006cc0 <find_volume+0x684>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800686a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686c:	3338      	adds	r3, #56	; 0x38
 800686e:	3354      	adds	r3, #84	; 0x54
 8006870:	4618      	mov	r0, r3
 8006872:	f7fd f843 	bl	80038fc <ld_dword>
 8006876:	4602      	mov	r2, r0
 8006878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800687a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800687c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800687e:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8006882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006884:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8006886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006888:	789b      	ldrb	r3, [r3, #2]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d001      	beq.n	8006892 <find_volume+0x256>
 800688e:	230d      	movs	r3, #13
 8006890:	e216      	b.n	8006cc0 <find_volume+0x684>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8006892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006894:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006898:	461a      	mov	r2, r3
 800689a:	2301      	movs	r3, #1
 800689c:	4093      	lsls	r3, r2
 800689e:	b29a      	uxth	r2, r3
 80068a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80068a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a6:	895b      	ldrh	r3, [r3, #10]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <find_volume+0x274>
 80068ac:	230d      	movs	r3, #13
 80068ae:	e207      	b.n	8006cc0 <find_volume+0x684>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80068b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b2:	3338      	adds	r3, #56	; 0x38
 80068b4:	335c      	adds	r3, #92	; 0x5c
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fd f820 	bl	80038fc <ld_dword>
 80068bc:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80068be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c0:	4a03      	ldr	r2, [pc, #12]	; (80068d0 <find_volume+0x294>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d906      	bls.n	80068d4 <find_volume+0x298>
 80068c6:	230d      	movs	r3, #13
 80068c8:	e1fa      	b.n	8006cc0 <find_volume+0x684>
 80068ca:	bf00      	nop
 80068cc:	200025f8 	.word	0x200025f8
 80068d0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80068d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d6:	1c9a      	adds	r2, r3, #2
 80068d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068da:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80068dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068e0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	3338      	adds	r3, #56	; 0x38
 80068e6:	3358      	adds	r3, #88	; 0x58
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fd f807 	bl	80038fc <ld_dword>
 80068ee:	4602      	mov	r2, r0
 80068f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068f2:	441a      	add	r2, r3
 80068f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80068f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fa:	3338      	adds	r3, #56	; 0x38
 80068fc:	3350      	adds	r3, #80	; 0x50
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fc fffc 	bl	80038fc <ld_dword>
 8006904:	4602      	mov	r2, r0
 8006906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006908:	441a      	add	r2, r3
 800690a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800690c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800690e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	2200      	movs	r2, #0
 8006914:	469a      	mov	sl, r3
 8006916:	4693      	mov	fp, r2
 8006918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800691a:	895b      	ldrh	r3, [r3, #10]
 800691c:	461a      	mov	r2, r3
 800691e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006920:	fb02 f303 	mul.w	r3, r2, r3
 8006924:	2200      	movs	r2, #0
 8006926:	4698      	mov	r8, r3
 8006928:	4691      	mov	r9, r2
 800692a:	eb1a 0408 	adds.w	r4, sl, r8
 800692e:	eb4b 0509 	adc.w	r5, fp, r9
 8006932:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006936:	42a2      	cmp	r2, r4
 8006938:	41ab      	sbcs	r3, r5
 800693a:	d201      	bcs.n	8006940 <find_volume+0x304>
 800693c:	230d      	movs	r3, #13
 800693e:	e1bf      	b.n	8006cc0 <find_volume+0x684>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8006940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006942:	3338      	adds	r3, #56	; 0x38
 8006944:	3360      	adds	r3, #96	; 0x60
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc ffd8 	bl	80038fc <ld_dword>
 800694c:	4602      	mov	r2, r0
 800694e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006950:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8006952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	4619      	mov	r1, r3
 8006958:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800695a:	f7fd fc67 	bl	800422c <clust2sect>
 800695e:	4603      	mov	r3, r0
 8006960:	4619      	mov	r1, r3
 8006962:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006964:	f7fd fbc6 	bl	80040f4 <move_window>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <find_volume+0x336>
 800696e:	2301      	movs	r3, #1
 8006970:	e1a6      	b.n	8006cc0 <find_volume+0x684>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8006972:	2300      	movs	r3, #0
 8006974:	65bb      	str	r3, [r7, #88]	; 0x58
 8006976:	e015      	b.n	80069a4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8006978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800697a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800697c:	4413      	add	r3, r2
 800697e:	3338      	adds	r3, #56	; 0x38
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b81      	cmp	r3, #129	; 0x81
 8006984:	d10b      	bne.n	800699e <find_volume+0x362>
 8006986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006988:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800698c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800698e:	3314      	adds	r3, #20
 8006990:	4413      	add	r3, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f7fc ffb2 	bl	80038fc <ld_dword>
 8006998:	4603      	mov	r3, r0
 800699a:	2b02      	cmp	r3, #2
 800699c:	d007      	beq.n	80069ae <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800699e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069a0:	3320      	adds	r3, #32
 80069a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80069a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069aa:	d3e5      	bcc.n	8006978 <find_volume+0x33c>
 80069ac:	e000      	b.n	80069b0 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80069ae:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80069b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069b6:	d101      	bne.n	80069bc <find_volume+0x380>
 80069b8:	230d      	movs	r3, #13
 80069ba:	e181      	b.n	8006cc0 <find_volume+0x684>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80069bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069be:	f04f 32ff 	mov.w	r2, #4294967295
 80069c2:	619a      	str	r2, [r3, #24]
 80069c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c6:	699a      	ldr	r2, [r3, #24]
 80069c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ca:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80069cc:	2304      	movs	r3, #4
 80069ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80069d2:	e15d      	b.n	8006c90 <find_volume+0x654>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80069d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d6:	3338      	adds	r3, #56	; 0x38
 80069d8:	330b      	adds	r3, #11
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fc ff76 	bl	80038cc <ld_word>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e6:	d001      	beq.n	80069ec <find_volume+0x3b0>
 80069e8:	230d      	movs	r3, #13
 80069ea:	e169      	b.n	8006cc0 <find_volume+0x684>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80069ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ee:	3338      	adds	r3, #56	; 0x38
 80069f0:	3316      	adds	r3, #22
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fc ff6a 	bl	80038cc <ld_word>
 80069f8:	4603      	mov	r3, r0
 80069fa:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80069fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <find_volume+0x3d4>
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	3338      	adds	r3, #56	; 0x38
 8006a06:	3324      	adds	r3, #36	; 0x24
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fc ff77 	bl	80038fc <ld_dword>
 8006a0e:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8006a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a14:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a18:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d005      	beq.n	8006a34 <find_volume+0x3f8>
 8006a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2a:	789b      	ldrb	r3, [r3, #2]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d001      	beq.n	8006a34 <find_volume+0x3f8>
 8006a30:	230d      	movs	r3, #13
 8006a32:	e145      	b.n	8006cc0 <find_volume+0x684>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a36:	789b      	ldrb	r3, [r3, #2]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3c:	fb02 f303 	mul.w	r3, r2, r3
 8006a40:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a50:	895b      	ldrh	r3, [r3, #10]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <find_volume+0x42c>
 8006a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a58:	895b      	ldrh	r3, [r3, #10]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5e:	895b      	ldrh	r3, [r3, #10]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <find_volume+0x430>
 8006a68:	230d      	movs	r3, #13
 8006a6a:	e129      	b.n	8006cc0 <find_volume+0x684>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6e:	3338      	adds	r3, #56	; 0x38
 8006a70:	3311      	adds	r3, #17
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fc ff2a 	bl	80038cc <ld_word>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a82:	891b      	ldrh	r3, [r3, #8]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <find_volume+0x456>
 8006a8e:	230d      	movs	r3, #13
 8006a90:	e116      	b.n	8006cc0 <find_volume+0x684>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a94:	3338      	adds	r3, #56	; 0x38
 8006a96:	3313      	adds	r3, #19
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fc ff17 	bl	80038cc <ld_word>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <find_volume+0x47a>
 8006aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aaa:	3338      	adds	r3, #56	; 0x38
 8006aac:	3320      	adds	r3, #32
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fc ff24 	bl	80038fc <ld_dword>
 8006ab4:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab8:	3338      	adds	r3, #56	; 0x38
 8006aba:	330e      	adds	r3, #14
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fc ff05 	bl	80038cc <ld_word>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ac8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <find_volume+0x498>
 8006ad0:	230d      	movs	r3, #13
 8006ad2:	e0f5      	b.n	8006cc0 <find_volume+0x684>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006ad4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ada:	4413      	add	r3, r2
 8006adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ade:	8912      	ldrh	r2, [r2, #8]
 8006ae0:	0912      	lsrs	r2, r2, #4
 8006ae2:	b292      	uxth	r2, r2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d201      	bcs.n	8006af4 <find_volume+0x4b8>
 8006af0:	230d      	movs	r3, #13
 8006af2:	e0e5      	b.n	8006cc0 <find_volume+0x684>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006af4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006afc:	8952      	ldrh	r2, [r2, #10]
 8006afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b02:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <find_volume+0x4d2>
 8006b0a:	230d      	movs	r3, #13
 8006b0c:	e0d8      	b.n	8006cc0 <find_volume+0x684>
		fmt = FS_FAT32;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b16:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d802      	bhi.n	8006b24 <find_volume+0x4e8>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b26:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d802      	bhi.n	8006b34 <find_volume+0x4f8>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	1c9a      	adds	r2, r3, #2
 8006b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b42:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b48:	441a      	add	r2, r3
 8006b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b4c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006b4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b52:	441a      	add	r2, r3
 8006b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006b58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d11e      	bne.n	8006b9e <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b62:	3338      	adds	r3, #56	; 0x38
 8006b64:	332a      	adds	r3, #42	; 0x2a
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fc feb0 	bl	80038cc <ld_word>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <find_volume+0x53a>
 8006b72:	230d      	movs	r3, #13
 8006b74:	e0a4      	b.n	8006cc0 <find_volume+0x684>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b78:	891b      	ldrh	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <find_volume+0x546>
 8006b7e:	230d      	movs	r3, #13
 8006b80:	e09e      	b.n	8006cc0 <find_volume+0x684>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b84:	3338      	adds	r3, #56	; 0x38
 8006b86:	332c      	adds	r3, #44	; 0x2c
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fc feb7 	bl	80038fc <ld_dword>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b9c:	e01f      	b.n	8006bde <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba0:	891b      	ldrh	r3, [r3, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <find_volume+0x56e>
 8006ba6:	230d      	movs	r3, #13
 8006ba8:	e08a      	b.n	8006cc0 <find_volume+0x684>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb0:	441a      	add	r2, r3
 8006bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006bb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d103      	bne.n	8006bc6 <find_volume+0x58a>
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	e00a      	b.n	8006bdc <find_volume+0x5a0>
 8006bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc8:	69da      	ldr	r2, [r3, #28]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4413      	add	r3, r2
 8006bd0:	085a      	lsrs	r2, r3, #1
 8006bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be0:	6a1a      	ldr	r2, [r3, #32]
 8006be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006be4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006be8:	0a5b      	lsrs	r3, r3, #9
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d201      	bcs.n	8006bf2 <find_volume+0x5b6>
 8006bee:	230d      	movs	r3, #13
 8006bf0:	e066      	b.n	8006cc0 <find_volume+0x684>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf8:	619a      	str	r2, [r3, #24]
 8006bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c00:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c04:	2280      	movs	r2, #128	; 0x80
 8006c06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006c08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d13f      	bne.n	8006c90 <find_volume+0x654>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c12:	3338      	adds	r3, #56	; 0x38
 8006c14:	3330      	adds	r3, #48	; 0x30
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fc fe58 	bl	80038cc <ld_word>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d136      	bne.n	8006c90 <find_volume+0x654>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c24:	3301      	adds	r3, #1
 8006c26:	4619      	mov	r1, r3
 8006c28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c2a:	f7fd fa63 	bl	80040f4 <move_window>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d12d      	bne.n	8006c90 <find_volume+0x654>
		{
			fs->fsi_flag = 0;
 8006c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c36:	2200      	movs	r2, #0
 8006c38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c3c:	3338      	adds	r3, #56	; 0x38
 8006c3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fc fe42 	bl	80038cc <ld_word>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d11d      	bne.n	8006c90 <find_volume+0x654>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c56:	3338      	adds	r3, #56	; 0x38
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fc fe4f 	bl	80038fc <ld_dword>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4a1a      	ldr	r2, [pc, #104]	; (8006ccc <find_volume+0x690>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d114      	bne.n	8006c90 <find_volume+0x654>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c68:	3338      	adds	r3, #56	; 0x38
 8006c6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fc fe44 	bl	80038fc <ld_dword>
 8006c74:	4603      	mov	r3, r0
 8006c76:	4a16      	ldr	r2, [pc, #88]	; (8006cd0 <find_volume+0x694>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d109      	bne.n	8006c90 <find_volume+0x654>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7e:	3338      	adds	r3, #56	; 0x38
 8006c80:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fc fe39 	bl	80038fc <ld_dword>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c92:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8006c96:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006c98:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <find_volume+0x698>)
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <find_volume+0x698>)
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <find_volume+0x698>)
 8006ca6:	881a      	ldrh	r2, [r3, #0]
 8006ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006caa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cae:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <find_volume+0x69c>)
 8006cb0:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8006cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb4:	4a09      	ldr	r2, [pc, #36]	; (8006cdc <find_volume+0x6a0>)
 8006cb6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006cb8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cba:	f7fd f9b3 	bl	8004024 <clear_lock>
#endif
	return FR_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3770      	adds	r7, #112	; 0x70
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cca:	bf00      	nop
 8006ccc:	41615252 	.word	0x41615252
 8006cd0:	61417272 	.word	0x61417272
 8006cd4:	200025fc 	.word	0x200025fc
 8006cd8:	20002880 	.word	0x20002880
 8006cdc:	20002620 	.word	0x20002620

08006ce0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006cea:	2309      	movs	r3, #9
 8006cec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01c      	beq.n	8006d2e <validate+0x4e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d018      	beq.n	8006d2e <validate+0x4e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d013      	beq.n	8006d2e <validate+0x4e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	889a      	ldrh	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	88db      	ldrh	r3, [r3, #6]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d10c      	bne.n	8006d2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fc fd38 	bl	8003790 <disk_status>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <validate+0x4e>
			res = FR_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <validate+0x5a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	e000      	b.n	8006d3c <validate+0x5c>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	6013      	str	r3, [r2, #0]
	return res;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d5e:	f107 0310 	add.w	r3, r7, #16
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff fbc1 	bl	80064ea <get_ldnumber>
 8006d68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da01      	bge.n	8006d74 <f_mount+0x28>
 8006d70:	230b      	movs	r3, #11
 8006d72:	e02b      	b.n	8006dcc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d74:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <f_mount+0x88>)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006d84:	69b8      	ldr	r0, [r7, #24]
 8006d86:	f7fd f94d 	bl	8004024 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	490d      	ldr	r1, [pc, #52]	; (8006dd4 <f_mount+0x88>)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <f_mount+0x66>
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d001      	beq.n	8006db6 <f_mount+0x6a>
 8006db2:	2300      	movs	r3, #0
 8006db4:	e00a      	b.n	8006dcc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006db6:	f107 010c 	add.w	r1, r7, #12
 8006dba:	f107 0308 	add.w	r3, r7, #8
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff fc3b 	bl	800663c <find_volume>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200025f8 	.word	0x200025f8

08006dd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ddc:	b0a6      	sub	sp, #152	; 0x98
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	61f8      	str	r0, [r7, #28]
 8006de2:	61b9      	str	r1, [r7, #24]
 8006de4:	4613      	mov	r3, r2
 8006de6:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <f_open+0x1a>
 8006dee:	2309      	movs	r3, #9
 8006df0:	e2ae      	b.n	8007350 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df8:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8006dfa:	7dfa      	ldrb	r2, [r7, #23]
 8006dfc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006e00:	f107 0318 	add.w	r3, r7, #24
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff fc19 	bl	800663c <find_volume>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 8006e10:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 8292 	bne.w	800733e <f_open+0x566>
		dj.obj.fs = fs;
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff fab6 	bl	8006398 <follow_path>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e32:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d11a      	bne.n	8006e70 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e3a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006e3e:	b25b      	sxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	da03      	bge.n	8006e4c <f_open+0x74>
				res = FR_INVALID_NAME;
 8006e44:	2306      	movs	r3, #6
 8006e46:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006e4a:	e011      	b.n	8006e70 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	f023 0301 	bic.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bf14      	ite	ne
 8006e56:	2301      	movne	r3, #1
 8006e58:	2300      	moveq	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fc ff95 	bl	8003d94 <chk_lock>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	f003 031c 	and.w	r3, r3, #28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 8115 	beq.w	80070a6 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 8006e7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d017      	beq.n	8006eb4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006e84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d10e      	bne.n	8006eaa <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006e8c:	f7fc ffde 	bl	8003e4c <enq_lock>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d006      	beq.n	8006ea4 <f_open+0xcc>
 8006e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe ff1e 	bl	8005cdc <dir_register>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	e000      	b.n	8006ea6 <f_open+0xce>
 8006ea4:	2312      	movs	r3, #18
 8006ea6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	f043 0308 	orr.w	r3, r3, #8
 8006eb0:	75fb      	strb	r3, [r7, #23]
 8006eb2:	e011      	b.n	8006ed8 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006eb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006eb8:	f003 0311 	and.w	r3, r3, #17
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <f_open+0xf0>
					res = FR_DENIED;
 8006ec0:	2307      	movs	r3, #7
 8006ec2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006ec6:	e007      	b.n	8006ed8 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <f_open+0x100>
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ed8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 80fe 	bne.w	80070de <f_open+0x306>
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 80f8 	beq.w	80070de <f_open+0x306>
				dw = GET_FATTIME();
 8006eee:	f7fb ff19 	bl	8002d24 <get_fattime>
 8006ef2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	f040 8084 	bne.w	8007008 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8006f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	3334      	adds	r3, #52	; 0x34
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fc fcf5 	bl	80038fc <ld_dword>
 8006f12:	4602      	mov	r2, r0
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	3338      	adds	r3, #56	; 0x38
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fc fd0f 	bl	8003942 <ld_qword>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	69f9      	ldr	r1, [r7, #28]
 8006f2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	3321      	adds	r3, #33	; 0x21
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2200      	movs	r2, #0
 8006f44:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fc fdec 	bl	8003b2e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	3314      	adds	r3, #20
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	330c      	adds	r3, #12
 8006f66:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fc fddf 	bl	8003b2e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	3315      	adds	r3, #21
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	2220      	movs	r2, #32
 8006f82:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	3334      	adds	r3, #52	; 0x34
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fc fdce 	bl	8003b2e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	4608      	mov	r0, r1
 8006fa4:	f7fc fdef 	bl	8003b86 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	f7fc fde4 	bl	8003b86 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	3321      	adds	r3, #33	; 0x21
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8006fc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fbd3 	bl	8005778 <store_xdir>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8006fd8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d17e      	bne.n	80070de <f_open+0x306>
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d07a      	beq.n	80070de <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8006fe8:	69f8      	ldr	r0, [r7, #28]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f7fd fc8b 	bl	800490c <remove_chain>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	3a01      	subs	r2, #1
 8007004:	615a      	str	r2, [r3, #20]
 8007006:	e06a      	b.n	80070de <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800700a:	330e      	adds	r3, #14
 800700c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007010:	4618      	mov	r0, r3
 8007012:	f7fc fd8c 	bl	8003b2e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007018:	3316      	adds	r3, #22
 800701a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800701e:	4618      	mov	r0, r3
 8007020:	f7fc fd85 	bl	8003b2e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007026:	330b      	adds	r3, #11
 8007028:	2220      	movs	r2, #32
 800702a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe f81a 	bl	800506c <ld_clust>
 8007038:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007040:	2200      	movs	r2, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe f831 	bl	80050aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800704a:	331c      	adds	r3, #28
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f7fc fd6d 	bl	8003b2e <st_dword>
					fs->wflag = 1;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	2201      	movs	r2, #1
 8007058:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800705a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800705e:	2b00      	cmp	r3, #0
 8007060:	d03d      	beq.n	80070de <f_open+0x306>
						dw = fs->winsect;
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800706a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800706e:	2200      	movs	r2, #0
 8007070:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007074:	4618      	mov	r0, r3
 8007076:	f7fd fc49 	bl	800490c <remove_chain>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 8007080:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007084:	2b00      	cmp	r3, #0
 8007086:	d12a      	bne.n	80070de <f_open+0x306>
							res = move_window(fs, dw);
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800708e:	4618      	mov	r0, r3
 8007090:	f7fd f830 	bl	80040f4 <move_window>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070a0:	3a01      	subs	r2, #1
 80070a2:	615a      	str	r2, [r3, #20]
 80070a4:	e01b      	b.n	80070de <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80070a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d117      	bne.n	80070de <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80070ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <f_open+0x2ea>
					res = FR_NO_FILE;
 80070ba:	2304      	movs	r3, #4
 80070bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80070c0:	e00d      	b.n	80070de <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d008      	beq.n	80070de <f_open+0x306>
 80070cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <f_open+0x306>
						res = FR_DENIED;
 80070d8:	2307      	movs	r3, #7
 80070da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 80070de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d128      	bne.n	8007138 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <f_open+0x320>
				mode |= FA_MODIFIED;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f6:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8007100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	f023 0301 	bic.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	461a      	mov	r2, r3
 8007118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f7fc feb6 	bl	8003e90 <inc_lock>
 8007124:	4602      	mov	r2, r0
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <f_open+0x360>
 8007132:	2302      	movs	r3, #2
 8007134:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007138:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800713c:	2b00      	cmp	r3, #0
 800713e:	f040 80fe 	bne.w	800733e <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b04      	cmp	r3, #4
 8007148:	d12d      	bne.n	80071a6 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800714a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8007150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007154:	4613      	mov	r3, r2
 8007156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800715a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800715e:	431a      	orrs	r2, r3
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8007164:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	3334      	adds	r3, #52	; 0x34
 8007170:	4618      	mov	r0, r3
 8007172:	f7fc fbc3 	bl	80038fc <ld_dword>
 8007176:	4602      	mov	r2, r0
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	3338      	adds	r3, #56	; 0x38
 8007182:	4618      	mov	r0, r3
 8007184:	f7fc fbdd 	bl	8003942 <ld_qword>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	69f9      	ldr	r1, [r7, #28]
 800718e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	3321      	adds	r3, #33	; 0x21
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	71da      	strb	r2, [r3, #7]
 80071a4:	e016      	b.n	80071d4 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071aa:	4611      	mov	r1, r2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fd ff5d 	bl	800506c <ld_clust>
 80071b2:	4602      	mov	r2, r0
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80071b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ba:	331c      	adds	r3, #28
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fc fb9d 	bl	80038fc <ld_dword>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2200      	movs	r2, #0
 80071c6:	60bb      	str	r3, [r7, #8]
 80071c8:	60fa      	str	r2, [r7, #12]
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071d0:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2200      	movs	r2, #0
 80071d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80071da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	88da      	ldrh	r2, [r3, #6]
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	7dfa      	ldrb	r2, [r7, #23]
 80071ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2200      	movs	r2, #0
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80071fe:	69f9      	ldr	r1, [r7, #28]
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3354      	adds	r3, #84	; 0x54
 8007210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f7fc fd5e 	bl	8003cd8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 808b 	beq.w	800733e <f_open+0x566>
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	f000 8085 	beq.w	800733e <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800723a:	69f9      	ldr	r1, [r7, #28]
 800723c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	895b      	ldrh	r3, [r3, #10]
 8007244:	025b      	lsls	r3, r3, #9
 8007246:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007256:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800725a:	e026      	b.n	80072aa <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007262:	4618      	mov	r0, r3
 8007264:	f7fd f802 	bl	800426c <get_fat>
 8007268:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800726c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007270:	2b01      	cmp	r3, #1
 8007272:	d802      	bhi.n	800727a <f_open+0x4a2>
 8007274:	2302      	movs	r3, #2
 8007276:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800727a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	d102      	bne.n	800728a <f_open+0x4b2>
 8007284:	2301      	movs	r3, #1
 8007286:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800728a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800728c:	2200      	movs	r2, #0
 800728e:	469a      	mov	sl, r3
 8007290:	4693      	mov	fp, r2
 8007292:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007296:	ebb2 010a 	subs.w	r1, r2, sl
 800729a:	6039      	str	r1, [r7, #0]
 800729c:	eb63 030b 	sbc.w	r3, r3, fp
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80072aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <f_open+0x4ee>
 80072b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072b4:	2200      	movs	r2, #0
 80072b6:	4698      	mov	r8, r3
 80072b8:	4691      	mov	r9, r2
 80072ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80072be:	4590      	cmp	r8, r2
 80072c0:	eb79 0303 	sbcs.w	r3, r9, r3
 80072c4:	d3ca      	bcc.n	800725c <f_open+0x484>
				}
				fp->clust = clst;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80072ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d133      	bne.n	800733e <f_open+0x566>
 80072d6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80072da:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80072de:	2500      	movs	r5, #0
 80072e0:	ea54 0305 	orrs.w	r3, r4, r5
 80072e4:	d02b      	beq.n	800733e <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fc ff9d 	bl	800422c <clust2sect>
 80072f2:	67b8      	str	r0, [r7, #120]	; 0x78
 80072f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <f_open+0x52a>
						res = FR_INT_ERR;
 80072fa:	2302      	movs	r3, #2
 80072fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007300:	e01d      	b.n	800733e <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007302:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	0a42      	lsrs	r2, r0, #9
 8007310:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007314:	0a4b      	lsrs	r3, r1, #9
 8007316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007318:	441a      	add	r2, r3
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	7858      	ldrb	r0, [r3, #1]
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800732c:	2301      	movs	r3, #1
 800732e:	f7fc fa6f 	bl	8003810 <disk_read>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <f_open+0x566>
 8007338:	2301      	movs	r3, #1
 800733a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800733e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <f_open+0x574>
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800734c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8007350:	4618      	mov	r0, r3
 8007352:	3798      	adds	r7, #152	; 0x98
 8007354:	46bd      	mov	sp, r7
 8007356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800735a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800735a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800735e:	b08c      	sub	sp, #48	; 0x30
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f107 0210 	add.w	r2, r7, #16
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fcaf 	bl	8006ce0 <validate>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800738c:	2b00      	cmp	r3, #0
 800738e:	d108      	bne.n	80073a2 <f_write+0x48>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800739a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <f_write+0x4e>
 80073a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073a6:	e187      	b.n	80076b8 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <f_write+0x60>
 80073b6:	2307      	movs	r3, #7
 80073b8:	e17e      	b.n	80076b8 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b04      	cmp	r3, #4
 80073c0:	f000 816a 	beq.w	8007698 <f_write+0x33e>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	18d1      	adds	r1, r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80073d4:	4613      	mov	r3, r2
 80073d6:	4299      	cmp	r1, r3
 80073d8:	f080 815e 	bcs.w	8007698 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80073e2:	4613      	mov	r3, r2
 80073e4:	43db      	mvns	r3, r3
 80073e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80073e8:	e156      	b.n	8007698 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80073f0:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80073f4:	2500      	movs	r5, #0
 80073f6:	ea54 0305 	orrs.w	r3, r4, r5
 80073fa:	f040 80fb 	bne.w	80075f4 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	f04f 0300 	mov.w	r3, #0
 800740c:	0a42      	lsrs	r2, r0, #9
 800740e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007412:	0a4b      	lsrs	r3, r1, #9
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	895b      	ldrh	r3, [r3, #10]
 8007418:	3b01      	subs	r3, #1
 800741a:	4013      	ands	r3, r2
 800741c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d146      	bne.n	80074b2 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800742a:	4313      	orrs	r3, r2
 800742c:	d10c      	bne.n	8007448 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d11a      	bne.n	8007470 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f7fd fb18 	bl	8004a74 <create_chain>
 8007444:	62b8      	str	r0, [r7, #40]	; 0x28
 8007446:	e013      	b.n	8007470 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744c:	2b00      	cmp	r3, #0
 800744e:	d007      	beq.n	8007460 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7fd fc0d 	bl	8004c76 <clmt_clust>
 800745c:	62b8      	str	r0, [r7, #40]	; 0x28
 800745e:	e007      	b.n	8007470 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7fd fb03 	bl	8004a74 <create_chain>
 800746e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 8115 	beq.w	80076a2 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <f_write+0x130>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007486:	2302      	movs	r3, #2
 8007488:	e116      	b.n	80076b8 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d105      	bne.n	800749e <f_write+0x144>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800749a:	2301      	movs	r3, #1
 800749c:	e10c      	b.n	80076b8 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d102      	bne.n	80074b2 <f_write+0x158>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da1b      	bge.n	80074f6 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	7858      	ldrb	r0, [r3, #1]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074cc:	2301      	movs	r3, #1
 80074ce:	f7fc f9bf 	bl	8003850 <disk_write>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <f_write+0x18a>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0e9      	b.n	80076b8 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	f7fc fe94 	bl	800422c <clust2sect>
 8007504:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <f_write+0x1be>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007514:	2302      	movs	r3, #2
 8007516:	e0cf      	b.n	80076b8 <f_write+0x35e>
			sect += csect;
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	4413      	add	r3, r2
 800751e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	0a5b      	lsrs	r3, r3, #9
 8007524:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d03f      	beq.n	80075ac <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	4413      	add	r3, r2
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	8952      	ldrh	r2, [r2, #10]
 8007536:	4293      	cmp	r3, r2
 8007538:	d905      	bls.n	8007546 <f_write+0x1ec>
					cc = fs->csize - csect;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	895b      	ldrh	r3, [r3, #10]
 800753e:	461a      	mov	r2, r3
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	7858      	ldrb	r0, [r3, #1]
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	69f9      	ldr	r1, [r7, #28]
 8007550:	f7fc f97e 	bl	8003850 <disk_write>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <f_write+0x20c>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007562:	2301      	movs	r3, #1
 8007564:	e0a8      	b.n	80076b8 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	6a3a      	ldr	r2, [r7, #32]
 8007570:	429a      	cmp	r2, r3
 8007572:	d917      	bls.n	80075a4 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	025b      	lsls	r3, r3, #9
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800758c:	4619      	mov	r1, r3
 800758e:	f7fc fb82 	bl	8003c96 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759c:	b2da      	uxtb	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	025b      	lsls	r3, r3, #9
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80075aa:	e04a      	b.n	8007642 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d01b      	beq.n	80075ee <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80075c2:	4290      	cmp	r0, r2
 80075c4:	eb71 0303 	sbcs.w	r3, r1, r3
 80075c8:	d211      	bcs.n	80075ee <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	7858      	ldrb	r0, [r3, #1]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80075d4:	2301      	movs	r3, #1
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	f7fc f91a 	bl	8003810 <disk_read>
 80075dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80075ea:	2301      	movs	r3, #1
 80075ec:	e064      	b.n	80076b8 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80075fa:	4613      	mov	r3, r2
 80075fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007600:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	429a      	cmp	r2, r3
 800760c:	d901      	bls.n	8007612 <f_write+0x2b8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800761e:	4613      	mov	r3, r2
 8007620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007624:	440b      	add	r3, r1
 8007626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007628:	69f9      	ldr	r1, [r7, #28]
 800762a:	4618      	mov	r0, r3
 800762c:	f7fc fb33 	bl	8003c96 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007636:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	4413      	add	r3, r2
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007652:	2000      	movs	r0, #0
 8007654:	4688      	mov	r8, r1
 8007656:	4681      	mov	r9, r0
 8007658:	eb12 0a08 	adds.w	sl, r2, r8
 800765c:	eb43 0b09 	adc.w	fp, r3, r9
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800766c:	68f9      	ldr	r1, [r7, #12]
 800766e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8007672:	4282      	cmp	r2, r0
 8007674:	eb73 0c01 	sbcs.w	ip, r3, r1
 8007678:	d201      	bcs.n	800767e <f_write+0x324>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	441a      	add	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f47f aea5 	bne.w	80073ea <f_write+0x90>
 80076a0:	e000      	b.n	80076a4 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80076a2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3730      	adds	r7, #48	; 0x30
 80076bc:	46bd      	mov	sp, r7
 80076be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080076c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b09a      	sub	sp, #104	; 0x68
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff fb04 	bl	8006ce0 <validate>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80076de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f040 8105 	bne.w	80078f2 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80fd 	beq.w	80078f2 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	da17      	bge.n	8007734 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007706:	7858      	ldrb	r0, [r3, #1]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007712:	2301      	movs	r3, #1
 8007714:	f7fc f89c 	bl	8003850 <disk_write>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <f_sync+0x60>
 800771e:	2301      	movs	r3, #1
 8007720:	e0e9      	b.n	80078f6 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772c:	b2da      	uxtb	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007734:	f7fb faf6 	bl	8002d24 <get_fattime>
 8007738:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800773a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b04      	cmp	r3, #4
 8007740:	f040 808c 	bne.w	800785c <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd f880 	bl	800484c <fill_first_frag>
 800774c:	4603      	mov	r3, r0
 800774e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8007752:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	f04f 32ff 	mov.w	r2, #4294967295
 8007764:	4619      	mov	r1, r3
 8007766:	f7fd f8a0 	bl	80048aa <fill_last_frag>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8007770:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 80bc 	bne.w	80078f2 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	f107 0308 	add.w	r3, r7, #8
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f7fd ffc2 	bl	800570c <load_obj_dir>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800778e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007792:	2b00      	cmp	r3, #0
 8007794:	f040 80ad 	bne.w	80078f2 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8007798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	3304      	adds	r3, #4
 800779e:	781a      	ldrb	r2, [r3, #0]
 80077a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	3304      	adds	r3, #4
 80077a6:	f042 0220 	orr.w	r2, r2, #32
 80077aa:	b2d2      	uxtb	r2, r2
 80077ac:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	79da      	ldrb	r2, [r3, #7]
 80077b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	3321      	adds	r3, #33	; 0x21
 80077b8:	f042 0201 	orr.w	r2, r2, #1
 80077bc:	b2d2      	uxtb	r2, r2
 80077be:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80077c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7fc f9ad 	bl	8003b2e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80077d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80077e2:	4608      	mov	r0, r1
 80077e4:	f7fc f9cf 	bl	8003b86 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80077e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80077f6:	4608      	mov	r0, r1
 80077f8:	f7fc f9c5 	bl	8003b86 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80077fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	330c      	adds	r3, #12
 8007802:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007804:	4618      	mov	r0, r3
 8007806:	f7fc f992 	bl	8003b2e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800780a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	3315      	adds	r3, #21
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8007814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	3310      	adds	r3, #16
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f7fc f986 	bl	8003b2e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8007822:	f107 0308 	add.w	r3, r7, #8
 8007826:	4618      	mov	r0, r3
 8007828:	f7fd ffa6 	bl	8005778 <store_xdir>
 800782c:	4603      	mov	r3, r0
 800782e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007832:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007836:	2b00      	cmp	r3, #0
 8007838:	d15b      	bne.n	80078f2 <f_sync+0x230>
							res = sync_fs(fs);
 800783a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783c:	4618      	mov	r0, r3
 800783e:	f7fc fc87 	bl	8004150 <sync_fs>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800784e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007852:	b2da      	uxtb	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800785a:	e04a      	b.n	80078f2 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800785c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007862:	4619      	mov	r1, r3
 8007864:	4610      	mov	r0, r2
 8007866:	f7fc fc45 	bl	80040f4 <move_window>
 800786a:	4603      	mov	r3, r0
 800786c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8007870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007874:	2b00      	cmp	r3, #0
 8007876:	d13c      	bne.n	80078f2 <f_sync+0x230>
					dir = fp->dir_ptr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787c:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800787e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007880:	330b      	adds	r3, #11
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007886:	330b      	adds	r3, #11
 8007888:	f042 0220 	orr.w	r2, r2, #32
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	461a      	mov	r2, r3
 800789a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800789c:	f7fd fc05 	bl	80050aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80078a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a2:	f103 001c 	add.w	r0, r3, #28
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80078ac:	4613      	mov	r3, r2
 80078ae:	4619      	mov	r1, r3
 80078b0:	f7fc f93d 	bl	8003b2e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80078b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b6:	3316      	adds	r3, #22
 80078b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fc f937 	bl	8003b2e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80078c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c2:	3312      	adds	r3, #18
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fc f916 	bl	8003af8 <st_word>
					fs->wflag = 1;
 80078cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078ce:	2201      	movs	r2, #1
 80078d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80078d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fc fc3b 	bl	8004150 <sync_fs>
 80078da:	4603      	mov	r3, r0
 80078dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80078f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3768      	adds	r7, #104	; 0x68
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fedb 	bl	80076c2 <f_sync>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d118      	bne.n	8007948 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f107 0208 	add.w	r2, r7, #8
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f9de 	bl	8006ce0 <validate>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10c      	bne.n	8007948 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	4618      	mov	r0, r3
 8007934:	f7fc fb3a 	bl	8003fac <dec_lock>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007952:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007956:	b0b6      	sub	sp, #216	; 0xd8
 8007958:	af00      	add	r7, sp, #0
 800795a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800795e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007966:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f7ff f9b7 	bl	8006ce0 <validate>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007978:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800797c:	2b00      	cmp	r3, #0
 800797e:	d105      	bne.n	800798c <f_lseek+0x3a>
 8007980:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007988:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800798c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007990:	2b00      	cmp	r3, #0
 8007992:	d111      	bne.n	80079b8 <f_lseek+0x66>
 8007994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b04      	cmp	r3, #4
 800799c:	d10c      	bne.n	80079b8 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800799e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80079a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ac:	4619      	mov	r1, r3
 80079ae:	f7fc ff7c 	bl	80048aa <fill_last_frag>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80079b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <f_lseek+0x74>
 80079c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80079c4:	e38c      	b.n	80080e0 <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80079c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8141 	beq.w	8007c54 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80079d2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	bf08      	it	eq
 80079dc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80079e0:	f040 8087 	bne.w	8007af2 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 80079e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80079ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079f2:	1d1a      	adds	r2, r3, #4
 80079f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079fe:	2302      	movs	r3, #2
 8007a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 8007a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d058      	beq.n	8007ac8 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a28:	3302      	adds	r3, #2
 8007a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 8007a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 8007a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a44:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fc fc0f 	bl	800426c <get_fat>
 8007a4e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d806      	bhi.n	8007a68 <f_lseek+0x116>
 8007a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007a64:	2302      	movs	r3, #2
 8007a66:	e33b      	b.n	80080e0 <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d106      	bne.n	8007a80 <f_lseek+0x12e>
 8007a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e32f      	b.n	80080e0 <f_lseek+0x78e>
					} while (cl == pcl + 1);
 8007a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a84:	3301      	adds	r3, #1
 8007a86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d0cf      	beq.n	8007a2e <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007a8e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d80f      	bhi.n	8007aba <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 8007a9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007aa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007aae:	1d1a      	adds	r2, r3, #4
 8007ab0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ab4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007ab8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d3a6      	bcc.n	8007a16 <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007ac8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ace:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ad2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007ad4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d804      	bhi.n	8007aea <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8007ae0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e2f8      	b.n	80080dc <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007aea:	2311      	movs	r3, #17
 8007aec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007af0:	e2f4      	b.n	80080dc <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007af6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007afa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007afe:	4290      	cmp	r0, r2
 8007b00:	eb71 0303 	sbcs.w	r3, r1, r3
 8007b04:	d205      	bcs.n	8007b12 <f_lseek+0x1c0>
 8007b06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007b0e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 8007b12:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007b16:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b1a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8007b1e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f000 82da 	beq.w	80080dc <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007b28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b2c:	f112 3aff 	adds.w	sl, r2, #4294967295
 8007b30:	f143 3bff 	adc.w	fp, r3, #4294967295
 8007b34:	4652      	mov	r2, sl
 8007b36:	465b      	mov	r3, fp
 8007b38:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007b3c:	f7fd f89b 	bl	8004c76 <clmt_clust>
 8007b40:	4602      	mov	r2, r0
 8007b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8007b48:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7fc fb69 	bl	800422c <clust2sect>
 8007b5a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d106      	bne.n	8007b74 <f_lseek+0x222>
 8007b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007b70:	2302      	movs	r3, #2
 8007b72:	e2b5      	b.n	80080e0 <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007b74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b78:	1e54      	subs	r4, r2, #1
 8007b7a:	f143 35ff 	adc.w	r5, r3, #4294967295
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	0a62      	lsrs	r2, r4, #9
 8007b88:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 8007b8c:	0a6b      	lsrs	r3, r5, #9
 8007b8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b92:	895b      	ldrh	r3, [r3, #10]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	4013      	ands	r3, r2
 8007b98:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007ba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ba6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007baa:	f3c2 0808 	ubfx	r8, r2, #0, #9
 8007bae:	f04f 0900 	mov.w	r9, #0
 8007bb2:	ea58 0309 	orrs.w	r3, r8, r9
 8007bb6:	f000 8291 	beq.w	80080dc <f_lseek+0x78a>
 8007bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	f000 8289 	beq.w	80080dc <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bd2:	b25b      	sxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da21      	bge.n	8007c1c <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bdc:	7858      	ldrb	r0, [r3, #1]
 8007bde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007be2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bec:	2301      	movs	r3, #1
 8007bee:	f7fb fe2f 	bl	8003850 <disk_write>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d006      	beq.n	8007c06 <f_lseek+0x2b4>
 8007bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007c02:	2301      	movs	r3, #1
 8007c04:	e26c      	b.n	80080e0 <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c20:	7858      	ldrb	r0, [r3, #1]
 8007c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c26:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c30:	f7fb fdee 	bl	8003810 <disk_read>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d006      	beq.n	8007c48 <f_lseek+0x2f6>
 8007c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007c44:	2301      	movs	r3, #1
 8007c46:	e24b      	b.n	80080e0 <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 8007c48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c4c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c50:	645a      	str	r2, [r3, #68]	; 0x44
 8007c52:	e243      	b.n	80080dc <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 8007c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d009      	beq.n	8007c72 <f_lseek+0x320>
 8007c5e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d305      	bcc.n	8007c72 <f_lseek+0x320>
 8007c66:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6a:	f04f 0300 	mov.w	r3, #0
 8007c6e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c76:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007c7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007c7e:	4290      	cmp	r0, r2
 8007c80:	eb71 0303 	sbcs.w	r3, r1, r3
 8007c84:	d20d      	bcs.n	8007ca2 <f_lseek+0x350>
 8007c86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d105      	bne.n	8007ca2 <f_lseek+0x350>
			ofs = fp->obj.objsize;
 8007c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c9e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 8007ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ca6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007caa:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cb4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 8007cc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f000 818f 	beq.w	8007fec <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cd2:	895b      	ldrh	r3, [r3, #10]
 8007cd4:	025b      	lsls	r3, r3, #9
 8007cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 8007cda:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	d06b      	beq.n	8007dba <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007ce2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007ce6:	1e51      	subs	r1, r2, #1
 8007ce8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007cec:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cfc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cfe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d06:	f7f8 fab3 	bl	8000270 <__aeabi_uldivmod>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4614      	mov	r4, r2
 8007d10:	461d      	mov	r5, r3
 8007d12:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007d16:	1e51      	subs	r1, r2, #1
 8007d18:	6739      	str	r1, [r7, #112]	; 0x70
 8007d1a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007d1e:	677b      	str	r3, [r7, #116]	; 0x74
 8007d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d24:	2200      	movs	r2, #0
 8007d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d28:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007d2e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007d32:	f7f8 fa9d 	bl	8000270 <__aeabi_uldivmod>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 8007d3a:	4294      	cmp	r4, r2
 8007d3c:	eb75 0303 	sbcs.w	r3, r5, r3
 8007d40:	d33b      	bcc.n	8007dba <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007d42:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007d46:	1e51      	subs	r1, r2, #1
 8007d48:	6639      	str	r1, [r7, #96]	; 0x60
 8007d4a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d54:	3b01      	subs	r3, #1
 8007d56:	2200      	movs	r2, #0
 8007d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007d5c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007d60:	460b      	mov	r3, r1
 8007d62:	43db      	mvns	r3, r3
 8007d64:	653b      	str	r3, [r7, #80]	; 0x50
 8007d66:	4613      	mov	r3, r2
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007d70:	4623      	mov	r3, r4
 8007d72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d76:	4602      	mov	r2, r0
 8007d78:	4013      	ands	r3, r2
 8007d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	460a      	mov	r2, r1
 8007d80:	4013      	ands	r3, r2
 8007d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007d8c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 8007d90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d94:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007d9c:	1a14      	subs	r4, r2, r0
 8007d9e:	60bc      	str	r4, [r7, #8]
 8007da0:	eb63 0301 	sbc.w	r3, r3, r1
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007daa:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 8007dae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007db8:	e031      	b.n	8007e1e <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007dc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d123      	bne.n	8007e14 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8007dcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fc fe4e 	bl	8004a74 <create_chain>
 8007dd8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007ddc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d106      	bne.n	8007df2 <f_lseek+0x4a0>
 8007de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007de8:	2202      	movs	r2, #2
 8007dea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007dee:	2302      	movs	r3, #2
 8007df0:	e176      	b.n	80080e0 <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007df2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d106      	bne.n	8007e0a <f_lseek+0x4b8>
 8007dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007e06:	2301      	movs	r3, #1
 8007e08:	e16a      	b.n	80080e0 <f_lseek+0x78e>
					fp->obj.sclust = clst;
 8007e0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e12:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 8007e14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e1c:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 8007e1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80e2 	beq.w	8007fec <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007e28:	e090      	b.n	8007f4c <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 8007e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e2e:	2200      	movs	r2, #0
 8007e30:	643b      	str	r3, [r7, #64]	; 0x40
 8007e32:	647a      	str	r2, [r7, #68]	; 0x44
 8007e34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007e38:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	1a51      	subs	r1, r2, r1
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	4629      	mov	r1, r5
 8007e44:	eb63 0301 	sbc.w	r3, r3, r1
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007e4e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 8007e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e56:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007e5a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007e5e:	2000      	movs	r0, #0
 8007e60:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e62:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007e64:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007e68:	4621      	mov	r1, r4
 8007e6a:	1851      	adds	r1, r2, r1
 8007e6c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e6e:	4629      	mov	r1, r5
 8007e70:	414b      	adcs	r3, r1
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
 8007e74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e78:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007e7c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007e80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d031      	beq.n	8007ef4 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8007e90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e94:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007e98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007ea0:	4282      	cmp	r2, r0
 8007ea2:	418b      	sbcs	r3, r1
 8007ea4:	d212      	bcs.n	8007ecc <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 8007ea6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eaa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007eae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eb2:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 8007eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ec8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ed0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fc fdcd 	bl	8004a74 <create_chain>
 8007eda:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10f      	bne.n	8007f06 <f_lseek+0x5b4>
							ofs = 0; break;
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8007ef2:	e03b      	b.n	8007f6c <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ef8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fc f9b5 	bl	800426c <get_fat>
 8007f02:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d106      	bne.n	8007f1e <f_lseek+0x5cc>
 8007f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e0e0      	b.n	80080e0 <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007f1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d906      	bls.n	8007f34 <f_lseek+0x5e2>
 8007f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f2a:	69da      	ldr	r2, [r3, #28]
 8007f2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d306      	bcc.n	8007f42 <f_lseek+0x5f0>
 8007f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e0ce      	b.n	80080e0 <f_lseek+0x78e>
					fp->clust = clst;
 8007f42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f4a:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8007f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f50:	2200      	movs	r2, #0
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f56:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f5a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4291      	cmp	r1, r2
 8007f62:	4629      	mov	r1, r5
 8007f64:	eb71 0303 	sbcs.w	r3, r1, r3
 8007f68:	f4ff af5f 	bcc.w	8007e2a <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 8007f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f70:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007f74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f78:	1884      	adds	r4, r0, r2
 8007f7a:	623c      	str	r4, [r7, #32]
 8007f7c:	eb41 0303 	adc.w	r3, r1, r3
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
 8007f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f8a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 8007f8e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f92:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	d022      	beq.n	8007fec <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007faa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fc f93c 	bl	800422c <clust2sect>
 8007fb4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d106      	bne.n	8007fce <f_lseek+0x67c>
 8007fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e088      	b.n	80080e0 <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 8007fce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	0a42      	lsrs	r2, r0, #9
 8007fdc:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007fe0:	0a4b      	lsrs	r3, r1, #9
 8007fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ff0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007ff4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007ff8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8007ffc:	4290      	cmp	r0, r2
 8007ffe:	eb71 0303 	sbcs.w	r3, r1, r3
 8008002:	d212      	bcs.n	800802a <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 8008004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008008:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800800c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008010:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 8008014:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800801c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008020:	b2da      	uxtb	r2, r3
 8008022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008026:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800802a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800802e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008032:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008040:	460b      	mov	r3, r1
 8008042:	4313      	orrs	r3, r2
 8008044:	d04a      	beq.n	80080dc <f_lseek+0x78a>
 8008046:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800804a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008050:	429a      	cmp	r2, r3
 8008052:	d043      	beq.n	80080dc <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800805c:	b25b      	sxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	da21      	bge.n	80080a6 <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008066:	7858      	ldrb	r0, [r3, #1]
 8008068:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800806c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008076:	2301      	movs	r3, #1
 8008078:	f7fb fbea 	bl	8003850 <disk_write>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d006      	beq.n	8008090 <f_lseek+0x73e>
 8008082:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800808c:	2301      	movs	r3, #1
 800808e:	e027      	b.n	80080e0 <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008090:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008094:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809c:	b2da      	uxtb	r2, r3
 800809e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80080a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080aa:	7858      	ldrb	r0, [r3, #1]
 80080ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080b0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80080b4:	2301      	movs	r3, #1
 80080b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80080ba:	f7fb fba9 	bl	8003810 <disk_read>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <f_lseek+0x780>
 80080c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80080ce:	2301      	movs	r3, #1
 80080d0:	e006      	b.n	80080e0 <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 80080d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80080da:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 80080dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	37d8      	adds	r7, #216	; 0xd8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080080ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008102:	4b1f      	ldr	r3, [pc, #124]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 8008104:	7a5b      	ldrb	r3, [r3, #9]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d131      	bne.n	8008170 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800810c:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 800810e:	7a5b      	ldrb	r3, [r3, #9]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	461a      	mov	r2, r3
 8008114:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 8008116:	2100      	movs	r1, #0
 8008118:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 800811c:	7a5b      	ldrb	r3, [r3, #9]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	4a17      	ldr	r2, [pc, #92]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 800812c:	7a5b      	ldrb	r3, [r3, #9]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	461a      	mov	r2, r3
 8008132:	4b13      	ldr	r3, [pc, #76]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 8008134:	4413      	add	r3, r2
 8008136:	79fa      	ldrb	r2, [r7, #7]
 8008138:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800813a:	4b11      	ldr	r3, [pc, #68]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 800813c:	7a5b      	ldrb	r3, [r3, #9]
 800813e:	b2db      	uxtb	r3, r3
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	b2d1      	uxtb	r1, r2
 8008144:	4a0e      	ldr	r2, [pc, #56]	; (8008180 <FATFS_LinkDriverEx+0x94>)
 8008146:	7251      	strb	r1, [r2, #9]
 8008148:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800814a:	7dbb      	ldrb	r3, [r7, #22]
 800814c:	3330      	adds	r3, #48	; 0x30
 800814e:	b2da      	uxtb	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	3301      	adds	r3, #1
 8008158:	223a      	movs	r2, #58	; 0x3a
 800815a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3302      	adds	r3, #2
 8008160:	222f      	movs	r2, #47	; 0x2f
 8008162:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	3303      	adds	r3, #3
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
}
 8008172:	4618      	mov	r0, r3
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20002a80 	.word	0x20002a80

08008184 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800818e:	2200      	movs	r2, #0
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff ffaa 	bl	80080ec <FATFS_LinkDriverEx>
 8008198:	4603      	mov	r3, r0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	6039      	str	r1, [r7, #0]
 80081ae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	2b7f      	cmp	r3, #127	; 0x7f
 80081b4:	d802      	bhi.n	80081bc <ff_convert+0x18>
		c = chr;
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	81fb      	strh	r3, [r7, #14]
 80081ba:	e025      	b.n	8008208 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80081c2:	88fb      	ldrh	r3, [r7, #6]
 80081c4:	2bff      	cmp	r3, #255	; 0xff
 80081c6:	d805      	bhi.n	80081d4 <ff_convert+0x30>
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	3b80      	subs	r3, #128	; 0x80
 80081cc:	4a12      	ldr	r2, [pc, #72]	; (8008218 <ff_convert+0x74>)
 80081ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d2:	e000      	b.n	80081d6 <ff_convert+0x32>
 80081d4:	2300      	movs	r3, #0
 80081d6:	81fb      	strh	r3, [r7, #14]
 80081d8:	e016      	b.n	8008208 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80081da:	2300      	movs	r3, #0
 80081dc:	81fb      	strh	r3, [r7, #14]
 80081de:	e009      	b.n	80081f4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80081e0:	89fb      	ldrh	r3, [r7, #14]
 80081e2:	4a0d      	ldr	r2, [pc, #52]	; (8008218 <ff_convert+0x74>)
 80081e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d006      	beq.n	80081fc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80081ee:	89fb      	ldrh	r3, [r7, #14]
 80081f0:	3301      	adds	r3, #1
 80081f2:	81fb      	strh	r3, [r7, #14]
 80081f4:	89fb      	ldrh	r3, [r7, #14]
 80081f6:	2b7f      	cmp	r3, #127	; 0x7f
 80081f8:	d9f2      	bls.n	80081e0 <ff_convert+0x3c>
 80081fa:	e000      	b.n	80081fe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80081fc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80081fe:	89fb      	ldrh	r3, [r7, #14]
 8008200:	3380      	adds	r3, #128	; 0x80
 8008202:	b29b      	uxth	r3, r3
 8008204:	b2db      	uxtb	r3, r3
 8008206:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008208:	89fb      	ldrh	r3, [r7, #14]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	0800a1d4 	.word	0x0800a1d4

0800821c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822c:	d201      	bcs.n	8008232 <ff_wtoupper+0x16>
 800822e:	4b3e      	ldr	r3, [pc, #248]	; (8008328 <ff_wtoupper+0x10c>)
 8008230:	e000      	b.n	8008234 <ff_wtoupper+0x18>
 8008232:	4b3e      	ldr	r3, [pc, #248]	; (800832c <ff_wtoupper+0x110>)
 8008234:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	1c9a      	adds	r2, r3, #2
 800823a:	617a      	str	r2, [r7, #20]
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008240:	8a7b      	ldrh	r3, [r7, #18]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d068      	beq.n	8008318 <ff_wtoupper+0xfc>
 8008246:	88fa      	ldrh	r2, [r7, #6]
 8008248:	8a7b      	ldrh	r3, [r7, #18]
 800824a:	429a      	cmp	r2, r3
 800824c:	d364      	bcc.n	8008318 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	1c9a      	adds	r2, r3, #2
 8008252:	617a      	str	r2, [r7, #20]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	823b      	strh	r3, [r7, #16]
 8008258:	8a3b      	ldrh	r3, [r7, #16]
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	81fb      	strh	r3, [r7, #14]
 800825e:	8a3b      	ldrh	r3, [r7, #16]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	8a79      	ldrh	r1, [r7, #18]
 8008268:	8a3b      	ldrh	r3, [r7, #16]
 800826a:	440b      	add	r3, r1
 800826c:	429a      	cmp	r2, r3
 800826e:	da49      	bge.n	8008304 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008270:	89fb      	ldrh	r3, [r7, #14]
 8008272:	2b08      	cmp	r3, #8
 8008274:	d84f      	bhi.n	8008316 <ff_wtoupper+0xfa>
 8008276:	a201      	add	r2, pc, #4	; (adr r2, 800827c <ff_wtoupper+0x60>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082b3 	.word	0x080082b3
 8008284:	080082c9 	.word	0x080082c9
 8008288:	080082d1 	.word	0x080082d1
 800828c:	080082d9 	.word	0x080082d9
 8008290:	080082e1 	.word	0x080082e1
 8008294:	080082e9 	.word	0x080082e9
 8008298:	080082f1 	.word	0x080082f1
 800829c:	080082f9 	.word	0x080082f9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80082a0:	88fa      	ldrh	r2, [r7, #6]
 80082a2:	8a7b      	ldrh	r3, [r7, #18]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	80fb      	strh	r3, [r7, #6]
 80082b0:	e027      	b.n	8008302 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	8a7b      	ldrh	r3, [r7, #18]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	b29b      	uxth	r3, r3
 80082c0:	88fa      	ldrh	r2, [r7, #6]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	80fb      	strh	r3, [r7, #6]
 80082c6:	e01c      	b.n	8008302 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	3b10      	subs	r3, #16
 80082cc:	80fb      	strh	r3, [r7, #6]
 80082ce:	e018      	b.n	8008302 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	3b20      	subs	r3, #32
 80082d4:	80fb      	strh	r3, [r7, #6]
 80082d6:	e014      	b.n	8008302 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80082d8:	88fb      	ldrh	r3, [r7, #6]
 80082da:	3b30      	subs	r3, #48	; 0x30
 80082dc:	80fb      	strh	r3, [r7, #6]
 80082de:	e010      	b.n	8008302 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	3b1a      	subs	r3, #26
 80082e4:	80fb      	strh	r3, [r7, #6]
 80082e6:	e00c      	b.n	8008302 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	3308      	adds	r3, #8
 80082ec:	80fb      	strh	r3, [r7, #6]
 80082ee:	e008      	b.n	8008302 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80082f0:	88fb      	ldrh	r3, [r7, #6]
 80082f2:	3b50      	subs	r3, #80	; 0x50
 80082f4:	80fb      	strh	r3, [r7, #6]
 80082f6:	e004      	b.n	8008302 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80082fe:	80fb      	strh	r3, [r7, #6]
 8008300:	bf00      	nop
			}
			break;
 8008302:	e008      	b.n	8008316 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008304:	89fb      	ldrh	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d195      	bne.n	8008236 <ff_wtoupper+0x1a>
 800830a:	8a3b      	ldrh	r3, [r7, #16]
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	4413      	add	r3, r2
 8008312:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008314:	e78f      	b.n	8008236 <ff_wtoupper+0x1a>
			break;
 8008316:	bf00      	nop
	}

	return chr;
 8008318:	88fb      	ldrh	r3, [r7, #6]
}
 800831a:	4618      	mov	r0, r3
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	0800a2d4 	.word	0x0800a2d4
 800832c:	0800a4c8 	.word	0x0800a4c8

08008330 <__NVIC_EnableIRQ>:
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800833a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800833e:	2b00      	cmp	r3, #0
 8008340:	db0b      	blt.n	800835a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	f003 021f 	and.w	r2, r3, #31
 8008348:	4907      	ldr	r1, [pc, #28]	; (8008368 <__NVIC_EnableIRQ+0x38>)
 800834a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	2001      	movs	r0, #1
 8008352:	fa00 f202 	lsl.w	r2, r0, r2
 8008356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	e000e100 	.word	0xe000e100

0800836c <__NVIC_SetPriority>:
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	6039      	str	r1, [r7, #0]
 8008376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800837c:	2b00      	cmp	r3, #0
 800837e:	db0a      	blt.n	8008396 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	b2da      	uxtb	r2, r3
 8008384:	490c      	ldr	r1, [pc, #48]	; (80083b8 <__NVIC_SetPriority+0x4c>)
 8008386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800838a:	0112      	lsls	r2, r2, #4
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	440b      	add	r3, r1
 8008390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008394:	e00a      	b.n	80083ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	4908      	ldr	r1, [pc, #32]	; (80083bc <__NVIC_SetPriority+0x50>)
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	3b04      	subs	r3, #4
 80083a4:	0112      	lsls	r2, r2, #4
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	440b      	add	r3, r1
 80083aa:	761a      	strb	r2, [r3, #24]
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	e000e100 	.word	0xe000e100
 80083bc:	e000ed00 	.word	0xe000ed00

080083c0 <adc_ADCVREG_STUP_delay>:
/*
 * @brief delay for ADC voltage regulator start-up time(20us)
 * A 80Mhz->CM=12.5ns->CM x 2000=25us>20us
 */
void adc_ADCVREG_STUP_delay(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
	volatile uint32_t i;
	for (i=0;i<2000;i++) {}
 80083c6:	2300      	movs	r3, #0
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	e002      	b.n	80083d2 <adc_ADCVREG_STUP_delay+0x12>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3301      	adds	r3, #1
 80083d0:	607b      	str	r3, [r7, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80083d8:	d3f8      	bcc.n	80083cc <adc_ADCVREG_STUP_delay+0xc>
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <adc_MIC_config>:
/**
 * @Brief ADC MIC(with OPAMP output as input) configuration
 * PA3(A2)->ADC12_IN8 is the OPAMP output
 */
void adc_MIC_config(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
	//Enable ADC clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN);
 80083ec:	4b58      	ldr	r3, [pc, #352]	; (8008550 <adc_MIC_config+0x168>)
 80083ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f0:	4a57      	ldr	r2, [pc, #348]	; (8008550 <adc_MIC_config+0x168>)
 80083f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083f6:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Select HCLK/1 as ADC clock source
	ADC1_COMMON->CCR &=~(ADC_CCR_CKMODE);
 80083f8:	4b56      	ldr	r3, [pc, #344]	; (8008554 <adc_MIC_config+0x16c>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	4a55      	ldr	r2, [pc, #340]	; (8008554 <adc_MIC_config+0x16c>)
 80083fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008402:	6093      	str	r3, [r2, #8]
	ADC1_COMMON->CCR |= (ADC_CCR_CKMODE_0);
 8008404:	4b53      	ldr	r3, [pc, #332]	; (8008554 <adc_MIC_config+0x16c>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	4a52      	ldr	r2, [pc, #328]	; (8008554 <adc_MIC_config+0x16c>)
 800840a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800840e:	6093      	str	r3, [r2, #8]
	//Exit the Deep-power-down mode
	ADC1->CR &=~ (ADC_CR_DEEPPWD);
 8008410:	4b51      	ldr	r3, [pc, #324]	; (8008558 <adc_MIC_config+0x170>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	4a50      	ldr	r2, [pc, #320]	; (8008558 <adc_MIC_config+0x170>)
 8008416:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800841a:	6093      	str	r3, [r2, #8]
	//Enable the ADC internal voltage regulator
	ADC1->CR |= (ADC_CR_ADVREGEN);
 800841c:	4b4e      	ldr	r3, [pc, #312]	; (8008558 <adc_MIC_config+0x170>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	4a4d      	ldr	r2, [pc, #308]	; (8008558 <adc_MIC_config+0x170>)
 8008422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008426:	6093      	str	r3, [r2, #8]
	//Wait for the startup time of the ADC voltage regulator
	adc_ADCVREG_STUP_delay();
 8008428:	f7ff ffca 	bl	80083c0 <adc_ADCVREG_STUP_delay>
	////ADC Calibration
	//Single-Ended Input mode calibration
	ADC1->CR &=~ (ADC_CR_ADCALDIF);
 800842c:	4b4a      	ldr	r3, [pc, #296]	; (8008558 <adc_MIC_config+0x170>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4a49      	ldr	r2, [pc, #292]	; (8008558 <adc_MIC_config+0x170>)
 8008432:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008436:	6093      	str	r3, [r2, #8]
	//Calibration start
	ADC1->CR |= (ADC_CR_ADCAL);
 8008438:	4b47      	ldr	r3, [pc, #284]	; (8008558 <adc_MIC_config+0x170>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	4a46      	ldr	r2, [pc, #280]	; (8008558 <adc_MIC_config+0x170>)
 800843e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008442:	6093      	str	r3, [r2, #8]
	//Wait until calibration is stopped
	while (ADC1->CR & ADC_CR_ADCAL);
 8008444:	bf00      	nop
 8008446:	4b44      	ldr	r3, [pc, #272]	; (8008558 <adc_MIC_config+0x170>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dbfb      	blt.n	8008446 <adc_MIC_config+0x5e>
	//Right Align Mode
	ADC1->CFGR &=~ (ADC_CFGR_ALIGN);
 800844e:	4b42      	ldr	r3, [pc, #264]	; (8008558 <adc_MIC_config+0x170>)
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	4a41      	ldr	r2, [pc, #260]	; (8008558 <adc_MIC_config+0x170>)
 8008454:	f023 0320 	bic.w	r3, r3, #32
 8008458:	60d3      	str	r3, [r2, #12]
	//Single Conversion Mode
	ADC1->CFGR &=~ (ADC_CFGR_CONT);
 800845a:	4b3f      	ldr	r3, [pc, #252]	; (8008558 <adc_MIC_config+0x170>)
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	4a3e      	ldr	r2, [pc, #248]	; (8008558 <adc_MIC_config+0x170>)
 8008460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008464:	60d3      	str	r3, [r2, #12]
	//-----Sample time to 24.5 ADC CLK Cycles-----//
	//Tconv= (24.5+12.5) ADC CLK Cycles = 37 ADC clock cycles = 513.88ns
	//Total Tconv= Tconv *4= 2.055us(with N=4 oversampling)
	//Oversampled max frequency=486.49kHz
	ADC1->SMPR1 &=~ (ADC_SMPR1_SMP8);
 8008466:	4b3c      	ldr	r3, [pc, #240]	; (8008558 <adc_MIC_config+0x170>)
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	4a3b      	ldr	r2, [pc, #236]	; (8008558 <adc_MIC_config+0x170>)
 800846c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008470:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |= (0x3UL << ADC_SMPR1_SMP8_Pos);
 8008472:	4b39      	ldr	r3, [pc, #228]	; (8008558 <adc_MIC_config+0x170>)
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	4a38      	ldr	r2, [pc, #224]	; (8008558 <adc_MIC_config+0x170>)
 8008478:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800847c:	6153      	str	r3, [r2, #20]
	//Single-channel mode
	ADC1->SQR1 &=~(ADC_SQR1_L);
 800847e:	4b36      	ldr	r3, [pc, #216]	; (8008558 <adc_MIC_config+0x170>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	4a35      	ldr	r2, [pc, #212]	; (8008558 <adc_MIC_config+0x170>)
 8008484:	f023 030f 	bic.w	r3, r3, #15
 8008488:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1  &=~ (ADC_SQR1_SQ1);
 800848a:	4b33      	ldr	r3, [pc, #204]	; (8008558 <adc_MIC_config+0x170>)
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	4a32      	ldr	r2, [pc, #200]	; (8008558 <adc_MIC_config+0x170>)
 8008490:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8008494:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1  |= (0x8UL << (6U));
 8008496:	4b30      	ldr	r3, [pc, #192]	; (8008558 <adc_MIC_config+0x170>)
 8008498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849a:	4a2f      	ldr	r2, [pc, #188]	; (8008558 <adc_MIC_config+0x170>)
 800849c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084a0:	6313      	str	r3, [r2, #48]	; 0x30
	//----------------Oversampling Code-----------------------------//
	//Enable Regular Oversampled Mode
	ADC1->CFGR2 |= (ADC_CFGR2_ROVSE);
 80084a2:	4b2d      	ldr	r3, [pc, #180]	; (8008558 <adc_MIC_config+0x170>)
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	4a2c      	ldr	r2, [pc, #176]	; (8008558 <adc_MIC_config+0x170>)
 80084a8:	f043 0301 	orr.w	r3, r3, #1
 80084ac:	6113      	str	r3, [r2, #16]
	//Oversampling Ratio to 4 (no bit shifting)
	ADC1->CFGR2 &=~ (ADC_CFGR2_OVSR);
 80084ae:	4b2a      	ldr	r3, [pc, #168]	; (8008558 <adc_MIC_config+0x170>)
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	4a29      	ldr	r2, [pc, #164]	; (8008558 <adc_MIC_config+0x170>)
 80084b4:	f023 031c 	bic.w	r3, r3, #28
 80084b8:	6113      	str	r3, [r2, #16]
	ADC1->CFGR2 |= (ADC_CFGR2_OVSR_0);
 80084ba:	4b27      	ldr	r3, [pc, #156]	; (8008558 <adc_MIC_config+0x170>)
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	4a26      	ldr	r2, [pc, #152]	; (8008558 <adc_MIC_config+0x170>)
 80084c0:	f043 0304 	orr.w	r3, r3, #4
 80084c4:	6113      	str	r3, [r2, #16]
	//-------------------End of Oversampling Code------------------//
	//TIM6 TRGO Trigger
	ADC1->CFGR &=~ (ADC_CFGR_EXTEN);
 80084c6:	4b24      	ldr	r3, [pc, #144]	; (8008558 <adc_MIC_config+0x170>)
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	4a23      	ldr	r2, [pc, #140]	; (8008558 <adc_MIC_config+0x170>)
 80084cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80084d0:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (ADC_CFGR_EXTEN_0);
 80084d2:	4b21      	ldr	r3, [pc, #132]	; (8008558 <adc_MIC_config+0x170>)
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	4a20      	ldr	r2, [pc, #128]	; (8008558 <adc_MIC_config+0x170>)
 80084d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084dc:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR &=~ (ADC_CFGR_EXTSEL);
 80084de:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <adc_MIC_config+0x170>)
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	4a1d      	ldr	r2, [pc, #116]	; (8008558 <adc_MIC_config+0x170>)
 80084e4:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 80084e8:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (0xDUL << ADC_CFGR_EXTSEL_Pos);//Event 13->TIM6_TRGO selected
 80084ea:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <adc_MIC_config+0x170>)
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	4a1a      	ldr	r2, [pc, #104]	; (8008558 <adc_MIC_config+0x170>)
 80084f0:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 80084f4:	60d3      	str	r3, [r2, #12]
	//DMA Circular Mode
	ADC1->CFGR |= (ADC_CFGR_DMACFG);
 80084f6:	4b18      	ldr	r3, [pc, #96]	; (8008558 <adc_MIC_config+0x170>)
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	4a17      	ldr	r2, [pc, #92]	; (8008558 <adc_MIC_config+0x170>)
 80084fc:	f043 0302 	orr.w	r3, r3, #2
 8008500:	60d3      	str	r3, [r2, #12]
	//Enable DMA-ADC registers
	ADC1->CFGR |= (ADC_CFGR_DMAEN);
 8008502:	4b15      	ldr	r3, [pc, #84]	; (8008558 <adc_MIC_config+0x170>)
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	4a14      	ldr	r2, [pc, #80]	; (8008558 <adc_MIC_config+0x170>)
 8008508:	f043 0301 	orr.w	r3, r3, #1
 800850c:	60d3      	str	r3, [r2, #12]
	//Clear the ADC ready flag(It is cleared by writing 1 to it.)
	ADC1->ISR |=(ADC_ISR_ADRDY);
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <adc_MIC_config+0x170>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a11      	ldr	r2, [pc, #68]	; (8008558 <adc_MIC_config+0x170>)
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	6013      	str	r3, [r2, #0]
	//Enable ADC
	ADC1->CR |=(ADC_CR_ADEN);
 800851a:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <adc_MIC_config+0x170>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	4a0e      	ldr	r2, [pc, #56]	; (8008558 <adc_MIC_config+0x170>)
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	6093      	str	r3, [r2, #8]
	//Wait until ADC is ready
	while (!(ADC1->CR & ADC_CR_ADEN));
 8008526:	bf00      	nop
 8008528:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <adc_MIC_config+0x170>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0f9      	beq.n	8008528 <adc_MIC_config+0x140>
	//Clear the ADC ready flag again
	ADC1->ISR |=(ADC_ISR_ADRDY);
 8008534:	4b08      	ldr	r3, [pc, #32]	; (8008558 <adc_MIC_config+0x170>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a07      	ldr	r2, [pc, #28]	; (8008558 <adc_MIC_config+0x170>)
 800853a:	f043 0301 	orr.w	r3, r3, #1
 800853e:	6013      	str	r3, [r2, #0]
	//ADC begin
	ADC1->CR |=(ADC_CR_ADSTART);
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <adc_MIC_config+0x170>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4a04      	ldr	r2, [pc, #16]	; (8008558 <adc_MIC_config+0x170>)
 8008546:	f043 0304 	orr.w	r3, r3, #4
 800854a:	6093      	str	r3, [r2, #8]
}
 800854c:	bf00      	nop
 800854e:	bd80      	pop	{r7, pc}
 8008550:	40021000 	.word	0x40021000
 8008554:	50040300 	.word	0x50040300
 8008558:	50040000 	.word	0x50040000

0800855c <adc_MIC_DMA_config>:

/**
 * @Brief ADC MIC DMA configuration
 */
void adc_MIC_DMA_config(uint16_t * pADC_Buffer,uint16_t size)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	807b      	strh	r3, [r7, #2]
	//DMA1->Channel1-->ADC1
	//Enable DMA1 clock
	RCC->AHB1ENR |=(RCC_AHB1ENR_DMA1EN);
 8008568:	4b31      	ldr	r3, [pc, #196]	; (8008630 <adc_MIC_DMA_config+0xd4>)
 800856a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800856c:	4a30      	ldr	r2, [pc, #192]	; (8008630 <adc_MIC_DMA_config+0xd4>)
 800856e:	f043 0301 	orr.w	r3, r3, #1
 8008572:	6493      	str	r3, [r2, #72]	; 0x48
	//Clear DMA1-CH1 status flags
	DMA1->IFCR |=(DMA_IFCR_CGIF1);
 8008574:	4b2f      	ldr	r3, [pc, #188]	; (8008634 <adc_MIC_DMA_config+0xd8>)
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	4a2e      	ldr	r2, [pc, #184]	; (8008634 <adc_MIC_DMA_config+0xd8>)
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	6053      	str	r3, [r2, #4]
	//Peripheral address (Source is ADC_DR)
	DMA1_Channel1->CPAR =(uint32_t)(&(ADC1->DR));
 8008580:	4b2d      	ldr	r3, [pc, #180]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 8008582:	4a2e      	ldr	r2, [pc, #184]	; (800863c <adc_MIC_DMA_config+0xe0>)
 8008584:	609a      	str	r2, [r3, #8]
	//Memory address (Destination is uint16_t adc_samples[3])
	DMA1_Channel1->CMAR =(uint32_t)(pADC_Buffer);
 8008586:	4a2c      	ldr	r2, [pc, #176]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	60d3      	str	r3, [r2, #12]
	//Set No. of transfers to 4096
	DMA1_Channel1->CNDTR=4096;
 800858c:	4b2a      	ldr	r3, [pc, #168]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 800858e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008592:	605a      	str	r2, [r3, #4]
	//Normal/Circular DMA operation
	DMA1_Channel1->CCR |= (DMA_CCR_CIRC);
 8008594:	4b28      	ldr	r3, [pc, #160]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a27      	ldr	r2, [pc, #156]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 800859a:	f043 0320 	orr.w	r3, r3, #32
 800859e:	6013      	str	r3, [r2, #0]
	//Enable memory increment
	DMA1_Channel1->CCR |= (DMA_CCR_MINC);
 80085a0:	4b25      	ldr	r3, [pc, #148]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a24      	ldr	r2, [pc, #144]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085aa:	6013      	str	r3, [r2, #0]
	//Disable peripheral increment
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC);
 80085ac:	4b22      	ldr	r3, [pc, #136]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a21      	ldr	r2, [pc, #132]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b6:	6013      	str	r3, [r2, #0]
	//ADC data->12bits, therefore Peripheral->16bits
	DMA1_Channel1->CCR &= ~(DMA_CCR_PSIZE);
 80085b8:	4b1f      	ldr	r3, [pc, #124]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a1e      	ldr	r2, [pc, #120]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085c2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_PSIZE_0);
 80085c4:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a1b      	ldr	r2, [pc, #108]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ce:	6013      	str	r3, [r2, #0]
	//Memory 16 bits(src and dst have to match in data size)
	DMA1_Channel1->CCR &= ~(DMA_CCR_MSIZE);
 80085d0:	4b19      	ldr	r3, [pc, #100]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a18      	ldr	r2, [pc, #96]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80085da:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_MSIZE_0);
 80085dc:	4b16      	ldr	r3, [pc, #88]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a15      	ldr	r2, [pc, #84]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085e6:	6013      	str	r3, [r2, #0]
	//Direction is Peripheral to memory
	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);
 80085e8:	4b13      	ldr	r3, [pc, #76]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a12      	ldr	r2, [pc, #72]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085ee:	f023 0310 	bic.w	r3, r3, #16
 80085f2:	6013      	str	r3, [r2, #0]
	//Enable DMA
	DMA1_Channel1->CCR |= (DMA_CCR_EN);
 80085f4:	4b10      	ldr	r3, [pc, #64]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a0f      	ldr	r2, [pc, #60]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 80085fa:	f043 0301 	orr.w	r3, r3, #1
 80085fe:	6013      	str	r3, [r2, #0]
	//Enable Transfer complete interrupt - DMA
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE);
 8008600:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a0c      	ldr	r2, [pc, #48]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 8008606:	f043 0302 	orr.w	r3, r3, #2
 800860a:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(DMA1_Channel1_IRQn,0);
 800860c:	2100      	movs	r1, #0
 800860e:	200b      	movs	r0, #11
 8008610:	f7ff feac 	bl	800836c <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008614:	200b      	movs	r0, #11
 8008616:	f7ff fe8b 	bl	8008330 <__NVIC_EnableIRQ>
	//Enable Half-Transfer complete interrupt - DMA
	DMA1_Channel1->CCR |= (DMA_CCR_HTIE);
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a06      	ldr	r2, [pc, #24]	; (8008638 <adc_MIC_DMA_config+0xdc>)
 8008620:	f043 0304 	orr.w	r3, r3, #4
 8008624:	6013      	str	r3, [r2, #0]


}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40021000 	.word	0x40021000
 8008634:	40020000 	.word	0x40020000
 8008638:	40020008 	.word	0x40020008
 800863c:	50040040 	.word	0x50040040

08008640 <__NVIC_EnableIRQ>:
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800864a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800864e:	2b00      	cmp	r3, #0
 8008650:	db0b      	blt.n	800866a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	f003 021f 	and.w	r2, r3, #31
 8008658:	4907      	ldr	r1, [pc, #28]	; (8008678 <__NVIC_EnableIRQ+0x38>)
 800865a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865e:	095b      	lsrs	r3, r3, #5
 8008660:	2001      	movs	r0, #1
 8008662:	fa00 f202 	lsl.w	r2, r0, r2
 8008666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	e000e100 	.word	0xe000e100

0800867c <__NVIC_SetPriority>:
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	6039      	str	r1, [r7, #0]
 8008686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800868c:	2b00      	cmp	r3, #0
 800868e:	db0a      	blt.n	80086a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	b2da      	uxtb	r2, r3
 8008694:	490c      	ldr	r1, [pc, #48]	; (80086c8 <__NVIC_SetPriority+0x4c>)
 8008696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800869a:	0112      	lsls	r2, r2, #4
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	440b      	add	r3, r1
 80086a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086a4:	e00a      	b.n	80086bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	4908      	ldr	r1, [pc, #32]	; (80086cc <__NVIC_SetPriority+0x50>)
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	3b04      	subs	r3, #4
 80086b4:	0112      	lsls	r2, r2, #4
 80086b6:	b2d2      	uxtb	r2, r2
 80086b8:	440b      	add	r3, r1
 80086ba:	761a      	strb	r2, [r3, #24]
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	e000e100 	.word	0xe000e100
 80086cc:	e000ed00 	.word	0xe000ed00

080086d0 <exti_buttonConfig>:

/*
 * @brief Push Button EXTI configuration (PA12->D2)
 */
void exti_buttonConfig(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  //Enable GPIO port A clock
  RCC->AHB2ENR |=(RCC_AHB2ENR_GPIOAEN);
 80086d4:	4b22      	ldr	r3, [pc, #136]	; (8008760 <exti_buttonConfig+0x90>)
 80086d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d8:	4a21      	ldr	r2, [pc, #132]	; (8008760 <exti_buttonConfig+0x90>)
 80086da:	f043 0301 	orr.w	r3, r3, #1
 80086de:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Enable mode Input with Internal Pull-Up
  GPIOA->MODER &= ~(GPIO_MODER_MODE12);
 80086e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80086ea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80086ee:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD12);
 80086f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80086fa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80086fe:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR |= (GPIO_PUPDR_PUPD12_0);
 8008700:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800870a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800870e:	60d3      	str	r3, [r2, #12]
  //System configuration controller clock enable
  RCC->APB2ENR |= (RCC_APB2ENR_SYSCFGEN);
 8008710:	4b13      	ldr	r3, [pc, #76]	; (8008760 <exti_buttonConfig+0x90>)
 8008712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008714:	4a12      	ldr	r2, [pc, #72]	; (8008760 <exti_buttonConfig+0x90>)
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	6613      	str	r3, [r2, #96]	; 0x60
  //PA12 maps EXTI12
  SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI12);
 800871c:	4b11      	ldr	r3, [pc, #68]	; (8008764 <exti_buttonConfig+0x94>)
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	4a10      	ldr	r2, [pc, #64]	; (8008764 <exti_buttonConfig+0x94>)
 8008722:	f023 0307 	bic.w	r3, r3, #7
 8008726:	6153      	str	r3, [r2, #20]
  //Unblock EXTI0 interrupt
  EXTI->IMR1 |= (EXTI_IMR1_IM12);
 8008728:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <exti_buttonConfig+0x98>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a0e      	ldr	r2, [pc, #56]	; (8008768 <exti_buttonConfig+0x98>)
 800872e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008732:	6013      	str	r3, [r2, #0]
  //Enable Rising Edge Only
  EXTI->RTSR1 |= (EXTI_RTSR1_RT12);
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <exti_buttonConfig+0x98>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	4a0b      	ldr	r2, [pc, #44]	; (8008768 <exti_buttonConfig+0x98>)
 800873a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800873e:	6093      	str	r3, [r2, #8]
  EXTI->FTSR1 &= ~(EXTI_FTSR1_FT12);
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <exti_buttonConfig+0x98>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	4a08      	ldr	r2, [pc, #32]	; (8008768 <exti_buttonConfig+0x98>)
 8008746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800874a:	60d3      	str	r3, [r2, #12]
  //Minimum Priority Level
  NVIC_SetPriority(EXTI15_10_IRQn,15);
 800874c:	210f      	movs	r1, #15
 800874e:	2028      	movs	r0, #40	; 0x28
 8008750:	f7ff ff94 	bl	800867c <__NVIC_SetPriority>
  //Enable interrupt
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008754:	2028      	movs	r0, #40	; 0x28
 8008756:	f7ff ff73 	bl	8008640 <__NVIC_EnableIRQ>


}
 800875a:	bf00      	nop
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	40021000 	.word	0x40021000
 8008764:	40010000 	.word	0x40010000
 8008768:	40010400 	.word	0x40010400

0800876c <gpioPeriphClockControl>:
 */

#include <gpio.h>

// clock control api for GPIO
void gpioPeriphClockControl(GPIO_TypeDef *pGPIOx , uint8_t EnorDi) {
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d12b      	bne.n	80087d6 <gpioPeriphClockControl+0x6a>

		if (pGPIOx == GPIOA) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008784:	d106      	bne.n	8008794 <gpioPeriphClockControl+0x28>
			GPIOA_CLOCK_ENABLE();
 8008786:	4b2c      	ldr	r3, [pc, #176]	; (8008838 <gpioPeriphClockControl+0xcc>)
 8008788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878a:	4a2b      	ldr	r2, [pc, #172]	; (8008838 <gpioPeriphClockControl+0xcc>)
 800878c:	f043 0301 	orr.w	r3, r3, #1
 8008790:	64d3      	str	r3, [r2, #76]	; 0x4c
			GPIOC_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_CLOCK_DISABLE();
		}
	}
}
 8008792:	e04b      	b.n	800882c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOB) {
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a29      	ldr	r2, [pc, #164]	; (800883c <gpioPeriphClockControl+0xd0>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d106      	bne.n	80087aa <gpioPeriphClockControl+0x3e>
			GPIOB_CLOCK_ENABLE();
 800879c:	4b26      	ldr	r3, [pc, #152]	; (8008838 <gpioPeriphClockControl+0xcc>)
 800879e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a0:	4a25      	ldr	r2, [pc, #148]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087a2:	f043 0302 	orr.w	r3, r3, #2
 80087a6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80087a8:	e040      	b.n	800882c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOC){
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a24      	ldr	r2, [pc, #144]	; (8008840 <gpioPeriphClockControl+0xd4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d106      	bne.n	80087c0 <gpioPeriphClockControl+0x54>
			GPIOC_CLOCK_ENABLE();
 80087b2:	4b21      	ldr	r3, [pc, #132]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b6:	4a20      	ldr	r2, [pc, #128]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087b8:	f043 0304 	orr.w	r3, r3, #4
 80087bc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80087be:	e035      	b.n	800882c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOH){
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a20      	ldr	r2, [pc, #128]	; (8008844 <gpioPeriphClockControl+0xd8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d131      	bne.n	800882c <gpioPeriphClockControl+0xc0>
			GPIOH_CLOCK_ENABLE();
 80087c8:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087cc:	4a1a      	ldr	r2, [pc, #104]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80087d4:	e02a      	b.n	800882c <gpioPeriphClockControl+0xc0>
		if (pGPIOx == GPIOA) {
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80087dc:	d106      	bne.n	80087ec <gpioPeriphClockControl+0x80>
			GPIOA_CLOCK_DISABLE();
 80087de:	4b16      	ldr	r3, [pc, #88]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e2:	4a15      	ldr	r2, [pc, #84]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087e4:	f023 0301 	bic.w	r3, r3, #1
 80087e8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80087ea:	e01f      	b.n	800882c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOB) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a13      	ldr	r2, [pc, #76]	; (800883c <gpioPeriphClockControl+0xd0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d106      	bne.n	8008802 <gpioPeriphClockControl+0x96>
			GPIOB_CLOCK_DISABLE();
 80087f4:	4b10      	ldr	r3, [pc, #64]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f8:	4a0f      	ldr	r2, [pc, #60]	; (8008838 <gpioPeriphClockControl+0xcc>)
 80087fa:	f023 0302 	bic.w	r3, r3, #2
 80087fe:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8008800:	e014      	b.n	800882c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOC){
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <gpioPeriphClockControl+0xd4>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d106      	bne.n	8008818 <gpioPeriphClockControl+0xac>
			GPIOC_CLOCK_DISABLE();
 800880a:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <gpioPeriphClockControl+0xcc>)
 800880c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880e:	4a0a      	ldr	r2, [pc, #40]	; (8008838 <gpioPeriphClockControl+0xcc>)
 8008810:	f023 0304 	bic.w	r3, r3, #4
 8008814:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8008816:	e009      	b.n	800882c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOH){
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a0a      	ldr	r2, [pc, #40]	; (8008844 <gpioPeriphClockControl+0xd8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d105      	bne.n	800882c <gpioPeriphClockControl+0xc0>
			GPIOH_CLOCK_DISABLE();
 8008820:	4b05      	ldr	r3, [pc, #20]	; (8008838 <gpioPeriphClockControl+0xcc>)
 8008822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008824:	4a04      	ldr	r2, [pc, #16]	; (8008838 <gpioPeriphClockControl+0xcc>)
 8008826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800882a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	40021000 	.word	0x40021000
 800883c:	48000400 	.word	0x48000400
 8008840:	48000800 	.word	0x48000800
 8008844:	48001c00 	.word	0x48001c00

08008848 <gpio_Init>:

// GPIO Initialization
void gpio_Init(GPIO_Handle_t* pNewGPIOPin)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0 ;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]

	//enable the peripheral clock
	gpioPeriphClockControl(pNewGPIOPin->pGPIOx, ENABLE) ;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2101      	movs	r1, #1
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff ff86 	bl	800876c <gpioPeriphClockControl>
	// configure the modes of a GPIO pin
	temp = (pNewGPIOPin->pinMode << (2 * pNewGPIOPin->pinNumber)) ;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	795b      	ldrb	r3, [r3, #5]
 8008864:	461a      	mov	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	791b      	ldrb	r3, [r3, #4]
 800886a:	005b      	lsls	r3, r3, #1
 800886c:	fa02 f303 	lsl.w	r3, r2, r3
 8008870:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->MODER &= ~(0x3 << (2 * pNewGPIOPin->pinNumber) );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	791b      	ldrb	r3, [r3, #4]
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	2103      	movs	r1, #3
 8008880:	fa01 f303 	lsl.w	r3, r1, r3
 8008884:	43db      	mvns	r3, r3
 8008886:	4619      	mov	r1, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	400a      	ands	r2, r1
 800888e:	601a      	str	r2, [r3, #0]
	pNewGPIOPin->pGPIOx->MODER |= temp ;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6819      	ldr	r1, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	430a      	orrs	r2, r1
 800889e:	601a      	str	r2, [r3, #0]

	temp = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]

	// configure the speed
	temp = (pNewGPIOPin->pinSpeed << (2 * pNewGPIOPin->pinNumber) ) ;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	799b      	ldrb	r3, [r3, #6]
 80088a8:	461a      	mov	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	791b      	ldrb	r3, [r3, #4]
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pNewGPIOPin->pinNumber)) ;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	791b      	ldrb	r3, [r3, #4]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	2103      	movs	r1, #3
 80088c4:	fa01 f303 	lsl.w	r3, r1, r3
 80088c8:	43db      	mvns	r3, r3
 80088ca:	4619      	mov	r1, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	400a      	ands	r2, r1
 80088d2:	609a      	str	r2, [r3, #8]
	pNewGPIOPin->pGPIOx->OSPEEDR  |= temp ;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6899      	ldr	r1, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	609a      	str	r2, [r3, #8]

	temp = 0 ;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60fb      	str	r3, [r7, #12]

	// configure the pull up/down control
	temp = (pNewGPIOPin->pinPUPDControl << (2 * pNewGPIOPin->pinNumber) ) ;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	79db      	ldrb	r3, [r3, #7]
 80088ec:	461a      	mov	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	791b      	ldrb	r3, [r3, #4]
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->PUPDR  &= ~(0x3 << (2 * pNewGPIOPin->pinNumber));
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	791b      	ldrb	r3, [r3, #4]
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	2103      	movs	r1, #3
 8008908:	fa01 f303 	lsl.w	r3, r1, r3
 800890c:	43db      	mvns	r3, r3
 800890e:	4619      	mov	r1, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	400a      	ands	r2, r1
 8008916:	60da      	str	r2, [r3, #12]
	pNewGPIOPin->pGPIOx->PUPDR  |= temp ;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68d9      	ldr	r1, [r3, #12]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	430a      	orrs	r2, r1
 8008926:	60da      	str	r2, [r3, #12]

	temp = 0 ;
 8008928:	2300      	movs	r3, #0
 800892a:	60fb      	str	r3, [r7, #12]

	// configure the output type
	temp = (pNewGPIOPin->pinOutputType << ( pNewGPIOPin->pinNumber) ) ;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	7a1b      	ldrb	r3, [r3, #8]
 8008930:	461a      	mov	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	791b      	ldrb	r3, [r3, #4]
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->OTYPER &= ~(0x1 << pNewGPIOPin->pinNumber) ;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	791b      	ldrb	r3, [r3, #4]
 8008946:	4619      	mov	r1, r3
 8008948:	2301      	movs	r3, #1
 800894a:	408b      	lsls	r3, r1
 800894c:	43db      	mvns	r3, r3
 800894e:	4619      	mov	r1, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	400a      	ands	r2, r1
 8008956:	605a      	str	r2, [r3, #4]
	pNewGPIOPin->pGPIOx->OTYPER |= temp ;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6859      	ldr	r1, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	430a      	orrs	r2, r1
 8008966:	605a      	str	r2, [r3, #4]

	temp = 0 ;
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]

	// configure the alternate functionality
	if (pNewGPIOPin->pinMode == PIN_MODE_ALTFN)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	795b      	ldrb	r3, [r3, #5]
 8008970:	2b02      	cmp	r3, #2
 8008972:	d131      	bne.n	80089d8 <gpio_Init+0x190>
	{
		// configure the alternate function registers
		uint8_t temp1;
		uint8_t temp2;
		temp1 = pNewGPIOPin->pinNumber  / 8 ;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	791b      	ldrb	r3, [r3, #4]
 8008978:	08db      	lsrs	r3, r3, #3
 800897a:	72fb      	strb	r3, [r7, #11]
		temp2 = pNewGPIOPin->pinNumber % 8 ;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	791b      	ldrb	r3, [r3, #4]
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	72bb      	strb	r3, [r7, #10]
		pNewGPIOPin->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)) ;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	7afa      	ldrb	r2, [r7, #11]
 800898c:	3208      	adds	r2, #8
 800898e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008992:	7abb      	ldrb	r3, [r7, #10]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	220f      	movs	r2, #15
 8008998:	fa02 f303 	lsl.w	r3, r2, r3
 800899c:	43db      	mvns	r3, r3
 800899e:	4618      	mov	r0, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	7afa      	ldrb	r2, [r7, #11]
 80089a6:	4001      	ands	r1, r0
 80089a8:	3208      	adds	r2, #8
 80089aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pNewGPIOPin->pGPIOx->AFR[temp1] |= (pNewGPIOPin->pinAltFunMode << (4 * temp2)) ;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	7afa      	ldrb	r2, [r7, #11]
 80089b4:	3208      	adds	r2, #8
 80089b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7a5b      	ldrb	r3, [r3, #9]
 80089be:	461a      	mov	r2, r3
 80089c0:	7abb      	ldrb	r3, [r7, #10]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	fa02 f303 	lsl.w	r3, r2, r3
 80089c8:	4618      	mov	r0, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	7afa      	ldrb	r2, [r7, #11]
 80089d0:	4301      	orrs	r1, r0
 80089d2:	3208      	adds	r2, #8
 80089d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80089d8:	bf00      	nop
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <gpio_LED_config>:

/*
 * Brief LEDs GPIO Configuration PB3(On-board Led 3(Green))
 */
void gpio_LED_config(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  //Enable GPIO port B clock
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80089e4:	4b14      	ldr	r3, [pc, #80]	; (8008a38 <gpio_LED_config+0x58>)
 80089e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e8:	4a13      	ldr	r2, [pc, #76]	; (8008a38 <gpio_LED_config+0x58>)
 80089ea:	f043 0302 	orr.w	r3, r3, #2
 80089ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Pin mode to output
  GPIOB->MODER &= ~(GPIO_MODER_MODE3);
 80089f0:	4b12      	ldr	r3, [pc, #72]	; (8008a3c <gpio_LED_config+0x5c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a11      	ldr	r2, [pc, #68]	; (8008a3c <gpio_LED_config+0x5c>)
 80089f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089fa:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (GPIO_MODER_MODE3_0);
 80089fc:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <gpio_LED_config+0x5c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a0e      	ldr	r2, [pc, #56]	; (8008a3c <gpio_LED_config+0x5c>)
 8008a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a06:	6013      	str	r3, [r2, #0]
  //Seting output as PushPull
  GPIOB->OTYPER &= ~(GPIO_OTYPER_ODR_3);
 8008a08:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <gpio_LED_config+0x5c>)
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	4a0b      	ldr	r2, [pc, #44]	; (8008a3c <gpio_LED_config+0x5c>)
 8008a0e:	f023 0308 	bic.w	r3, r3, #8
 8008a12:	6053      	str	r3, [r2, #4]
  //Setting as High Speed Output
  GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR3);
 8008a14:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <gpio_LED_config+0x5c>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <gpio_LED_config+0x5c>)
 8008a1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a1e:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR3_1);
 8008a20:	4b06      	ldr	r3, [pc, #24]	; (8008a3c <gpio_LED_config+0x5c>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	4a05      	ldr	r2, [pc, #20]	; (8008a3c <gpio_LED_config+0x5c>)
 8008a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2a:	6093      	str	r3, [r2, #8]
}
 8008a2c:	bf00      	nop
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	40021000 	.word	0x40021000
 8008a3c:	48000400 	.word	0x48000400

08008a40 <gpio_LED_writeGreen>:
/*
 * Brief Write/Toggle functions
 */

void gpio_LED_writeGreen(bool state)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
    if(state)
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d006      	beq.n	8008a5e <gpio_LED_writeGreen+0x1e>
    {
      GPIOB->ODR |= (GPIO_ODR_OD3);
 8008a50:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <gpio_LED_writeGreen+0x38>)
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	4a08      	ldr	r2, [pc, #32]	; (8008a78 <gpio_LED_writeGreen+0x38>)
 8008a56:	f043 0308 	orr.w	r3, r3, #8
 8008a5a:	6153      	str	r3, [r2, #20]
    }
    else
    {
      GPIOB->ODR &= ~(GPIO_ODR_OD3);
    }
}
 8008a5c:	e005      	b.n	8008a6a <gpio_LED_writeGreen+0x2a>
      GPIOB->ODR &= ~(GPIO_ODR_OD3);
 8008a5e:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <gpio_LED_writeGreen+0x38>)
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	4a05      	ldr	r2, [pc, #20]	; (8008a78 <gpio_LED_writeGreen+0x38>)
 8008a64:	f023 0308 	bic.w	r3, r3, #8
 8008a68:	6153      	str	r3, [r2, #20]
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	48000400 	.word	0x48000400

08008a7c <gpio_LED_toggleGreen>:

void gpio_LED_toggleGreen(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
    GPIOB->ODR ^= (GPIO_ODR_OD3);
 8008a80:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <gpio_LED_toggleGreen+0x1c>)
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	4a04      	ldr	r2, [pc, #16]	; (8008a98 <gpio_LED_toggleGreen+0x1c>)
 8008a86:	f083 0308 	eor.w	r3, r3, #8
 8008a8a:	6153      	str	r3, [r2, #20]
}
 8008a8c:	bf00      	nop
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	48000400 	.word	0x48000400

08008a9c <opamp_config>:
#include <opamp.h>
/**
 * @Brief OPAMP configuration
 */
void opamp_config(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
	//Enable GPIO port A clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8008aa0:	4b2e      	ldr	r3, [pc, #184]	; (8008b5c <opamp_config+0xc0>)
 8008aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa4:	4a2d      	ldr	r2, [pc, #180]	; (8008b5c <opamp_config+0xc0>)
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Pin mode as analog mode
	GPIOA->MODER |= (GPIO_MODER_MODE0);
 8008aac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008ab6:	f043 0303 	orr.w	r3, r3, #3
 8008aba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE3);
 8008abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008ac6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008aca:	6013      	str	r3, [r2, #0]
	//Enable OPAMP clock
	RCC->APB1ENR1 |= (RCC_APB1ENR1_OPAMPEN);
 8008acc:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <opamp_config+0xc0>)
 8008ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad0:	4a22      	ldr	r2, [pc, #136]	; (8008b5c <opamp_config+0xc0>)
 8008ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ad6:	6593      	str	r3, [r2, #88]	; 0x58
	//Setting OPAMP voltage Range (VDDA>2.4V ->1, else 0);
	OPAMP->CSR |=(OPAMP1_CSR_OPARANGE);
 8008ad8:	4b21      	ldr	r3, [pc, #132]	; (8008b60 <opamp_config+0xc4>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a20      	ldr	r2, [pc, #128]	; (8008b60 <opamp_config+0xc4>)
 8008ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ae2:	6013      	str	r3, [r2, #0]
	//Setting OPAMP low power mode
	OPAMP->CSR |=(OPAMP1_CSR_OPALPM);
 8008ae4:	4b1e      	ldr	r3, [pc, #120]	; (8008b60 <opamp_config+0xc4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a1d      	ldr	r2, [pc, #116]	; (8008b60 <opamp_config+0xc4>)
 8008aea:	f043 0302 	orr.w	r3, r3, #2
 8008aee:	6013      	str	r3, [r2, #0]
	//Enable Programmable Gain Amplifier mode
	OPAMP->CSR &=~(OPAMP1_CSR_OPAMODE);
 8008af0:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <opamp_config+0xc4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a1a      	ldr	r2, [pc, #104]	; (8008b60 <opamp_config+0xc4>)
 8008af6:	f023 030c 	bic.w	r3, r3, #12
 8008afa:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_OPAMODE_1);
 8008afc:	4b18      	ldr	r3, [pc, #96]	; (8008b60 <opamp_config+0xc4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a17      	ldr	r2, [pc, #92]	; (8008b60 <opamp_config+0xc4>)
 8008b02:	f043 0308 	orr.w	r3, r3, #8
 8008b06:	6013      	str	r3, [r2, #0]
	//Setting OP Gain of 4
	OPAMP->CSR &=~(OPAMP1_CSR_PGAGAIN);
 8008b08:	4b15      	ldr	r3, [pc, #84]	; (8008b60 <opamp_config+0xc4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a14      	ldr	r2, [pc, #80]	; (8008b60 <opamp_config+0xc4>)
 8008b0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008b12:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_PGAGAIN_0);
 8008b14:	4b12      	ldr	r3, [pc, #72]	; (8008b60 <opamp_config+0xc4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a11      	ldr	r2, [pc, #68]	; (8008b60 <opamp_config+0xc4>)
 8008b1a:	f043 0310 	orr.w	r3, r3, #16
 8008b1e:	6013      	str	r3, [r2, #0]
	//Inverting input not externally connected
	OPAMP->CSR &=~(OPAMP1_CSR_VMSEL);
 8008b20:	4b0f      	ldr	r3, [pc, #60]	; (8008b60 <opamp_config+0xc4>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0e      	ldr	r2, [pc, #56]	; (8008b60 <opamp_config+0xc4>)
 8008b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b2a:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_VMSEL_1);
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <opamp_config+0xc4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a0b      	ldr	r2, [pc, #44]	; (8008b60 <opamp_config+0xc4>)
 8008b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b36:	6013      	str	r3, [r2, #0]
	//GPIO (PA0) connected to Non-Inverting Input
	OPAMP->CSR &=~(OPAMP1_CSR_VPSEL);
 8008b38:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <opamp_config+0xc4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a08      	ldr	r2, [pc, #32]	; (8008b60 <opamp_config+0xc4>)
 8008b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b42:	6013      	str	r3, [r2, #0]
	//OPAMP Switch ON
	OPAMP->CSR |=(OPAMP1_CSR_OPAEN);
 8008b44:	4b06      	ldr	r3, [pc, #24]	; (8008b60 <opamp_config+0xc4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a05      	ldr	r2, [pc, #20]	; (8008b60 <opamp_config+0xc4>)
 8008b4a:	f043 0301 	orr.w	r3, r3, #1
 8008b4e:	6013      	str	r3, [r2, #0]
//	//Wait until CALOUT is HIGH
//	while(!(OPAMP->CSR & (OPAMP1_CSR_CALOUT)))
//	{
//
//	}
}
 8008b50:	bf00      	nop
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40021000 	.word	0x40021000
 8008b60:	40007800 	.word	0x40007800

08008b64 <spi_GPIO_config>:
 * @Brief SPI1 GPIO pins configuration
 * (PA5(A4)->SP1_SCK,PA6(A5)->SP1_MISO,PA7(A6)->SP1_MOSI)
 * (PA4(A3)->CS)
 */
void spi_GPIO_config(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
	//SPI AF GPIO pins configuration
	GPIO_Handle_t spiPins;
	spiPins.pGPIOx=GPIOA;
 8008b6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b6e:	607b      	str	r3, [r7, #4]
	spiPins.pinMode=PIN_MODE_ALTFN;
 8008b70:	2302      	movs	r3, #2
 8008b72:	727b      	strb	r3, [r7, #9]
	spiPins.pinOutputType=PIN_OP_TYPE_PP;
 8008b74:	2300      	movs	r3, #0
 8008b76:	733b      	strb	r3, [r7, #12]
	spiPins.pinPUPDControl=PIN_NO_PUPD;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	72fb      	strb	r3, [r7, #11]
	spiPins.pinSpeed=PIN_SPEED_HIGH;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	72bb      	strb	r3, [r7, #10]
	spiPins.pinAltFunMode=AF5;
 8008b80:	2305      	movs	r3, #5
 8008b82:	737b      	strb	r3, [r7, #13]
	spiPins.pinNumber=PIN_NO_7;//MOSI
 8008b84:	2307      	movs	r3, #7
 8008b86:	723b      	strb	r3, [r7, #8]
	gpio_Init(&spiPins);
 8008b88:	1d3b      	adds	r3, r7, #4
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff fe5c 	bl	8008848 <gpio_Init>
	spiPins.pinNumber=PIN_NO_6;//MISO
 8008b90:	2306      	movs	r3, #6
 8008b92:	723b      	strb	r3, [r7, #8]
	spiPins.pinPUPDControl=PIN_PULL_UP;
 8008b94:	2301      	movs	r3, #1
 8008b96:	72fb      	strb	r3, [r7, #11]
	gpio_Init(&spiPins);
 8008b98:	1d3b      	adds	r3, r7, #4
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fe54 	bl	8008848 <gpio_Init>
	spiPins.pinNumber=PIN_NO_5;//SCLK
 8008ba0:	2305      	movs	r3, #5
 8008ba2:	723b      	strb	r3, [r7, #8]
	spiPins.pinPUPDControl=PIN_NO_PUPD;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	72fb      	strb	r3, [r7, #11]
	gpio_Init(&spiPins);
 8008ba8:	1d3b      	adds	r3, r7, #4
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7ff fe4c 	bl	8008848 <gpio_Init>
	spiPins.pinNumber=PIN_NO_4;//CS
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	723b      	strb	r3, [r7, #8]
	spiPins.pinMode=PIN_MODE_OUTPUT;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	727b      	strb	r3, [r7, #9]
	gpio_Init(&spiPins);
 8008bb8:	1d3b      	adds	r3, r7, #4
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff fe44 	bl	8008848 <gpio_Init>
	//Default value of CS is HIGH
	GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8008bc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008bca:	f043 0310 	orr.w	r3, r3, #16
 8008bce:	6193      	str	r3, [r2, #24]
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <spi_cs_sd_write>:

/**
 * @Brief SD Chip Select Set/Reset
 */
void spi_cs_sd_write(bool state)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	71fb      	strb	r3, [r7, #7]
	if (state)
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d008      	beq.n	8008bfa <spi_cs_sd_write+0x22>
	{
		GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8008be8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008bf2:	f043 0310 	orr.w	r3, r3, #16
 8008bf6:	6193      	str	r3, [r2, #24]
	}
	else
	{
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
	}
}
 8008bf8:	e007      	b.n	8008c0a <spi_cs_sd_write+0x32>
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
 8008bfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c08:	6193      	str	r3, [r2, #24]
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
	...

08008c18 <tim_TIM6_MIC_config>:
/**
 * @Brief TIM6 as ADC MIC
 * Generate a 44.1kHz Sample Rate
 */
void tim_TIM6_MIC_config(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
	//We are working with a SYSTEM Source of 16MHz
	//Enable TIM6 clock
	RCC->APB1ENR1 |=(RCC_APB1ENR1_TIM6EN);
 8008c1c:	4b13      	ldr	r3, [pc, #76]	; (8008c6c <tim_TIM6_MIC_config+0x54>)
 8008c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c20:	4a12      	ldr	r2, [pc, #72]	; (8008c6c <tim_TIM6_MIC_config+0x54>)
 8008c22:	f043 0310 	orr.w	r3, r3, #16
 8008c26:	6593      	str	r3, [r2, #88]	; 0x58
	//Periodic
	TIM6->CR1 &=~ (TIM_CR1_OPM);
 8008c28:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a10      	ldr	r2, [pc, #64]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c2e:	f023 0308 	bic.w	r3, r3, #8
 8008c32:	6013      	str	r3, [r2, #0]
	//Mode-->TRGO
	TIM6->CR2 &=~ (TIM_CR2_MMS);
 8008c34:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4a0d      	ldr	r2, [pc, #52]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3e:	6053      	str	r3, [r2, #4]
	TIM6->CR2 |= (TIM_CR2_MMS_1);
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	4a0a      	ldr	r2, [pc, #40]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c46:	f043 0320 	orr.w	r3, r3, #32
 8008c4a:	6053      	str	r3, [r2, #4]
	//f=44.1kHz
	TIM6->PSC = 0;//Keep APB clock Frequency
 8008c4c:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	629a      	str	r2, [r3, #40]	; 0x28
	//Period
	TIM6->ARR=816-1;//72MHz/816= 88.23kHz
 8008c52:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c54:	f240 322f 	movw	r2, #815	; 0x32f
 8008c58:	62da      	str	r2, [r3, #44]	; 0x2c
	//Update register on event
	TIM6->EGR=1;
 8008c5a:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <tim_TIM6_MIC_config+0x58>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	615a      	str	r2, [r3, #20]
//	//Start timer
//	TIM6->CR1 |= (TIM_CR1_CEN);
}
 8008c60:	bf00      	nop
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	40001000 	.word	0x40001000

08008c74 <__NVIC_SetPriorityGrouping>:
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c84:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c90:	4013      	ands	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ca6:	4a04      	ldr	r2, [pc, #16]	; (8008cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	60d3      	str	r3, [r2, #12]
}
 8008cac:	bf00      	nop
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	e000ed00 	.word	0xe000ed00

08008cbc <__NVIC_EnableIRQ>:
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	db0b      	blt.n	8008ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	f003 021f 	and.w	r2, r3, #31
 8008cd4:	4907      	ldr	r1, [pc, #28]	; (8008cf4 <__NVIC_EnableIRQ+0x38>)
 8008cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	2001      	movs	r0, #1
 8008cde:	fa00 f202 	lsl.w	r2, r0, r2
 8008ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	e000e100 	.word	0xe000e100

08008cf8 <__NVIC_SetPriority>:
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	6039      	str	r1, [r7, #0]
 8008d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	db0a      	blt.n	8008d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	490c      	ldr	r1, [pc, #48]	; (8008d44 <__NVIC_SetPriority+0x4c>)
 8008d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d16:	0112      	lsls	r2, r2, #4
 8008d18:	b2d2      	uxtb	r2, r2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d20:	e00a      	b.n	8008d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	4908      	ldr	r1, [pc, #32]	; (8008d48 <__NVIC_SetPriority+0x50>)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	3b04      	subs	r3, #4
 8008d30:	0112      	lsls	r2, r2, #4
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	440b      	add	r3, r1
 8008d36:	761a      	strb	r2, [r3, #24]
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	e000e100 	.word	0xe000e100
 8008d48:	e000ed00 	.word	0xe000ed00

08008d4c <uart_UART2_GPIO_config>:
}
/*
 * @Brief UART2 GPIO Config(PA2(Tx);PA15(Rx))
 */
void uart_UART2_GPIO_config(void)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
  // Enable PortA Clock
  RCC->AHB2ENR  |= ( RCC_AHB2ENR_GPIOAEN );
 8008d50:	4b2e      	ldr	r3, [pc, #184]	; (8008e0c <uart_UART2_GPIO_config+0xc0>)
 8008d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d54:	4a2d      	ldr	r2, [pc, #180]	; (8008e0c <uart_UART2_GPIO_config+0xc0>)
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  // Configure pins PA2, PA15 for USART2 .
  GPIOA->MODER    &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8008d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d66:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008d6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008d6e:	6013      	str	r3, [r2, #0]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->MODER    |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8008d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d7e:	f043 0320 	orr.w	r3, r3, #32
 8008d82:	6013      	str	r3, [r2, #0]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->OTYPER   &= ~( ( 0x1 << 2 ) |
 8008d84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d92:	f023 0304 	bic.w	r3, r3, #4
 8008d96:	6053      	str	r3, [r2, #4]
      ( 0x1 << 15 ) );
  GPIOA->OSPEEDR  &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8008d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008da2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008da6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008daa:	6093      	str	r3, [r2, #8]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->OSPEEDR  |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8008dac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dba:	f043 0320 	orr.w	r3, r3, #32
 8008dbe:	6093      	str	r3, [r2, #8]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->AFR[ 0 ] &= ~( ( 0xF << ( 2 * 4 ) ) );
 8008dc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008dca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008dce:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 0 ] |=  ( ( 0x7 << ( 2 * 4 ) ) );
 8008dd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008dda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008dde:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 1 ] &= ~( ( 0xF << ( ( 15 - 8 ) * 4 ) ) );
 8008de0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008dea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008dee:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->AFR[ 1 ] |=  ( ( 0x3 << ( ( 15 - 8 ) * 4 ) ) );
 8008df0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008dfa:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8008dfe:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008e00:	bf00      	nop
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	40021000 	.word	0x40021000

08008e10 <uart_UART2_config>:
/*
 * @Brief UART2 Peripheral Config
 */
void uart_UART2_config(uint32_t SYSTEM_CLK)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  //// Enable floating-point unit.
  //SCB->CPACR    |=  ( 0xFUL << (20U) );
  // Enable UART2 Clock
  RCC->APB1ENR1 |= ( RCC_APB1ENR1_USART2EN );
 8008e18:	4b28      	ldr	r3, [pc, #160]	; (8008ebc <uart_UART2_config+0xac>)
 8008e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1c:	4a27      	ldr	r2, [pc, #156]	; (8008ebc <uart_UART2_config+0xac>)
 8008e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e22:	6593      	str	r3, [r2, #88]	; 0x58
  // Set word length to 8-bits
  USART2->CR1  &= ~(USART_CR1_M1);
 8008e24:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a25      	ldr	r2, [pc, #148]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e2e:	6013      	str	r3, [r2, #0]
  // Set baud rate to 9600 Hz
  USART2->BRR = SYSTEM_CLK/9600;
 8008e30:	4a23      	ldr	r2, [pc, #140]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4923      	ldr	r1, [pc, #140]	; (8008ec4 <uart_UART2_config+0xb4>)
 8008e36:	fba1 1303 	umull	r1, r3, r1, r3
 8008e3a:	0a9b      	lsrs	r3, r3, #10
 8008e3c:	60d3      	str	r3, [r2, #12]
  // Parity control disabled
  USART2->CR1  &= ~(USART_CR1_PCE);
 8008e3e:	4b20      	ldr	r3, [pc, #128]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a1f      	ldr	r2, [pc, #124]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e48:	6013      	str	r3, [r2, #0]
  // Stop bits to 1
  USART2->CR2  &= ~(USART_CR2_STOP);
 8008e4a:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4a1c      	ldr	r2, [pc, #112]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008e54:	6053      	str	r3, [r2, #4]
  // Disable HW flow control
  USART2->CR3  &= ~(USART_CR3_CTSE);
 8008e56:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	4a19      	ldr	r2, [pc, #100]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e60:	6093      	str	r3, [r2, #8]
  USART2->CR3  &= ~(USART_CR3_RTSE);
 8008e62:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	4a16      	ldr	r2, [pc, #88]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e6c:	6093      	str	r3, [r2, #8]
  // Clear flags
  USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	4a13      	ldr	r2, [pc, #76]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e74:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008e78:	6053      	str	r3, [r2, #4]
  USART2->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN );
 8008e7a:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	4a10      	ldr	r2, [pc, #64]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e80:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008e84:	6093      	str	r3, [r2, #8]
  // Enable UART2 peripheral
  USART2->CR1 |= ( USART_CR1_RE | USART_CR1_TE | USART_CR1_UE );
 8008e86:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e8c:	f043 030d 	orr.w	r3, r3, #13
 8008e90:	6013      	str	r3, [r2, #0]
  // Enable Rx ready to read interruption
  USART2->CR1 |= ( USART_CR1_RXNEIE );
 8008e92:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a0a      	ldr	r2, [pc, #40]	; (8008ec0 <uart_UART2_config+0xb0>)
 8008e98:	f043 0320 	orr.w	r3, r3, #32
 8008e9c:	6013      	str	r3, [r2, #0]
  //All priority bits assigned to the preempt priority group
  NVIC_SetPriorityGrouping(0U);
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	f7ff fee8 	bl	8008c74 <__NVIC_SetPriorityGrouping>
  //Priority of the interrupt (NVIC)
  NVIC_SetPriority(USART2_IRQn,1);
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	2026      	movs	r0, #38	; 0x26
 8008ea8:	f7ff ff26 	bl	8008cf8 <__NVIC_SetPriority>
  //Enable the interrupt
  NVIC_EnableIRQ(USART2_IRQn);
 8008eac:	2026      	movs	r0, #38	; 0x26
 8008eae:	f7ff ff05 	bl	8008cbc <__NVIC_EnableIRQ>

}
 8008eb2:	bf00      	nop
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	40021000 	.word	0x40021000
 8008ec0:	40004400 	.word	0x40004400
 8008ec4:	1b4e81b5 	.word	0x1b4e81b5

08008ec8 <uart_UART2_TX>:
/*
 * @Brief UART2 Transmit
 */
bool uart_UART2_TX(uint8_t *data,uint8_t len,uint32_t timeout)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	72fb      	strb	r3, [r7, #11]
  //Write to DR as TXE flag is HIGH (Tx buffer Empty)
  uint8_t dataIdx = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t startTick = HAL_GetTick();
 8008eda:	f7f8 f88f 	bl	8000ffc <HAL_GetTick>
 8008ede:	6138      	str	r0, [r7, #16]
  while(dataIdx<len)
 8008ee0:	e01a      	b.n	8008f18 <uart_UART2_TX+0x50>
  {
    if(USART2->ISR & USART_ISR_TXE) //Tx buffer empty
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <uart_UART2_TX+0x84>)
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <uart_UART2_TX+0x3c>
    {
      USART2->TDR = data[dataIdx];
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	781a      	ldrb	r2, [r3, #0]
 8008ef6:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <uart_UART2_TX+0x84>)
 8008ef8:	b292      	uxth	r2, r2
 8008efa:	851a      	strh	r2, [r3, #40]	; 0x28
      dataIdx++;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	3301      	adds	r3, #1
 8008f00:	75fb      	strb	r3, [r7, #23]
 8008f02:	e009      	b.n	8008f18 <uart_UART2_TX+0x50>
    }
    else //Manage timeout
    {
      if((HAL_GetTick() - startTick)>= timeout) return false;
 8008f04:	f7f8 f87a 	bl	8000ffc <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d801      	bhi.n	8008f18 <uart_UART2_TX+0x50>
 8008f14:	2300      	movs	r3, #0
 8008f16:	e015      	b.n	8008f44 <uart_UART2_TX+0x7c>
  while(dataIdx<len)
 8008f18:	7dfa      	ldrb	r2, [r7, #23]
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d3e0      	bcc.n	8008ee2 <uart_UART2_TX+0x1a>
    }
  }
  //Wait for busy flag
  while((USART2->ISR & USART_ISR_TC))
 8008f20:	e009      	b.n	8008f36 <uart_UART2_TX+0x6e>
  {
    if((HAL_GetTick() - startTick)>= timeout) return false;
 8008f22:	f7f8 f86b 	bl	8000ffc <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d801      	bhi.n	8008f36 <uart_UART2_TX+0x6e>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e006      	b.n	8008f44 <uart_UART2_TX+0x7c>
  while((USART2->ISR & USART_ISR_TC))
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <uart_UART2_TX+0x84>)
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1ef      	bne.n	8008f22 <uart_UART2_TX+0x5a>
  }
  return true;
 8008f42:	2301      	movs	r3, #1

}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	40004400 	.word	0x40004400

08008f50 <__errno>:
 8008f50:	4b01      	ldr	r3, [pc, #4]	; (8008f58 <__errno+0x8>)
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	20000024 	.word	0x20000024

08008f5c <__libc_init_array>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4d0d      	ldr	r5, [pc, #52]	; (8008f94 <__libc_init_array+0x38>)
 8008f60:	4c0d      	ldr	r4, [pc, #52]	; (8008f98 <__libc_init_array+0x3c>)
 8008f62:	1b64      	subs	r4, r4, r5
 8008f64:	10a4      	asrs	r4, r4, #2
 8008f66:	2600      	movs	r6, #0
 8008f68:	42a6      	cmp	r6, r4
 8008f6a:	d109      	bne.n	8008f80 <__libc_init_array+0x24>
 8008f6c:	4d0b      	ldr	r5, [pc, #44]	; (8008f9c <__libc_init_array+0x40>)
 8008f6e:	4c0c      	ldr	r4, [pc, #48]	; (8008fa0 <__libc_init_array+0x44>)
 8008f70:	f001 f824 	bl	8009fbc <_init>
 8008f74:	1b64      	subs	r4, r4, r5
 8008f76:	10a4      	asrs	r4, r4, #2
 8008f78:	2600      	movs	r6, #0
 8008f7a:	42a6      	cmp	r6, r4
 8008f7c:	d105      	bne.n	8008f8a <__libc_init_array+0x2e>
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f84:	4798      	blx	r3
 8008f86:	3601      	adds	r6, #1
 8008f88:	e7ee      	b.n	8008f68 <__libc_init_array+0xc>
 8008f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f8e:	4798      	blx	r3
 8008f90:	3601      	adds	r6, #1
 8008f92:	e7f2      	b.n	8008f7a <__libc_init_array+0x1e>
 8008f94:	0800a624 	.word	0x0800a624
 8008f98:	0800a624 	.word	0x0800a624
 8008f9c:	0800a624 	.word	0x0800a624
 8008fa0:	0800a628 	.word	0x0800a628

08008fa4 <memset>:
 8008fa4:	4402      	add	r2, r0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d100      	bne.n	8008fae <memset+0xa>
 8008fac:	4770      	bx	lr
 8008fae:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb2:	e7f9      	b.n	8008fa8 <memset+0x4>

08008fb4 <iprintf>:
 8008fb4:	b40f      	push	{r0, r1, r2, r3}
 8008fb6:	4b0a      	ldr	r3, [pc, #40]	; (8008fe0 <iprintf+0x2c>)
 8008fb8:	b513      	push	{r0, r1, r4, lr}
 8008fba:	681c      	ldr	r4, [r3, #0]
 8008fbc:	b124      	cbz	r4, 8008fc8 <iprintf+0x14>
 8008fbe:	69a3      	ldr	r3, [r4, #24]
 8008fc0:	b913      	cbnz	r3, 8008fc8 <iprintf+0x14>
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fa5e 	bl	8009484 <__sinit>
 8008fc8:	ab05      	add	r3, sp, #20
 8008fca:	9a04      	ldr	r2, [sp, #16]
 8008fcc:	68a1      	ldr	r1, [r4, #8]
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 fc67 	bl	80098a4 <_vfiprintf_r>
 8008fd6:	b002      	add	sp, #8
 8008fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fdc:	b004      	add	sp, #16
 8008fde:	4770      	bx	lr
 8008fe0:	20000024 	.word	0x20000024

08008fe4 <_puts_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	460e      	mov	r6, r1
 8008fe8:	4605      	mov	r5, r0
 8008fea:	b118      	cbz	r0, 8008ff4 <_puts_r+0x10>
 8008fec:	6983      	ldr	r3, [r0, #24]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <_puts_r+0x10>
 8008ff0:	f000 fa48 	bl	8009484 <__sinit>
 8008ff4:	69ab      	ldr	r3, [r5, #24]
 8008ff6:	68ac      	ldr	r4, [r5, #8]
 8008ff8:	b913      	cbnz	r3, 8009000 <_puts_r+0x1c>
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 fa42 	bl	8009484 <__sinit>
 8009000:	4b2c      	ldr	r3, [pc, #176]	; (80090b4 <_puts_r+0xd0>)
 8009002:	429c      	cmp	r4, r3
 8009004:	d120      	bne.n	8009048 <_puts_r+0x64>
 8009006:	686c      	ldr	r4, [r5, #4]
 8009008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800900a:	07db      	lsls	r3, r3, #31
 800900c:	d405      	bmi.n	800901a <_puts_r+0x36>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	0598      	lsls	r0, r3, #22
 8009012:	d402      	bmi.n	800901a <_puts_r+0x36>
 8009014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009016:	f000 fad3 	bl	80095c0 <__retarget_lock_acquire_recursive>
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	0719      	lsls	r1, r3, #28
 800901e:	d51d      	bpl.n	800905c <_puts_r+0x78>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	b1db      	cbz	r3, 800905c <_puts_r+0x78>
 8009024:	3e01      	subs	r6, #1
 8009026:	68a3      	ldr	r3, [r4, #8]
 8009028:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800902c:	3b01      	subs	r3, #1
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	bb39      	cbnz	r1, 8009082 <_puts_r+0x9e>
 8009032:	2b00      	cmp	r3, #0
 8009034:	da38      	bge.n	80090a8 <_puts_r+0xc4>
 8009036:	4622      	mov	r2, r4
 8009038:	210a      	movs	r1, #10
 800903a:	4628      	mov	r0, r5
 800903c:	f000 f848 	bl	80090d0 <__swbuf_r>
 8009040:	3001      	adds	r0, #1
 8009042:	d011      	beq.n	8009068 <_puts_r+0x84>
 8009044:	250a      	movs	r5, #10
 8009046:	e011      	b.n	800906c <_puts_r+0x88>
 8009048:	4b1b      	ldr	r3, [pc, #108]	; (80090b8 <_puts_r+0xd4>)
 800904a:	429c      	cmp	r4, r3
 800904c:	d101      	bne.n	8009052 <_puts_r+0x6e>
 800904e:	68ac      	ldr	r4, [r5, #8]
 8009050:	e7da      	b.n	8009008 <_puts_r+0x24>
 8009052:	4b1a      	ldr	r3, [pc, #104]	; (80090bc <_puts_r+0xd8>)
 8009054:	429c      	cmp	r4, r3
 8009056:	bf08      	it	eq
 8009058:	68ec      	ldreq	r4, [r5, #12]
 800905a:	e7d5      	b.n	8009008 <_puts_r+0x24>
 800905c:	4621      	mov	r1, r4
 800905e:	4628      	mov	r0, r5
 8009060:	f000 f888 	bl	8009174 <__swsetup_r>
 8009064:	2800      	cmp	r0, #0
 8009066:	d0dd      	beq.n	8009024 <_puts_r+0x40>
 8009068:	f04f 35ff 	mov.w	r5, #4294967295
 800906c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800906e:	07da      	lsls	r2, r3, #31
 8009070:	d405      	bmi.n	800907e <_puts_r+0x9a>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	059b      	lsls	r3, r3, #22
 8009076:	d402      	bmi.n	800907e <_puts_r+0x9a>
 8009078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800907a:	f000 faa2 	bl	80095c2 <__retarget_lock_release_recursive>
 800907e:	4628      	mov	r0, r5
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	2b00      	cmp	r3, #0
 8009084:	da04      	bge.n	8009090 <_puts_r+0xac>
 8009086:	69a2      	ldr	r2, [r4, #24]
 8009088:	429a      	cmp	r2, r3
 800908a:	dc06      	bgt.n	800909a <_puts_r+0xb6>
 800908c:	290a      	cmp	r1, #10
 800908e:	d004      	beq.n	800909a <_puts_r+0xb6>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	6022      	str	r2, [r4, #0]
 8009096:	7019      	strb	r1, [r3, #0]
 8009098:	e7c5      	b.n	8009026 <_puts_r+0x42>
 800909a:	4622      	mov	r2, r4
 800909c:	4628      	mov	r0, r5
 800909e:	f000 f817 	bl	80090d0 <__swbuf_r>
 80090a2:	3001      	adds	r0, #1
 80090a4:	d1bf      	bne.n	8009026 <_puts_r+0x42>
 80090a6:	e7df      	b.n	8009068 <_puts_r+0x84>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	250a      	movs	r5, #10
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	6022      	str	r2, [r4, #0]
 80090b0:	701d      	strb	r5, [r3, #0]
 80090b2:	e7db      	b.n	800906c <_puts_r+0x88>
 80090b4:	0800a5a8 	.word	0x0800a5a8
 80090b8:	0800a5c8 	.word	0x0800a5c8
 80090bc:	0800a588 	.word	0x0800a588

080090c0 <puts>:
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <puts+0xc>)
 80090c2:	4601      	mov	r1, r0
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	f7ff bf8d 	b.w	8008fe4 <_puts_r>
 80090ca:	bf00      	nop
 80090cc:	20000024 	.word	0x20000024

080090d0 <__swbuf_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	4605      	mov	r5, r0
 80090d8:	b118      	cbz	r0, 80090e2 <__swbuf_r+0x12>
 80090da:	6983      	ldr	r3, [r0, #24]
 80090dc:	b90b      	cbnz	r3, 80090e2 <__swbuf_r+0x12>
 80090de:	f000 f9d1 	bl	8009484 <__sinit>
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <__swbuf_r+0x98>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d12b      	bne.n	8009140 <__swbuf_r+0x70>
 80090e8:	686c      	ldr	r4, [r5, #4]
 80090ea:	69a3      	ldr	r3, [r4, #24]
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	071a      	lsls	r2, r3, #28
 80090f2:	d52f      	bpl.n	8009154 <__swbuf_r+0x84>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b36b      	cbz	r3, 8009154 <__swbuf_r+0x84>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b2f6      	uxtb	r6, r6
 8009102:	4283      	cmp	r3, r0
 8009104:	4637      	mov	r7, r6
 8009106:	dc04      	bgt.n	8009112 <__swbuf_r+0x42>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f926 	bl	800935c <_fflush_r>
 8009110:	bb30      	cbnz	r0, 8009160 <__swbuf_r+0x90>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	3b01      	subs	r3, #1
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	701e      	strb	r6, [r3, #0]
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	3001      	adds	r0, #1
 8009124:	4283      	cmp	r3, r0
 8009126:	d004      	beq.n	8009132 <__swbuf_r+0x62>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	07db      	lsls	r3, r3, #31
 800912c:	d506      	bpl.n	800913c <__swbuf_r+0x6c>
 800912e:	2e0a      	cmp	r6, #10
 8009130:	d104      	bne.n	800913c <__swbuf_r+0x6c>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 f911 	bl	800935c <_fflush_r>
 800913a:	b988      	cbnz	r0, 8009160 <__swbuf_r+0x90>
 800913c:	4638      	mov	r0, r7
 800913e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <__swbuf_r+0x9c>)
 8009142:	429c      	cmp	r4, r3
 8009144:	d101      	bne.n	800914a <__swbuf_r+0x7a>
 8009146:	68ac      	ldr	r4, [r5, #8]
 8009148:	e7cf      	b.n	80090ea <__swbuf_r+0x1a>
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <__swbuf_r+0xa0>)
 800914c:	429c      	cmp	r4, r3
 800914e:	bf08      	it	eq
 8009150:	68ec      	ldreq	r4, [r5, #12]
 8009152:	e7ca      	b.n	80090ea <__swbuf_r+0x1a>
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f80c 	bl	8009174 <__swsetup_r>
 800915c:	2800      	cmp	r0, #0
 800915e:	d0cb      	beq.n	80090f8 <__swbuf_r+0x28>
 8009160:	f04f 37ff 	mov.w	r7, #4294967295
 8009164:	e7ea      	b.n	800913c <__swbuf_r+0x6c>
 8009166:	bf00      	nop
 8009168:	0800a5a8 	.word	0x0800a5a8
 800916c:	0800a5c8 	.word	0x0800a5c8
 8009170:	0800a588 	.word	0x0800a588

08009174 <__swsetup_r>:
 8009174:	4b32      	ldr	r3, [pc, #200]	; (8009240 <__swsetup_r+0xcc>)
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	681d      	ldr	r5, [r3, #0]
 800917a:	4606      	mov	r6, r0
 800917c:	460c      	mov	r4, r1
 800917e:	b125      	cbz	r5, 800918a <__swsetup_r+0x16>
 8009180:	69ab      	ldr	r3, [r5, #24]
 8009182:	b913      	cbnz	r3, 800918a <__swsetup_r+0x16>
 8009184:	4628      	mov	r0, r5
 8009186:	f000 f97d 	bl	8009484 <__sinit>
 800918a:	4b2e      	ldr	r3, [pc, #184]	; (8009244 <__swsetup_r+0xd0>)
 800918c:	429c      	cmp	r4, r3
 800918e:	d10f      	bne.n	80091b0 <__swsetup_r+0x3c>
 8009190:	686c      	ldr	r4, [r5, #4]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009198:	0719      	lsls	r1, r3, #28
 800919a:	d42c      	bmi.n	80091f6 <__swsetup_r+0x82>
 800919c:	06dd      	lsls	r5, r3, #27
 800919e:	d411      	bmi.n	80091c4 <__swsetup_r+0x50>
 80091a0:	2309      	movs	r3, #9
 80091a2:	6033      	str	r3, [r6, #0]
 80091a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295
 80091ae:	e03e      	b.n	800922e <__swsetup_r+0xba>
 80091b0:	4b25      	ldr	r3, [pc, #148]	; (8009248 <__swsetup_r+0xd4>)
 80091b2:	429c      	cmp	r4, r3
 80091b4:	d101      	bne.n	80091ba <__swsetup_r+0x46>
 80091b6:	68ac      	ldr	r4, [r5, #8]
 80091b8:	e7eb      	b.n	8009192 <__swsetup_r+0x1e>
 80091ba:	4b24      	ldr	r3, [pc, #144]	; (800924c <__swsetup_r+0xd8>)
 80091bc:	429c      	cmp	r4, r3
 80091be:	bf08      	it	eq
 80091c0:	68ec      	ldreq	r4, [r5, #12]
 80091c2:	e7e6      	b.n	8009192 <__swsetup_r+0x1e>
 80091c4:	0758      	lsls	r0, r3, #29
 80091c6:	d512      	bpl.n	80091ee <__swsetup_r+0x7a>
 80091c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ca:	b141      	cbz	r1, 80091de <__swsetup_r+0x6a>
 80091cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d0:	4299      	cmp	r1, r3
 80091d2:	d002      	beq.n	80091da <__swsetup_r+0x66>
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 fa5b 	bl	8009690 <_free_r>
 80091da:	2300      	movs	r3, #0
 80091dc:	6363      	str	r3, [r4, #52]	; 0x34
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	2300      	movs	r3, #0
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f043 0308 	orr.w	r3, r3, #8
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	6923      	ldr	r3, [r4, #16]
 80091f8:	b94b      	cbnz	r3, 800920e <__swsetup_r+0x9a>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009204:	d003      	beq.n	800920e <__swsetup_r+0x9a>
 8009206:	4621      	mov	r1, r4
 8009208:	4630      	mov	r0, r6
 800920a:	f000 fa01 	bl	8009610 <__smakebuf_r>
 800920e:	89a0      	ldrh	r0, [r4, #12]
 8009210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009214:	f010 0301 	ands.w	r3, r0, #1
 8009218:	d00a      	beq.n	8009230 <__swsetup_r+0xbc>
 800921a:	2300      	movs	r3, #0
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	6963      	ldr	r3, [r4, #20]
 8009220:	425b      	negs	r3, r3
 8009222:	61a3      	str	r3, [r4, #24]
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	b943      	cbnz	r3, 800923a <__swsetup_r+0xc6>
 8009228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800922c:	d1ba      	bne.n	80091a4 <__swsetup_r+0x30>
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	0781      	lsls	r1, r0, #30
 8009232:	bf58      	it	pl
 8009234:	6963      	ldrpl	r3, [r4, #20]
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	e7f4      	b.n	8009224 <__swsetup_r+0xb0>
 800923a:	2000      	movs	r0, #0
 800923c:	e7f7      	b.n	800922e <__swsetup_r+0xba>
 800923e:	bf00      	nop
 8009240:	20000024 	.word	0x20000024
 8009244:	0800a5a8 	.word	0x0800a5a8
 8009248:	0800a5c8 	.word	0x0800a5c8
 800924c:	0800a588 	.word	0x0800a588

08009250 <__sflush_r>:
 8009250:	898a      	ldrh	r2, [r1, #12]
 8009252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009256:	4605      	mov	r5, r0
 8009258:	0710      	lsls	r0, r2, #28
 800925a:	460c      	mov	r4, r1
 800925c:	d458      	bmi.n	8009310 <__sflush_r+0xc0>
 800925e:	684b      	ldr	r3, [r1, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	dc05      	bgt.n	8009270 <__sflush_r+0x20>
 8009264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	dc02      	bgt.n	8009270 <__sflush_r+0x20>
 800926a:	2000      	movs	r0, #0
 800926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009272:	2e00      	cmp	r6, #0
 8009274:	d0f9      	beq.n	800926a <__sflush_r+0x1a>
 8009276:	2300      	movs	r3, #0
 8009278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800927c:	682f      	ldr	r7, [r5, #0]
 800927e:	602b      	str	r3, [r5, #0]
 8009280:	d032      	beq.n	80092e8 <__sflush_r+0x98>
 8009282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	075a      	lsls	r2, r3, #29
 8009288:	d505      	bpl.n	8009296 <__sflush_r+0x46>
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	1ac0      	subs	r0, r0, r3
 800928e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009290:	b10b      	cbz	r3, 8009296 <__sflush_r+0x46>
 8009292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009294:	1ac0      	subs	r0, r0, r3
 8009296:	2300      	movs	r3, #0
 8009298:	4602      	mov	r2, r0
 800929a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800929c:	6a21      	ldr	r1, [r4, #32]
 800929e:	4628      	mov	r0, r5
 80092a0:	47b0      	blx	r6
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	d106      	bne.n	80092b6 <__sflush_r+0x66>
 80092a8:	6829      	ldr	r1, [r5, #0]
 80092aa:	291d      	cmp	r1, #29
 80092ac:	d82c      	bhi.n	8009308 <__sflush_r+0xb8>
 80092ae:	4a2a      	ldr	r2, [pc, #168]	; (8009358 <__sflush_r+0x108>)
 80092b0:	40ca      	lsrs	r2, r1
 80092b2:	07d6      	lsls	r6, r2, #31
 80092b4:	d528      	bpl.n	8009308 <__sflush_r+0xb8>
 80092b6:	2200      	movs	r2, #0
 80092b8:	6062      	str	r2, [r4, #4]
 80092ba:	04d9      	lsls	r1, r3, #19
 80092bc:	6922      	ldr	r2, [r4, #16]
 80092be:	6022      	str	r2, [r4, #0]
 80092c0:	d504      	bpl.n	80092cc <__sflush_r+0x7c>
 80092c2:	1c42      	adds	r2, r0, #1
 80092c4:	d101      	bne.n	80092ca <__sflush_r+0x7a>
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	b903      	cbnz	r3, 80092cc <__sflush_r+0x7c>
 80092ca:	6560      	str	r0, [r4, #84]	; 0x54
 80092cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ce:	602f      	str	r7, [r5, #0]
 80092d0:	2900      	cmp	r1, #0
 80092d2:	d0ca      	beq.n	800926a <__sflush_r+0x1a>
 80092d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d8:	4299      	cmp	r1, r3
 80092da:	d002      	beq.n	80092e2 <__sflush_r+0x92>
 80092dc:	4628      	mov	r0, r5
 80092de:	f000 f9d7 	bl	8009690 <_free_r>
 80092e2:	2000      	movs	r0, #0
 80092e4:	6360      	str	r0, [r4, #52]	; 0x34
 80092e6:	e7c1      	b.n	800926c <__sflush_r+0x1c>
 80092e8:	6a21      	ldr	r1, [r4, #32]
 80092ea:	2301      	movs	r3, #1
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b0      	blx	r6
 80092f0:	1c41      	adds	r1, r0, #1
 80092f2:	d1c7      	bne.n	8009284 <__sflush_r+0x34>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0c4      	beq.n	8009284 <__sflush_r+0x34>
 80092fa:	2b1d      	cmp	r3, #29
 80092fc:	d001      	beq.n	8009302 <__sflush_r+0xb2>
 80092fe:	2b16      	cmp	r3, #22
 8009300:	d101      	bne.n	8009306 <__sflush_r+0xb6>
 8009302:	602f      	str	r7, [r5, #0]
 8009304:	e7b1      	b.n	800926a <__sflush_r+0x1a>
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	e7ad      	b.n	800926c <__sflush_r+0x1c>
 8009310:	690f      	ldr	r7, [r1, #16]
 8009312:	2f00      	cmp	r7, #0
 8009314:	d0a9      	beq.n	800926a <__sflush_r+0x1a>
 8009316:	0793      	lsls	r3, r2, #30
 8009318:	680e      	ldr	r6, [r1, #0]
 800931a:	bf08      	it	eq
 800931c:	694b      	ldreq	r3, [r1, #20]
 800931e:	600f      	str	r7, [r1, #0]
 8009320:	bf18      	it	ne
 8009322:	2300      	movne	r3, #0
 8009324:	eba6 0807 	sub.w	r8, r6, r7
 8009328:	608b      	str	r3, [r1, #8]
 800932a:	f1b8 0f00 	cmp.w	r8, #0
 800932e:	dd9c      	ble.n	800926a <__sflush_r+0x1a>
 8009330:	6a21      	ldr	r1, [r4, #32]
 8009332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009334:	4643      	mov	r3, r8
 8009336:	463a      	mov	r2, r7
 8009338:	4628      	mov	r0, r5
 800933a:	47b0      	blx	r6
 800933c:	2800      	cmp	r0, #0
 800933e:	dc06      	bgt.n	800934e <__sflush_r+0xfe>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	e78e      	b.n	800926c <__sflush_r+0x1c>
 800934e:	4407      	add	r7, r0
 8009350:	eba8 0800 	sub.w	r8, r8, r0
 8009354:	e7e9      	b.n	800932a <__sflush_r+0xda>
 8009356:	bf00      	nop
 8009358:	20400001 	.word	0x20400001

0800935c <_fflush_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	690b      	ldr	r3, [r1, #16]
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b913      	cbnz	r3, 800936c <_fflush_r+0x10>
 8009366:	2500      	movs	r5, #0
 8009368:	4628      	mov	r0, r5
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	b118      	cbz	r0, 8009376 <_fflush_r+0x1a>
 800936e:	6983      	ldr	r3, [r0, #24]
 8009370:	b90b      	cbnz	r3, 8009376 <_fflush_r+0x1a>
 8009372:	f000 f887 	bl	8009484 <__sinit>
 8009376:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <_fflush_r+0x6c>)
 8009378:	429c      	cmp	r4, r3
 800937a:	d11b      	bne.n	80093b4 <_fflush_r+0x58>
 800937c:	686c      	ldr	r4, [r5, #4]
 800937e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0ef      	beq.n	8009366 <_fflush_r+0xa>
 8009386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009388:	07d0      	lsls	r0, r2, #31
 800938a:	d404      	bmi.n	8009396 <_fflush_r+0x3a>
 800938c:	0599      	lsls	r1, r3, #22
 800938e:	d402      	bmi.n	8009396 <_fflush_r+0x3a>
 8009390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009392:	f000 f915 	bl	80095c0 <__retarget_lock_acquire_recursive>
 8009396:	4628      	mov	r0, r5
 8009398:	4621      	mov	r1, r4
 800939a:	f7ff ff59 	bl	8009250 <__sflush_r>
 800939e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093a0:	07da      	lsls	r2, r3, #31
 80093a2:	4605      	mov	r5, r0
 80093a4:	d4e0      	bmi.n	8009368 <_fflush_r+0xc>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	059b      	lsls	r3, r3, #22
 80093aa:	d4dd      	bmi.n	8009368 <_fflush_r+0xc>
 80093ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ae:	f000 f908 	bl	80095c2 <__retarget_lock_release_recursive>
 80093b2:	e7d9      	b.n	8009368 <_fflush_r+0xc>
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <_fflush_r+0x70>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	d101      	bne.n	80093be <_fflush_r+0x62>
 80093ba:	68ac      	ldr	r4, [r5, #8]
 80093bc:	e7df      	b.n	800937e <_fflush_r+0x22>
 80093be:	4b04      	ldr	r3, [pc, #16]	; (80093d0 <_fflush_r+0x74>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	bf08      	it	eq
 80093c4:	68ec      	ldreq	r4, [r5, #12]
 80093c6:	e7da      	b.n	800937e <_fflush_r+0x22>
 80093c8:	0800a5a8 	.word	0x0800a5a8
 80093cc:	0800a5c8 	.word	0x0800a5c8
 80093d0:	0800a588 	.word	0x0800a588

080093d4 <std>:
 80093d4:	2300      	movs	r3, #0
 80093d6:	b510      	push	{r4, lr}
 80093d8:	4604      	mov	r4, r0
 80093da:	e9c0 3300 	strd	r3, r3, [r0]
 80093de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093e2:	6083      	str	r3, [r0, #8]
 80093e4:	8181      	strh	r1, [r0, #12]
 80093e6:	6643      	str	r3, [r0, #100]	; 0x64
 80093e8:	81c2      	strh	r2, [r0, #14]
 80093ea:	6183      	str	r3, [r0, #24]
 80093ec:	4619      	mov	r1, r3
 80093ee:	2208      	movs	r2, #8
 80093f0:	305c      	adds	r0, #92	; 0x5c
 80093f2:	f7ff fdd7 	bl	8008fa4 <memset>
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <std+0x38>)
 80093f8:	6263      	str	r3, [r4, #36]	; 0x24
 80093fa:	4b05      	ldr	r3, [pc, #20]	; (8009410 <std+0x3c>)
 80093fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <std+0x40>)
 8009400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <std+0x44>)
 8009404:	6224      	str	r4, [r4, #32]
 8009406:	6323      	str	r3, [r4, #48]	; 0x30
 8009408:	bd10      	pop	{r4, pc}
 800940a:	bf00      	nop
 800940c:	08009e4d 	.word	0x08009e4d
 8009410:	08009e6f 	.word	0x08009e6f
 8009414:	08009ea7 	.word	0x08009ea7
 8009418:	08009ecb 	.word	0x08009ecb

0800941c <_cleanup_r>:
 800941c:	4901      	ldr	r1, [pc, #4]	; (8009424 <_cleanup_r+0x8>)
 800941e:	f000 b8af 	b.w	8009580 <_fwalk_reent>
 8009422:	bf00      	nop
 8009424:	0800935d 	.word	0x0800935d

08009428 <__sfmoreglue>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	2268      	movs	r2, #104	; 0x68
 800942c:	1e4d      	subs	r5, r1, #1
 800942e:	4355      	muls	r5, r2
 8009430:	460e      	mov	r6, r1
 8009432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009436:	f000 f997 	bl	8009768 <_malloc_r>
 800943a:	4604      	mov	r4, r0
 800943c:	b140      	cbz	r0, 8009450 <__sfmoreglue+0x28>
 800943e:	2100      	movs	r1, #0
 8009440:	e9c0 1600 	strd	r1, r6, [r0]
 8009444:	300c      	adds	r0, #12
 8009446:	60a0      	str	r0, [r4, #8]
 8009448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800944c:	f7ff fdaa 	bl	8008fa4 <memset>
 8009450:	4620      	mov	r0, r4
 8009452:	bd70      	pop	{r4, r5, r6, pc}

08009454 <__sfp_lock_acquire>:
 8009454:	4801      	ldr	r0, [pc, #4]	; (800945c <__sfp_lock_acquire+0x8>)
 8009456:	f000 b8b3 	b.w	80095c0 <__retarget_lock_acquire_recursive>
 800945a:	bf00      	nop
 800945c:	20002a8d 	.word	0x20002a8d

08009460 <__sfp_lock_release>:
 8009460:	4801      	ldr	r0, [pc, #4]	; (8009468 <__sfp_lock_release+0x8>)
 8009462:	f000 b8ae 	b.w	80095c2 <__retarget_lock_release_recursive>
 8009466:	bf00      	nop
 8009468:	20002a8d 	.word	0x20002a8d

0800946c <__sinit_lock_acquire>:
 800946c:	4801      	ldr	r0, [pc, #4]	; (8009474 <__sinit_lock_acquire+0x8>)
 800946e:	f000 b8a7 	b.w	80095c0 <__retarget_lock_acquire_recursive>
 8009472:	bf00      	nop
 8009474:	20002a8e 	.word	0x20002a8e

08009478 <__sinit_lock_release>:
 8009478:	4801      	ldr	r0, [pc, #4]	; (8009480 <__sinit_lock_release+0x8>)
 800947a:	f000 b8a2 	b.w	80095c2 <__retarget_lock_release_recursive>
 800947e:	bf00      	nop
 8009480:	20002a8e 	.word	0x20002a8e

08009484 <__sinit>:
 8009484:	b510      	push	{r4, lr}
 8009486:	4604      	mov	r4, r0
 8009488:	f7ff fff0 	bl	800946c <__sinit_lock_acquire>
 800948c:	69a3      	ldr	r3, [r4, #24]
 800948e:	b11b      	cbz	r3, 8009498 <__sinit+0x14>
 8009490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009494:	f7ff bff0 	b.w	8009478 <__sinit_lock_release>
 8009498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800949c:	6523      	str	r3, [r4, #80]	; 0x50
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <__sinit+0x68>)
 80094a0:	4a13      	ldr	r2, [pc, #76]	; (80094f0 <__sinit+0x6c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80094a6:	42a3      	cmp	r3, r4
 80094a8:	bf04      	itt	eq
 80094aa:	2301      	moveq	r3, #1
 80094ac:	61a3      	streq	r3, [r4, #24]
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 f820 	bl	80094f4 <__sfp>
 80094b4:	6060      	str	r0, [r4, #4]
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 f81c 	bl	80094f4 <__sfp>
 80094bc:	60a0      	str	r0, [r4, #8]
 80094be:	4620      	mov	r0, r4
 80094c0:	f000 f818 	bl	80094f4 <__sfp>
 80094c4:	2200      	movs	r2, #0
 80094c6:	60e0      	str	r0, [r4, #12]
 80094c8:	2104      	movs	r1, #4
 80094ca:	6860      	ldr	r0, [r4, #4]
 80094cc:	f7ff ff82 	bl	80093d4 <std>
 80094d0:	68a0      	ldr	r0, [r4, #8]
 80094d2:	2201      	movs	r2, #1
 80094d4:	2109      	movs	r1, #9
 80094d6:	f7ff ff7d 	bl	80093d4 <std>
 80094da:	68e0      	ldr	r0, [r4, #12]
 80094dc:	2202      	movs	r2, #2
 80094de:	2112      	movs	r1, #18
 80094e0:	f7ff ff78 	bl	80093d4 <std>
 80094e4:	2301      	movs	r3, #1
 80094e6:	61a3      	str	r3, [r4, #24]
 80094e8:	e7d2      	b.n	8009490 <__sinit+0xc>
 80094ea:	bf00      	nop
 80094ec:	0800a584 	.word	0x0800a584
 80094f0:	0800941d 	.word	0x0800941d

080094f4 <__sfp>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	4607      	mov	r7, r0
 80094f8:	f7ff ffac 	bl	8009454 <__sfp_lock_acquire>
 80094fc:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <__sfp+0x84>)
 80094fe:	681e      	ldr	r6, [r3, #0]
 8009500:	69b3      	ldr	r3, [r6, #24]
 8009502:	b913      	cbnz	r3, 800950a <__sfp+0x16>
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff ffbd 	bl	8009484 <__sinit>
 800950a:	3648      	adds	r6, #72	; 0x48
 800950c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009510:	3b01      	subs	r3, #1
 8009512:	d503      	bpl.n	800951c <__sfp+0x28>
 8009514:	6833      	ldr	r3, [r6, #0]
 8009516:	b30b      	cbz	r3, 800955c <__sfp+0x68>
 8009518:	6836      	ldr	r6, [r6, #0]
 800951a:	e7f7      	b.n	800950c <__sfp+0x18>
 800951c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009520:	b9d5      	cbnz	r5, 8009558 <__sfp+0x64>
 8009522:	4b16      	ldr	r3, [pc, #88]	; (800957c <__sfp+0x88>)
 8009524:	60e3      	str	r3, [r4, #12]
 8009526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800952a:	6665      	str	r5, [r4, #100]	; 0x64
 800952c:	f000 f847 	bl	80095be <__retarget_lock_init_recursive>
 8009530:	f7ff ff96 	bl	8009460 <__sfp_lock_release>
 8009534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800953c:	6025      	str	r5, [r4, #0]
 800953e:	61a5      	str	r5, [r4, #24]
 8009540:	2208      	movs	r2, #8
 8009542:	4629      	mov	r1, r5
 8009544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009548:	f7ff fd2c 	bl	8008fa4 <memset>
 800954c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009554:	4620      	mov	r0, r4
 8009556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009558:	3468      	adds	r4, #104	; 0x68
 800955a:	e7d9      	b.n	8009510 <__sfp+0x1c>
 800955c:	2104      	movs	r1, #4
 800955e:	4638      	mov	r0, r7
 8009560:	f7ff ff62 	bl	8009428 <__sfmoreglue>
 8009564:	4604      	mov	r4, r0
 8009566:	6030      	str	r0, [r6, #0]
 8009568:	2800      	cmp	r0, #0
 800956a:	d1d5      	bne.n	8009518 <__sfp+0x24>
 800956c:	f7ff ff78 	bl	8009460 <__sfp_lock_release>
 8009570:	230c      	movs	r3, #12
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	e7ee      	b.n	8009554 <__sfp+0x60>
 8009576:	bf00      	nop
 8009578:	0800a584 	.word	0x0800a584
 800957c:	ffff0001 	.word	0xffff0001

08009580 <_fwalk_reent>:
 8009580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009584:	4606      	mov	r6, r0
 8009586:	4688      	mov	r8, r1
 8009588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800958c:	2700      	movs	r7, #0
 800958e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009592:	f1b9 0901 	subs.w	r9, r9, #1
 8009596:	d505      	bpl.n	80095a4 <_fwalk_reent+0x24>
 8009598:	6824      	ldr	r4, [r4, #0]
 800959a:	2c00      	cmp	r4, #0
 800959c:	d1f7      	bne.n	800958e <_fwalk_reent+0xe>
 800959e:	4638      	mov	r0, r7
 80095a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a4:	89ab      	ldrh	r3, [r5, #12]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d907      	bls.n	80095ba <_fwalk_reent+0x3a>
 80095aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095ae:	3301      	adds	r3, #1
 80095b0:	d003      	beq.n	80095ba <_fwalk_reent+0x3a>
 80095b2:	4629      	mov	r1, r5
 80095b4:	4630      	mov	r0, r6
 80095b6:	47c0      	blx	r8
 80095b8:	4307      	orrs	r7, r0
 80095ba:	3568      	adds	r5, #104	; 0x68
 80095bc:	e7e9      	b.n	8009592 <_fwalk_reent+0x12>

080095be <__retarget_lock_init_recursive>:
 80095be:	4770      	bx	lr

080095c0 <__retarget_lock_acquire_recursive>:
 80095c0:	4770      	bx	lr

080095c2 <__retarget_lock_release_recursive>:
 80095c2:	4770      	bx	lr

080095c4 <__swhatbuf_r>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	460e      	mov	r6, r1
 80095c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095cc:	2900      	cmp	r1, #0
 80095ce:	b096      	sub	sp, #88	; 0x58
 80095d0:	4614      	mov	r4, r2
 80095d2:	461d      	mov	r5, r3
 80095d4:	da08      	bge.n	80095e8 <__swhatbuf_r+0x24>
 80095d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	061a      	lsls	r2, r3, #24
 80095e0:	d410      	bmi.n	8009604 <__swhatbuf_r+0x40>
 80095e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e6:	e00e      	b.n	8009606 <__swhatbuf_r+0x42>
 80095e8:	466a      	mov	r2, sp
 80095ea:	f000 fc95 	bl	8009f18 <_fstat_r>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	dbf1      	blt.n	80095d6 <__swhatbuf_r+0x12>
 80095f2:	9a01      	ldr	r2, [sp, #4]
 80095f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095fc:	425a      	negs	r2, r3
 80095fe:	415a      	adcs	r2, r3
 8009600:	602a      	str	r2, [r5, #0]
 8009602:	e7ee      	b.n	80095e2 <__swhatbuf_r+0x1e>
 8009604:	2340      	movs	r3, #64	; 0x40
 8009606:	2000      	movs	r0, #0
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	b016      	add	sp, #88	; 0x58
 800960c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009610 <__smakebuf_r>:
 8009610:	898b      	ldrh	r3, [r1, #12]
 8009612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009614:	079d      	lsls	r5, r3, #30
 8009616:	4606      	mov	r6, r0
 8009618:	460c      	mov	r4, r1
 800961a:	d507      	bpl.n	800962c <__smakebuf_r+0x1c>
 800961c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	6123      	str	r3, [r4, #16]
 8009624:	2301      	movs	r3, #1
 8009626:	6163      	str	r3, [r4, #20]
 8009628:	b002      	add	sp, #8
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	ab01      	add	r3, sp, #4
 800962e:	466a      	mov	r2, sp
 8009630:	f7ff ffc8 	bl	80095c4 <__swhatbuf_r>
 8009634:	9900      	ldr	r1, [sp, #0]
 8009636:	4605      	mov	r5, r0
 8009638:	4630      	mov	r0, r6
 800963a:	f000 f895 	bl	8009768 <_malloc_r>
 800963e:	b948      	cbnz	r0, 8009654 <__smakebuf_r+0x44>
 8009640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009644:	059a      	lsls	r2, r3, #22
 8009646:	d4ef      	bmi.n	8009628 <__smakebuf_r+0x18>
 8009648:	f023 0303 	bic.w	r3, r3, #3
 800964c:	f043 0302 	orr.w	r3, r3, #2
 8009650:	81a3      	strh	r3, [r4, #12]
 8009652:	e7e3      	b.n	800961c <__smakebuf_r+0xc>
 8009654:	4b0d      	ldr	r3, [pc, #52]	; (800968c <__smakebuf_r+0x7c>)
 8009656:	62b3      	str	r3, [r6, #40]	; 0x28
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	6020      	str	r0, [r4, #0]
 800965c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	6163      	str	r3, [r4, #20]
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	6120      	str	r0, [r4, #16]
 800966a:	b15b      	cbz	r3, 8009684 <__smakebuf_r+0x74>
 800966c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fc63 	bl	8009f3c <_isatty_r>
 8009676:	b128      	cbz	r0, 8009684 <__smakebuf_r+0x74>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	89a0      	ldrh	r0, [r4, #12]
 8009686:	4305      	orrs	r5, r0
 8009688:	81a5      	strh	r5, [r4, #12]
 800968a:	e7cd      	b.n	8009628 <__smakebuf_r+0x18>
 800968c:	0800941d 	.word	0x0800941d

08009690 <_free_r>:
 8009690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009692:	2900      	cmp	r1, #0
 8009694:	d044      	beq.n	8009720 <_free_r+0x90>
 8009696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800969a:	9001      	str	r0, [sp, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f1a1 0404 	sub.w	r4, r1, #4
 80096a2:	bfb8      	it	lt
 80096a4:	18e4      	addlt	r4, r4, r3
 80096a6:	f000 fc6b 	bl	8009f80 <__malloc_lock>
 80096aa:	4a1e      	ldr	r2, [pc, #120]	; (8009724 <_free_r+0x94>)
 80096ac:	9801      	ldr	r0, [sp, #4]
 80096ae:	6813      	ldr	r3, [r2, #0]
 80096b0:	b933      	cbnz	r3, 80096c0 <_free_r+0x30>
 80096b2:	6063      	str	r3, [r4, #4]
 80096b4:	6014      	str	r4, [r2, #0]
 80096b6:	b003      	add	sp, #12
 80096b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096bc:	f000 bc66 	b.w	8009f8c <__malloc_unlock>
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	d908      	bls.n	80096d6 <_free_r+0x46>
 80096c4:	6825      	ldr	r5, [r4, #0]
 80096c6:	1961      	adds	r1, r4, r5
 80096c8:	428b      	cmp	r3, r1
 80096ca:	bf01      	itttt	eq
 80096cc:	6819      	ldreq	r1, [r3, #0]
 80096ce:	685b      	ldreq	r3, [r3, #4]
 80096d0:	1949      	addeq	r1, r1, r5
 80096d2:	6021      	streq	r1, [r4, #0]
 80096d4:	e7ed      	b.n	80096b2 <_free_r+0x22>
 80096d6:	461a      	mov	r2, r3
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	b10b      	cbz	r3, 80096e0 <_free_r+0x50>
 80096dc:	42a3      	cmp	r3, r4
 80096de:	d9fa      	bls.n	80096d6 <_free_r+0x46>
 80096e0:	6811      	ldr	r1, [r2, #0]
 80096e2:	1855      	adds	r5, r2, r1
 80096e4:	42a5      	cmp	r5, r4
 80096e6:	d10b      	bne.n	8009700 <_free_r+0x70>
 80096e8:	6824      	ldr	r4, [r4, #0]
 80096ea:	4421      	add	r1, r4
 80096ec:	1854      	adds	r4, r2, r1
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	6011      	str	r1, [r2, #0]
 80096f2:	d1e0      	bne.n	80096b6 <_free_r+0x26>
 80096f4:	681c      	ldr	r4, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	6053      	str	r3, [r2, #4]
 80096fa:	4421      	add	r1, r4
 80096fc:	6011      	str	r1, [r2, #0]
 80096fe:	e7da      	b.n	80096b6 <_free_r+0x26>
 8009700:	d902      	bls.n	8009708 <_free_r+0x78>
 8009702:	230c      	movs	r3, #12
 8009704:	6003      	str	r3, [r0, #0]
 8009706:	e7d6      	b.n	80096b6 <_free_r+0x26>
 8009708:	6825      	ldr	r5, [r4, #0]
 800970a:	1961      	adds	r1, r4, r5
 800970c:	428b      	cmp	r3, r1
 800970e:	bf04      	itt	eq
 8009710:	6819      	ldreq	r1, [r3, #0]
 8009712:	685b      	ldreq	r3, [r3, #4]
 8009714:	6063      	str	r3, [r4, #4]
 8009716:	bf04      	itt	eq
 8009718:	1949      	addeq	r1, r1, r5
 800971a:	6021      	streq	r1, [r4, #0]
 800971c:	6054      	str	r4, [r2, #4]
 800971e:	e7ca      	b.n	80096b6 <_free_r+0x26>
 8009720:	b003      	add	sp, #12
 8009722:	bd30      	pop	{r4, r5, pc}
 8009724:	20002a90 	.word	0x20002a90

08009728 <sbrk_aligned>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	4e0e      	ldr	r6, [pc, #56]	; (8009764 <sbrk_aligned+0x3c>)
 800972c:	460c      	mov	r4, r1
 800972e:	6831      	ldr	r1, [r6, #0]
 8009730:	4605      	mov	r5, r0
 8009732:	b911      	cbnz	r1, 800973a <sbrk_aligned+0x12>
 8009734:	f000 fb7a 	bl	8009e2c <_sbrk_r>
 8009738:	6030      	str	r0, [r6, #0]
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	f000 fb75 	bl	8009e2c <_sbrk_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d00a      	beq.n	800975c <sbrk_aligned+0x34>
 8009746:	1cc4      	adds	r4, r0, #3
 8009748:	f024 0403 	bic.w	r4, r4, #3
 800974c:	42a0      	cmp	r0, r4
 800974e:	d007      	beq.n	8009760 <sbrk_aligned+0x38>
 8009750:	1a21      	subs	r1, r4, r0
 8009752:	4628      	mov	r0, r5
 8009754:	f000 fb6a 	bl	8009e2c <_sbrk_r>
 8009758:	3001      	adds	r0, #1
 800975a:	d101      	bne.n	8009760 <sbrk_aligned+0x38>
 800975c:	f04f 34ff 	mov.w	r4, #4294967295
 8009760:	4620      	mov	r0, r4
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	20002a94 	.word	0x20002a94

08009768 <_malloc_r>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	1ccd      	adds	r5, r1, #3
 800976e:	f025 0503 	bic.w	r5, r5, #3
 8009772:	3508      	adds	r5, #8
 8009774:	2d0c      	cmp	r5, #12
 8009776:	bf38      	it	cc
 8009778:	250c      	movcc	r5, #12
 800977a:	2d00      	cmp	r5, #0
 800977c:	4607      	mov	r7, r0
 800977e:	db01      	blt.n	8009784 <_malloc_r+0x1c>
 8009780:	42a9      	cmp	r1, r5
 8009782:	d905      	bls.n	8009790 <_malloc_r+0x28>
 8009784:	230c      	movs	r3, #12
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	2600      	movs	r6, #0
 800978a:	4630      	mov	r0, r6
 800978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009790:	4e2e      	ldr	r6, [pc, #184]	; (800984c <_malloc_r+0xe4>)
 8009792:	f000 fbf5 	bl	8009f80 <__malloc_lock>
 8009796:	6833      	ldr	r3, [r6, #0]
 8009798:	461c      	mov	r4, r3
 800979a:	bb34      	cbnz	r4, 80097ea <_malloc_r+0x82>
 800979c:	4629      	mov	r1, r5
 800979e:	4638      	mov	r0, r7
 80097a0:	f7ff ffc2 	bl	8009728 <sbrk_aligned>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	4604      	mov	r4, r0
 80097a8:	d14d      	bne.n	8009846 <_malloc_r+0xde>
 80097aa:	6834      	ldr	r4, [r6, #0]
 80097ac:	4626      	mov	r6, r4
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	d140      	bne.n	8009834 <_malloc_r+0xcc>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	4631      	mov	r1, r6
 80097b6:	4638      	mov	r0, r7
 80097b8:	eb04 0803 	add.w	r8, r4, r3
 80097bc:	f000 fb36 	bl	8009e2c <_sbrk_r>
 80097c0:	4580      	cmp	r8, r0
 80097c2:	d13a      	bne.n	800983a <_malloc_r+0xd2>
 80097c4:	6821      	ldr	r1, [r4, #0]
 80097c6:	3503      	adds	r5, #3
 80097c8:	1a6d      	subs	r5, r5, r1
 80097ca:	f025 0503 	bic.w	r5, r5, #3
 80097ce:	3508      	adds	r5, #8
 80097d0:	2d0c      	cmp	r5, #12
 80097d2:	bf38      	it	cc
 80097d4:	250c      	movcc	r5, #12
 80097d6:	4629      	mov	r1, r5
 80097d8:	4638      	mov	r0, r7
 80097da:	f7ff ffa5 	bl	8009728 <sbrk_aligned>
 80097de:	3001      	adds	r0, #1
 80097e0:	d02b      	beq.n	800983a <_malloc_r+0xd2>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	442b      	add	r3, r5
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	e00e      	b.n	8009808 <_malloc_r+0xa0>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	1b52      	subs	r2, r2, r5
 80097ee:	d41e      	bmi.n	800982e <_malloc_r+0xc6>
 80097f0:	2a0b      	cmp	r2, #11
 80097f2:	d916      	bls.n	8009822 <_malloc_r+0xba>
 80097f4:	1961      	adds	r1, r4, r5
 80097f6:	42a3      	cmp	r3, r4
 80097f8:	6025      	str	r5, [r4, #0]
 80097fa:	bf18      	it	ne
 80097fc:	6059      	strne	r1, [r3, #4]
 80097fe:	6863      	ldr	r3, [r4, #4]
 8009800:	bf08      	it	eq
 8009802:	6031      	streq	r1, [r6, #0]
 8009804:	5162      	str	r2, [r4, r5]
 8009806:	604b      	str	r3, [r1, #4]
 8009808:	4638      	mov	r0, r7
 800980a:	f104 060b 	add.w	r6, r4, #11
 800980e:	f000 fbbd 	bl	8009f8c <__malloc_unlock>
 8009812:	f026 0607 	bic.w	r6, r6, #7
 8009816:	1d23      	adds	r3, r4, #4
 8009818:	1af2      	subs	r2, r6, r3
 800981a:	d0b6      	beq.n	800978a <_malloc_r+0x22>
 800981c:	1b9b      	subs	r3, r3, r6
 800981e:	50a3      	str	r3, [r4, r2]
 8009820:	e7b3      	b.n	800978a <_malloc_r+0x22>
 8009822:	6862      	ldr	r2, [r4, #4]
 8009824:	42a3      	cmp	r3, r4
 8009826:	bf0c      	ite	eq
 8009828:	6032      	streq	r2, [r6, #0]
 800982a:	605a      	strne	r2, [r3, #4]
 800982c:	e7ec      	b.n	8009808 <_malloc_r+0xa0>
 800982e:	4623      	mov	r3, r4
 8009830:	6864      	ldr	r4, [r4, #4]
 8009832:	e7b2      	b.n	800979a <_malloc_r+0x32>
 8009834:	4634      	mov	r4, r6
 8009836:	6876      	ldr	r6, [r6, #4]
 8009838:	e7b9      	b.n	80097ae <_malloc_r+0x46>
 800983a:	230c      	movs	r3, #12
 800983c:	603b      	str	r3, [r7, #0]
 800983e:	4638      	mov	r0, r7
 8009840:	f000 fba4 	bl	8009f8c <__malloc_unlock>
 8009844:	e7a1      	b.n	800978a <_malloc_r+0x22>
 8009846:	6025      	str	r5, [r4, #0]
 8009848:	e7de      	b.n	8009808 <_malloc_r+0xa0>
 800984a:	bf00      	nop
 800984c:	20002a90 	.word	0x20002a90

08009850 <__sfputc_r>:
 8009850:	6893      	ldr	r3, [r2, #8]
 8009852:	3b01      	subs	r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	b410      	push	{r4}
 8009858:	6093      	str	r3, [r2, #8]
 800985a:	da08      	bge.n	800986e <__sfputc_r+0x1e>
 800985c:	6994      	ldr	r4, [r2, #24]
 800985e:	42a3      	cmp	r3, r4
 8009860:	db01      	blt.n	8009866 <__sfputc_r+0x16>
 8009862:	290a      	cmp	r1, #10
 8009864:	d103      	bne.n	800986e <__sfputc_r+0x1e>
 8009866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800986a:	f7ff bc31 	b.w	80090d0 <__swbuf_r>
 800986e:	6813      	ldr	r3, [r2, #0]
 8009870:	1c58      	adds	r0, r3, #1
 8009872:	6010      	str	r0, [r2, #0]
 8009874:	7019      	strb	r1, [r3, #0]
 8009876:	4608      	mov	r0, r1
 8009878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800987c:	4770      	bx	lr

0800987e <__sfputs_r>:
 800987e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009880:	4606      	mov	r6, r0
 8009882:	460f      	mov	r7, r1
 8009884:	4614      	mov	r4, r2
 8009886:	18d5      	adds	r5, r2, r3
 8009888:	42ac      	cmp	r4, r5
 800988a:	d101      	bne.n	8009890 <__sfputs_r+0x12>
 800988c:	2000      	movs	r0, #0
 800988e:	e007      	b.n	80098a0 <__sfputs_r+0x22>
 8009890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009894:	463a      	mov	r2, r7
 8009896:	4630      	mov	r0, r6
 8009898:	f7ff ffda 	bl	8009850 <__sfputc_r>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	d1f3      	bne.n	8009888 <__sfputs_r+0xa>
 80098a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098a4 <_vfiprintf_r>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	460d      	mov	r5, r1
 80098aa:	b09d      	sub	sp, #116	; 0x74
 80098ac:	4614      	mov	r4, r2
 80098ae:	4698      	mov	r8, r3
 80098b0:	4606      	mov	r6, r0
 80098b2:	b118      	cbz	r0, 80098bc <_vfiprintf_r+0x18>
 80098b4:	6983      	ldr	r3, [r0, #24]
 80098b6:	b90b      	cbnz	r3, 80098bc <_vfiprintf_r+0x18>
 80098b8:	f7ff fde4 	bl	8009484 <__sinit>
 80098bc:	4b89      	ldr	r3, [pc, #548]	; (8009ae4 <_vfiprintf_r+0x240>)
 80098be:	429d      	cmp	r5, r3
 80098c0:	d11b      	bne.n	80098fa <_vfiprintf_r+0x56>
 80098c2:	6875      	ldr	r5, [r6, #4]
 80098c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c6:	07d9      	lsls	r1, r3, #31
 80098c8:	d405      	bmi.n	80098d6 <_vfiprintf_r+0x32>
 80098ca:	89ab      	ldrh	r3, [r5, #12]
 80098cc:	059a      	lsls	r2, r3, #22
 80098ce:	d402      	bmi.n	80098d6 <_vfiprintf_r+0x32>
 80098d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098d2:	f7ff fe75 	bl	80095c0 <__retarget_lock_acquire_recursive>
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	071b      	lsls	r3, r3, #28
 80098da:	d501      	bpl.n	80098e0 <_vfiprintf_r+0x3c>
 80098dc:	692b      	ldr	r3, [r5, #16]
 80098de:	b9eb      	cbnz	r3, 800991c <_vfiprintf_r+0x78>
 80098e0:	4629      	mov	r1, r5
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7ff fc46 	bl	8009174 <__swsetup_r>
 80098e8:	b1c0      	cbz	r0, 800991c <_vfiprintf_r+0x78>
 80098ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ec:	07dc      	lsls	r4, r3, #31
 80098ee:	d50e      	bpl.n	800990e <_vfiprintf_r+0x6a>
 80098f0:	f04f 30ff 	mov.w	r0, #4294967295
 80098f4:	b01d      	add	sp, #116	; 0x74
 80098f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fa:	4b7b      	ldr	r3, [pc, #492]	; (8009ae8 <_vfiprintf_r+0x244>)
 80098fc:	429d      	cmp	r5, r3
 80098fe:	d101      	bne.n	8009904 <_vfiprintf_r+0x60>
 8009900:	68b5      	ldr	r5, [r6, #8]
 8009902:	e7df      	b.n	80098c4 <_vfiprintf_r+0x20>
 8009904:	4b79      	ldr	r3, [pc, #484]	; (8009aec <_vfiprintf_r+0x248>)
 8009906:	429d      	cmp	r5, r3
 8009908:	bf08      	it	eq
 800990a:	68f5      	ldreq	r5, [r6, #12]
 800990c:	e7da      	b.n	80098c4 <_vfiprintf_r+0x20>
 800990e:	89ab      	ldrh	r3, [r5, #12]
 8009910:	0598      	lsls	r0, r3, #22
 8009912:	d4ed      	bmi.n	80098f0 <_vfiprintf_r+0x4c>
 8009914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009916:	f7ff fe54 	bl	80095c2 <__retarget_lock_release_recursive>
 800991a:	e7e9      	b.n	80098f0 <_vfiprintf_r+0x4c>
 800991c:	2300      	movs	r3, #0
 800991e:	9309      	str	r3, [sp, #36]	; 0x24
 8009920:	2320      	movs	r3, #32
 8009922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009926:	f8cd 800c 	str.w	r8, [sp, #12]
 800992a:	2330      	movs	r3, #48	; 0x30
 800992c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009af0 <_vfiprintf_r+0x24c>
 8009930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009934:	f04f 0901 	mov.w	r9, #1
 8009938:	4623      	mov	r3, r4
 800993a:	469a      	mov	sl, r3
 800993c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009940:	b10a      	cbz	r2, 8009946 <_vfiprintf_r+0xa2>
 8009942:	2a25      	cmp	r2, #37	; 0x25
 8009944:	d1f9      	bne.n	800993a <_vfiprintf_r+0x96>
 8009946:	ebba 0b04 	subs.w	fp, sl, r4
 800994a:	d00b      	beq.n	8009964 <_vfiprintf_r+0xc0>
 800994c:	465b      	mov	r3, fp
 800994e:	4622      	mov	r2, r4
 8009950:	4629      	mov	r1, r5
 8009952:	4630      	mov	r0, r6
 8009954:	f7ff ff93 	bl	800987e <__sfputs_r>
 8009958:	3001      	adds	r0, #1
 800995a:	f000 80aa 	beq.w	8009ab2 <_vfiprintf_r+0x20e>
 800995e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009960:	445a      	add	r2, fp
 8009962:	9209      	str	r2, [sp, #36]	; 0x24
 8009964:	f89a 3000 	ldrb.w	r3, [sl]
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 80a2 	beq.w	8009ab2 <_vfiprintf_r+0x20e>
 800996e:	2300      	movs	r3, #0
 8009970:	f04f 32ff 	mov.w	r2, #4294967295
 8009974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009978:	f10a 0a01 	add.w	sl, sl, #1
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009984:	931a      	str	r3, [sp, #104]	; 0x68
 8009986:	4654      	mov	r4, sl
 8009988:	2205      	movs	r2, #5
 800998a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998e:	4858      	ldr	r0, [pc, #352]	; (8009af0 <_vfiprintf_r+0x24c>)
 8009990:	f7f6 fc1e 	bl	80001d0 <memchr>
 8009994:	9a04      	ldr	r2, [sp, #16]
 8009996:	b9d8      	cbnz	r0, 80099d0 <_vfiprintf_r+0x12c>
 8009998:	06d1      	lsls	r1, r2, #27
 800999a:	bf44      	itt	mi
 800999c:	2320      	movmi	r3, #32
 800999e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a2:	0713      	lsls	r3, r2, #28
 80099a4:	bf44      	itt	mi
 80099a6:	232b      	movmi	r3, #43	; 0x2b
 80099a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ac:	f89a 3000 	ldrb.w	r3, [sl]
 80099b0:	2b2a      	cmp	r3, #42	; 0x2a
 80099b2:	d015      	beq.n	80099e0 <_vfiprintf_r+0x13c>
 80099b4:	9a07      	ldr	r2, [sp, #28]
 80099b6:	4654      	mov	r4, sl
 80099b8:	2000      	movs	r0, #0
 80099ba:	f04f 0c0a 	mov.w	ip, #10
 80099be:	4621      	mov	r1, r4
 80099c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c4:	3b30      	subs	r3, #48	; 0x30
 80099c6:	2b09      	cmp	r3, #9
 80099c8:	d94e      	bls.n	8009a68 <_vfiprintf_r+0x1c4>
 80099ca:	b1b0      	cbz	r0, 80099fa <_vfiprintf_r+0x156>
 80099cc:	9207      	str	r2, [sp, #28]
 80099ce:	e014      	b.n	80099fa <_vfiprintf_r+0x156>
 80099d0:	eba0 0308 	sub.w	r3, r0, r8
 80099d4:	fa09 f303 	lsl.w	r3, r9, r3
 80099d8:	4313      	orrs	r3, r2
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	46a2      	mov	sl, r4
 80099de:	e7d2      	b.n	8009986 <_vfiprintf_r+0xe2>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	1d19      	adds	r1, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	9103      	str	r1, [sp, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfbb      	ittet	lt
 80099ec:	425b      	neglt	r3, r3
 80099ee:	f042 0202 	orrlt.w	r2, r2, #2
 80099f2:	9307      	strge	r3, [sp, #28]
 80099f4:	9307      	strlt	r3, [sp, #28]
 80099f6:	bfb8      	it	lt
 80099f8:	9204      	strlt	r2, [sp, #16]
 80099fa:	7823      	ldrb	r3, [r4, #0]
 80099fc:	2b2e      	cmp	r3, #46	; 0x2e
 80099fe:	d10c      	bne.n	8009a1a <_vfiprintf_r+0x176>
 8009a00:	7863      	ldrb	r3, [r4, #1]
 8009a02:	2b2a      	cmp	r3, #42	; 0x2a
 8009a04:	d135      	bne.n	8009a72 <_vfiprintf_r+0x1ce>
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	1d1a      	adds	r2, r3, #4
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	9203      	str	r2, [sp, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	bfb8      	it	lt
 8009a12:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a16:	3402      	adds	r4, #2
 8009a18:	9305      	str	r3, [sp, #20]
 8009a1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b00 <_vfiprintf_r+0x25c>
 8009a1e:	7821      	ldrb	r1, [r4, #0]
 8009a20:	2203      	movs	r2, #3
 8009a22:	4650      	mov	r0, sl
 8009a24:	f7f6 fbd4 	bl	80001d0 <memchr>
 8009a28:	b140      	cbz	r0, 8009a3c <_vfiprintf_r+0x198>
 8009a2a:	2340      	movs	r3, #64	; 0x40
 8009a2c:	eba0 000a 	sub.w	r0, r0, sl
 8009a30:	fa03 f000 	lsl.w	r0, r3, r0
 8009a34:	9b04      	ldr	r3, [sp, #16]
 8009a36:	4303      	orrs	r3, r0
 8009a38:	3401      	adds	r4, #1
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a40:	482c      	ldr	r0, [pc, #176]	; (8009af4 <_vfiprintf_r+0x250>)
 8009a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a46:	2206      	movs	r2, #6
 8009a48:	f7f6 fbc2 	bl	80001d0 <memchr>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d03f      	beq.n	8009ad0 <_vfiprintf_r+0x22c>
 8009a50:	4b29      	ldr	r3, [pc, #164]	; (8009af8 <_vfiprintf_r+0x254>)
 8009a52:	bb1b      	cbnz	r3, 8009a9c <_vfiprintf_r+0x1f8>
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	3307      	adds	r3, #7
 8009a58:	f023 0307 	bic.w	r3, r3, #7
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	9303      	str	r3, [sp, #12]
 8009a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a62:	443b      	add	r3, r7
 8009a64:	9309      	str	r3, [sp, #36]	; 0x24
 8009a66:	e767      	b.n	8009938 <_vfiprintf_r+0x94>
 8009a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	2001      	movs	r0, #1
 8009a70:	e7a5      	b.n	80099be <_vfiprintf_r+0x11a>
 8009a72:	2300      	movs	r3, #0
 8009a74:	3401      	adds	r4, #1
 8009a76:	9305      	str	r3, [sp, #20]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f04f 0c0a 	mov.w	ip, #10
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a84:	3a30      	subs	r2, #48	; 0x30
 8009a86:	2a09      	cmp	r2, #9
 8009a88:	d903      	bls.n	8009a92 <_vfiprintf_r+0x1ee>
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0c5      	beq.n	8009a1a <_vfiprintf_r+0x176>
 8009a8e:	9105      	str	r1, [sp, #20]
 8009a90:	e7c3      	b.n	8009a1a <_vfiprintf_r+0x176>
 8009a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a96:	4604      	mov	r4, r0
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e7f0      	b.n	8009a7e <_vfiprintf_r+0x1da>
 8009a9c:	ab03      	add	r3, sp, #12
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	4b16      	ldr	r3, [pc, #88]	; (8009afc <_vfiprintf_r+0x258>)
 8009aa4:	a904      	add	r1, sp, #16
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f3af 8000 	nop.w
 8009aac:	4607      	mov	r7, r0
 8009aae:	1c78      	adds	r0, r7, #1
 8009ab0:	d1d6      	bne.n	8009a60 <_vfiprintf_r+0x1bc>
 8009ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ab4:	07d9      	lsls	r1, r3, #31
 8009ab6:	d405      	bmi.n	8009ac4 <_vfiprintf_r+0x220>
 8009ab8:	89ab      	ldrh	r3, [r5, #12]
 8009aba:	059a      	lsls	r2, r3, #22
 8009abc:	d402      	bmi.n	8009ac4 <_vfiprintf_r+0x220>
 8009abe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ac0:	f7ff fd7f 	bl	80095c2 <__retarget_lock_release_recursive>
 8009ac4:	89ab      	ldrh	r3, [r5, #12]
 8009ac6:	065b      	lsls	r3, r3, #25
 8009ac8:	f53f af12 	bmi.w	80098f0 <_vfiprintf_r+0x4c>
 8009acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ace:	e711      	b.n	80098f4 <_vfiprintf_r+0x50>
 8009ad0:	ab03      	add	r3, sp, #12
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4b09      	ldr	r3, [pc, #36]	; (8009afc <_vfiprintf_r+0x258>)
 8009ad8:	a904      	add	r1, sp, #16
 8009ada:	4630      	mov	r0, r6
 8009adc:	f000 f880 	bl	8009be0 <_printf_i>
 8009ae0:	e7e4      	b.n	8009aac <_vfiprintf_r+0x208>
 8009ae2:	bf00      	nop
 8009ae4:	0800a5a8 	.word	0x0800a5a8
 8009ae8:	0800a5c8 	.word	0x0800a5c8
 8009aec:	0800a588 	.word	0x0800a588
 8009af0:	0800a5e8 	.word	0x0800a5e8
 8009af4:	0800a5f2 	.word	0x0800a5f2
 8009af8:	00000000 	.word	0x00000000
 8009afc:	0800987f 	.word	0x0800987f
 8009b00:	0800a5ee 	.word	0x0800a5ee

08009b04 <_printf_common>:
 8009b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b08:	4616      	mov	r6, r2
 8009b0a:	4699      	mov	r9, r3
 8009b0c:	688a      	ldr	r2, [r1, #8]
 8009b0e:	690b      	ldr	r3, [r1, #16]
 8009b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b14:	4293      	cmp	r3, r2
 8009b16:	bfb8      	it	lt
 8009b18:	4613      	movlt	r3, r2
 8009b1a:	6033      	str	r3, [r6, #0]
 8009b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b20:	4607      	mov	r7, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	b10a      	cbz	r2, 8009b2a <_printf_common+0x26>
 8009b26:	3301      	adds	r3, #1
 8009b28:	6033      	str	r3, [r6, #0]
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	0699      	lsls	r1, r3, #26
 8009b2e:	bf42      	ittt	mi
 8009b30:	6833      	ldrmi	r3, [r6, #0]
 8009b32:	3302      	addmi	r3, #2
 8009b34:	6033      	strmi	r3, [r6, #0]
 8009b36:	6825      	ldr	r5, [r4, #0]
 8009b38:	f015 0506 	ands.w	r5, r5, #6
 8009b3c:	d106      	bne.n	8009b4c <_printf_common+0x48>
 8009b3e:	f104 0a19 	add.w	sl, r4, #25
 8009b42:	68e3      	ldr	r3, [r4, #12]
 8009b44:	6832      	ldr	r2, [r6, #0]
 8009b46:	1a9b      	subs	r3, r3, r2
 8009b48:	42ab      	cmp	r3, r5
 8009b4a:	dc26      	bgt.n	8009b9a <_printf_common+0x96>
 8009b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b50:	1e13      	subs	r3, r2, #0
 8009b52:	6822      	ldr	r2, [r4, #0]
 8009b54:	bf18      	it	ne
 8009b56:	2301      	movne	r3, #1
 8009b58:	0692      	lsls	r2, r2, #26
 8009b5a:	d42b      	bmi.n	8009bb4 <_printf_common+0xb0>
 8009b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b60:	4649      	mov	r1, r9
 8009b62:	4638      	mov	r0, r7
 8009b64:	47c0      	blx	r8
 8009b66:	3001      	adds	r0, #1
 8009b68:	d01e      	beq.n	8009ba8 <_printf_common+0xa4>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	68e5      	ldr	r5, [r4, #12]
 8009b6e:	6832      	ldr	r2, [r6, #0]
 8009b70:	f003 0306 	and.w	r3, r3, #6
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	bf08      	it	eq
 8009b78:	1aad      	subeq	r5, r5, r2
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	6922      	ldr	r2, [r4, #16]
 8009b7e:	bf0c      	ite	eq
 8009b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b84:	2500      	movne	r5, #0
 8009b86:	4293      	cmp	r3, r2
 8009b88:	bfc4      	itt	gt
 8009b8a:	1a9b      	subgt	r3, r3, r2
 8009b8c:	18ed      	addgt	r5, r5, r3
 8009b8e:	2600      	movs	r6, #0
 8009b90:	341a      	adds	r4, #26
 8009b92:	42b5      	cmp	r5, r6
 8009b94:	d11a      	bne.n	8009bcc <_printf_common+0xc8>
 8009b96:	2000      	movs	r0, #0
 8009b98:	e008      	b.n	8009bac <_printf_common+0xa8>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4652      	mov	r2, sl
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	47c0      	blx	r8
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d103      	bne.n	8009bb0 <_printf_common+0xac>
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb0:	3501      	adds	r5, #1
 8009bb2:	e7c6      	b.n	8009b42 <_printf_common+0x3e>
 8009bb4:	18e1      	adds	r1, r4, r3
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	2030      	movs	r0, #48	; 0x30
 8009bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bbe:	4422      	add	r2, r4
 8009bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bc8:	3302      	adds	r3, #2
 8009bca:	e7c7      	b.n	8009b5c <_printf_common+0x58>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	4622      	mov	r2, r4
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	47c0      	blx	r8
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	d0e6      	beq.n	8009ba8 <_printf_common+0xa4>
 8009bda:	3601      	adds	r6, #1
 8009bdc:	e7d9      	b.n	8009b92 <_printf_common+0x8e>
	...

08009be0 <_printf_i>:
 8009be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009be4:	7e0f      	ldrb	r7, [r1, #24]
 8009be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009be8:	2f78      	cmp	r7, #120	; 0x78
 8009bea:	4691      	mov	r9, r2
 8009bec:	4680      	mov	r8, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	469a      	mov	sl, r3
 8009bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bf6:	d807      	bhi.n	8009c08 <_printf_i+0x28>
 8009bf8:	2f62      	cmp	r7, #98	; 0x62
 8009bfa:	d80a      	bhi.n	8009c12 <_printf_i+0x32>
 8009bfc:	2f00      	cmp	r7, #0
 8009bfe:	f000 80d8 	beq.w	8009db2 <_printf_i+0x1d2>
 8009c02:	2f58      	cmp	r7, #88	; 0x58
 8009c04:	f000 80a3 	beq.w	8009d4e <_printf_i+0x16e>
 8009c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c10:	e03a      	b.n	8009c88 <_printf_i+0xa8>
 8009c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c16:	2b15      	cmp	r3, #21
 8009c18:	d8f6      	bhi.n	8009c08 <_printf_i+0x28>
 8009c1a:	a101      	add	r1, pc, #4	; (adr r1, 8009c20 <_printf_i+0x40>)
 8009c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c20:	08009c79 	.word	0x08009c79
 8009c24:	08009c8d 	.word	0x08009c8d
 8009c28:	08009c09 	.word	0x08009c09
 8009c2c:	08009c09 	.word	0x08009c09
 8009c30:	08009c09 	.word	0x08009c09
 8009c34:	08009c09 	.word	0x08009c09
 8009c38:	08009c8d 	.word	0x08009c8d
 8009c3c:	08009c09 	.word	0x08009c09
 8009c40:	08009c09 	.word	0x08009c09
 8009c44:	08009c09 	.word	0x08009c09
 8009c48:	08009c09 	.word	0x08009c09
 8009c4c:	08009d99 	.word	0x08009d99
 8009c50:	08009cbd 	.word	0x08009cbd
 8009c54:	08009d7b 	.word	0x08009d7b
 8009c58:	08009c09 	.word	0x08009c09
 8009c5c:	08009c09 	.word	0x08009c09
 8009c60:	08009dbb 	.word	0x08009dbb
 8009c64:	08009c09 	.word	0x08009c09
 8009c68:	08009cbd 	.word	0x08009cbd
 8009c6c:	08009c09 	.word	0x08009c09
 8009c70:	08009c09 	.word	0x08009c09
 8009c74:	08009d83 	.word	0x08009d83
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	1d1a      	adds	r2, r3, #4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	602a      	str	r2, [r5, #0]
 8009c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e0a3      	b.n	8009dd4 <_printf_i+0x1f4>
 8009c8c:	6820      	ldr	r0, [r4, #0]
 8009c8e:	6829      	ldr	r1, [r5, #0]
 8009c90:	0606      	lsls	r6, r0, #24
 8009c92:	f101 0304 	add.w	r3, r1, #4
 8009c96:	d50a      	bpl.n	8009cae <_printf_i+0xce>
 8009c98:	680e      	ldr	r6, [r1, #0]
 8009c9a:	602b      	str	r3, [r5, #0]
 8009c9c:	2e00      	cmp	r6, #0
 8009c9e:	da03      	bge.n	8009ca8 <_printf_i+0xc8>
 8009ca0:	232d      	movs	r3, #45	; 0x2d
 8009ca2:	4276      	negs	r6, r6
 8009ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca8:	485e      	ldr	r0, [pc, #376]	; (8009e24 <_printf_i+0x244>)
 8009caa:	230a      	movs	r3, #10
 8009cac:	e019      	b.n	8009ce2 <_printf_i+0x102>
 8009cae:	680e      	ldr	r6, [r1, #0]
 8009cb0:	602b      	str	r3, [r5, #0]
 8009cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cb6:	bf18      	it	ne
 8009cb8:	b236      	sxthne	r6, r6
 8009cba:	e7ef      	b.n	8009c9c <_printf_i+0xbc>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	6820      	ldr	r0, [r4, #0]
 8009cc0:	1d19      	adds	r1, r3, #4
 8009cc2:	6029      	str	r1, [r5, #0]
 8009cc4:	0601      	lsls	r1, r0, #24
 8009cc6:	d501      	bpl.n	8009ccc <_printf_i+0xec>
 8009cc8:	681e      	ldr	r6, [r3, #0]
 8009cca:	e002      	b.n	8009cd2 <_printf_i+0xf2>
 8009ccc:	0646      	lsls	r6, r0, #25
 8009cce:	d5fb      	bpl.n	8009cc8 <_printf_i+0xe8>
 8009cd0:	881e      	ldrh	r6, [r3, #0]
 8009cd2:	4854      	ldr	r0, [pc, #336]	; (8009e24 <_printf_i+0x244>)
 8009cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8009cd6:	bf0c      	ite	eq
 8009cd8:	2308      	moveq	r3, #8
 8009cda:	230a      	movne	r3, #10
 8009cdc:	2100      	movs	r1, #0
 8009cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ce2:	6865      	ldr	r5, [r4, #4]
 8009ce4:	60a5      	str	r5, [r4, #8]
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	bfa2      	ittt	ge
 8009cea:	6821      	ldrge	r1, [r4, #0]
 8009cec:	f021 0104 	bicge.w	r1, r1, #4
 8009cf0:	6021      	strge	r1, [r4, #0]
 8009cf2:	b90e      	cbnz	r6, 8009cf8 <_printf_i+0x118>
 8009cf4:	2d00      	cmp	r5, #0
 8009cf6:	d04d      	beq.n	8009d94 <_printf_i+0x1b4>
 8009cf8:	4615      	mov	r5, r2
 8009cfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cfe:	fb03 6711 	mls	r7, r3, r1, r6
 8009d02:	5dc7      	ldrb	r7, [r0, r7]
 8009d04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d08:	4637      	mov	r7, r6
 8009d0a:	42bb      	cmp	r3, r7
 8009d0c:	460e      	mov	r6, r1
 8009d0e:	d9f4      	bls.n	8009cfa <_printf_i+0x11a>
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d10b      	bne.n	8009d2c <_printf_i+0x14c>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	07de      	lsls	r6, r3, #31
 8009d18:	d508      	bpl.n	8009d2c <_printf_i+0x14c>
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	6861      	ldr	r1, [r4, #4]
 8009d1e:	4299      	cmp	r1, r3
 8009d20:	bfde      	ittt	le
 8009d22:	2330      	movle	r3, #48	; 0x30
 8009d24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d2c:	1b52      	subs	r2, r2, r5
 8009d2e:	6122      	str	r2, [r4, #16]
 8009d30:	f8cd a000 	str.w	sl, [sp]
 8009d34:	464b      	mov	r3, r9
 8009d36:	aa03      	add	r2, sp, #12
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	f7ff fee2 	bl	8009b04 <_printf_common>
 8009d40:	3001      	adds	r0, #1
 8009d42:	d14c      	bne.n	8009dde <_printf_i+0x1fe>
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295
 8009d48:	b004      	add	sp, #16
 8009d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4e:	4835      	ldr	r0, [pc, #212]	; (8009e24 <_printf_i+0x244>)
 8009d50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d54:	6829      	ldr	r1, [r5, #0]
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d5c:	6029      	str	r1, [r5, #0]
 8009d5e:	061d      	lsls	r5, r3, #24
 8009d60:	d514      	bpl.n	8009d8c <_printf_i+0x1ac>
 8009d62:	07df      	lsls	r7, r3, #31
 8009d64:	bf44      	itt	mi
 8009d66:	f043 0320 	orrmi.w	r3, r3, #32
 8009d6a:	6023      	strmi	r3, [r4, #0]
 8009d6c:	b91e      	cbnz	r6, 8009d76 <_printf_i+0x196>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	f023 0320 	bic.w	r3, r3, #32
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	2310      	movs	r3, #16
 8009d78:	e7b0      	b.n	8009cdc <_printf_i+0xfc>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	f043 0320 	orr.w	r3, r3, #32
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	2378      	movs	r3, #120	; 0x78
 8009d84:	4828      	ldr	r0, [pc, #160]	; (8009e28 <_printf_i+0x248>)
 8009d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d8a:	e7e3      	b.n	8009d54 <_printf_i+0x174>
 8009d8c:	0659      	lsls	r1, r3, #25
 8009d8e:	bf48      	it	mi
 8009d90:	b2b6      	uxthmi	r6, r6
 8009d92:	e7e6      	b.n	8009d62 <_printf_i+0x182>
 8009d94:	4615      	mov	r5, r2
 8009d96:	e7bb      	b.n	8009d10 <_printf_i+0x130>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	6826      	ldr	r6, [r4, #0]
 8009d9c:	6961      	ldr	r1, [r4, #20]
 8009d9e:	1d18      	adds	r0, r3, #4
 8009da0:	6028      	str	r0, [r5, #0]
 8009da2:	0635      	lsls	r5, r6, #24
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	d501      	bpl.n	8009dac <_printf_i+0x1cc>
 8009da8:	6019      	str	r1, [r3, #0]
 8009daa:	e002      	b.n	8009db2 <_printf_i+0x1d2>
 8009dac:	0670      	lsls	r0, r6, #25
 8009dae:	d5fb      	bpl.n	8009da8 <_printf_i+0x1c8>
 8009db0:	8019      	strh	r1, [r3, #0]
 8009db2:	2300      	movs	r3, #0
 8009db4:	6123      	str	r3, [r4, #16]
 8009db6:	4615      	mov	r5, r2
 8009db8:	e7ba      	b.n	8009d30 <_printf_i+0x150>
 8009dba:	682b      	ldr	r3, [r5, #0]
 8009dbc:	1d1a      	adds	r2, r3, #4
 8009dbe:	602a      	str	r2, [r5, #0]
 8009dc0:	681d      	ldr	r5, [r3, #0]
 8009dc2:	6862      	ldr	r2, [r4, #4]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7f6 fa02 	bl	80001d0 <memchr>
 8009dcc:	b108      	cbz	r0, 8009dd2 <_printf_i+0x1f2>
 8009dce:	1b40      	subs	r0, r0, r5
 8009dd0:	6060      	str	r0, [r4, #4]
 8009dd2:	6863      	ldr	r3, [r4, #4]
 8009dd4:	6123      	str	r3, [r4, #16]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ddc:	e7a8      	b.n	8009d30 <_printf_i+0x150>
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	462a      	mov	r2, r5
 8009de2:	4649      	mov	r1, r9
 8009de4:	4640      	mov	r0, r8
 8009de6:	47d0      	blx	sl
 8009de8:	3001      	adds	r0, #1
 8009dea:	d0ab      	beq.n	8009d44 <_printf_i+0x164>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	079b      	lsls	r3, r3, #30
 8009df0:	d413      	bmi.n	8009e1a <_printf_i+0x23a>
 8009df2:	68e0      	ldr	r0, [r4, #12]
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	4298      	cmp	r0, r3
 8009df8:	bfb8      	it	lt
 8009dfa:	4618      	movlt	r0, r3
 8009dfc:	e7a4      	b.n	8009d48 <_printf_i+0x168>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4632      	mov	r2, r6
 8009e02:	4649      	mov	r1, r9
 8009e04:	4640      	mov	r0, r8
 8009e06:	47d0      	blx	sl
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d09b      	beq.n	8009d44 <_printf_i+0x164>
 8009e0c:	3501      	adds	r5, #1
 8009e0e:	68e3      	ldr	r3, [r4, #12]
 8009e10:	9903      	ldr	r1, [sp, #12]
 8009e12:	1a5b      	subs	r3, r3, r1
 8009e14:	42ab      	cmp	r3, r5
 8009e16:	dcf2      	bgt.n	8009dfe <_printf_i+0x21e>
 8009e18:	e7eb      	b.n	8009df2 <_printf_i+0x212>
 8009e1a:	2500      	movs	r5, #0
 8009e1c:	f104 0619 	add.w	r6, r4, #25
 8009e20:	e7f5      	b.n	8009e0e <_printf_i+0x22e>
 8009e22:	bf00      	nop
 8009e24:	0800a5f9 	.word	0x0800a5f9
 8009e28:	0800a60a 	.word	0x0800a60a

08009e2c <_sbrk_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d06      	ldr	r5, [pc, #24]	; (8009e48 <_sbrk_r+0x1c>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7f7 f806 	bl	8000e48 <_sbrk>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_sbrk_r+0x1a>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_sbrk_r+0x1a>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20002a98 	.word	0x20002a98

08009e4c <__sread>:
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	460c      	mov	r4, r1
 8009e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e54:	f000 f8a0 	bl	8009f98 <_read_r>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	bfab      	itete	ge
 8009e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e60:	181b      	addge	r3, r3, r0
 8009e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e66:	bfac      	ite	ge
 8009e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e6a:	81a3      	strhlt	r3, [r4, #12]
 8009e6c:	bd10      	pop	{r4, pc}

08009e6e <__swrite>:
 8009e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e72:	461f      	mov	r7, r3
 8009e74:	898b      	ldrh	r3, [r1, #12]
 8009e76:	05db      	lsls	r3, r3, #23
 8009e78:	4605      	mov	r5, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	4616      	mov	r6, r2
 8009e7e:	d505      	bpl.n	8009e8c <__swrite+0x1e>
 8009e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e84:	2302      	movs	r3, #2
 8009e86:	2200      	movs	r2, #0
 8009e88:	f000 f868 	bl	8009f5c <_lseek_r>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e96:	81a3      	strh	r3, [r4, #12]
 8009e98:	4632      	mov	r2, r6
 8009e9a:	463b      	mov	r3, r7
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea2:	f000 b817 	b.w	8009ed4 <_write_r>

08009ea6 <__sseek>:
 8009ea6:	b510      	push	{r4, lr}
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eae:	f000 f855 	bl	8009f5c <_lseek_r>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	bf15      	itete	ne
 8009eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ec2:	81a3      	strheq	r3, [r4, #12]
 8009ec4:	bf18      	it	ne
 8009ec6:	81a3      	strhne	r3, [r4, #12]
 8009ec8:	bd10      	pop	{r4, pc}

08009eca <__sclose>:
 8009eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ece:	f000 b813 	b.w	8009ef8 <_close_r>
	...

08009ed4 <_write_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	4d07      	ldr	r5, [pc, #28]	; (8009ef4 <_write_r+0x20>)
 8009ed8:	4604      	mov	r4, r0
 8009eda:	4608      	mov	r0, r1
 8009edc:	4611      	mov	r1, r2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	602a      	str	r2, [r5, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	f7f6 fe68 	bl	8000bb8 <_write>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d102      	bne.n	8009ef2 <_write_r+0x1e>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <_write_r+0x1e>
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	20002a98 	.word	0x20002a98

08009ef8 <_close_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4d06      	ldr	r5, [pc, #24]	; (8009f14 <_close_r+0x1c>)
 8009efc:	2300      	movs	r3, #0
 8009efe:	4604      	mov	r4, r0
 8009f00:	4608      	mov	r0, r1
 8009f02:	602b      	str	r3, [r5, #0]
 8009f04:	f7f6 ff6b 	bl	8000dde <_close>
 8009f08:	1c43      	adds	r3, r0, #1
 8009f0a:	d102      	bne.n	8009f12 <_close_r+0x1a>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	b103      	cbz	r3, 8009f12 <_close_r+0x1a>
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	20002a98 	.word	0x20002a98

08009f18 <_fstat_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d07      	ldr	r5, [pc, #28]	; (8009f38 <_fstat_r+0x20>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	4611      	mov	r1, r2
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	f7f6 ff66 	bl	8000df6 <_fstat>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	d102      	bne.n	8009f34 <_fstat_r+0x1c>
 8009f2e:	682b      	ldr	r3, [r5, #0]
 8009f30:	b103      	cbz	r3, 8009f34 <_fstat_r+0x1c>
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	20002a98 	.word	0x20002a98

08009f3c <_isatty_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d06      	ldr	r5, [pc, #24]	; (8009f58 <_isatty_r+0x1c>)
 8009f40:	2300      	movs	r3, #0
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	f7f6 ff65 	bl	8000e16 <_isatty>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_isatty_r+0x1a>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_isatty_r+0x1a>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	20002a98 	.word	0x20002a98

08009f5c <_lseek_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d07      	ldr	r5, [pc, #28]	; (8009f7c <_lseek_r+0x20>)
 8009f60:	4604      	mov	r4, r0
 8009f62:	4608      	mov	r0, r1
 8009f64:	4611      	mov	r1, r2
 8009f66:	2200      	movs	r2, #0
 8009f68:	602a      	str	r2, [r5, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f7f6 ff5e 	bl	8000e2c <_lseek>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_lseek_r+0x1e>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_lseek_r+0x1e>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20002a98 	.word	0x20002a98

08009f80 <__malloc_lock>:
 8009f80:	4801      	ldr	r0, [pc, #4]	; (8009f88 <__malloc_lock+0x8>)
 8009f82:	f7ff bb1d 	b.w	80095c0 <__retarget_lock_acquire_recursive>
 8009f86:	bf00      	nop
 8009f88:	20002a8c 	.word	0x20002a8c

08009f8c <__malloc_unlock>:
 8009f8c:	4801      	ldr	r0, [pc, #4]	; (8009f94 <__malloc_unlock+0x8>)
 8009f8e:	f7ff bb18 	b.w	80095c2 <__retarget_lock_release_recursive>
 8009f92:	bf00      	nop
 8009f94:	20002a8c 	.word	0x20002a8c

08009f98 <_read_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d07      	ldr	r5, [pc, #28]	; (8009fb8 <_read_r+0x20>)
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	602a      	str	r2, [r5, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f7f6 fefc 	bl	8000da4 <_read>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_read_r+0x1e>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_read_r+0x1e>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	20002a98 	.word	0x20002a98

08009fbc <_init>:
 8009fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fbe:	bf00      	nop
 8009fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fc2:	bc08      	pop	{r3}
 8009fc4:	469e      	mov	lr, r3
 8009fc6:	4770      	bx	lr

08009fc8 <_fini>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	bf00      	nop
 8009fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fce:	bc08      	pop	{r3}
 8009fd0:	469e      	mov	lr, r3
 8009fd2:	4770      	bx	lr
