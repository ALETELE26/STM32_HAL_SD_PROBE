
STM32_HAL_SD_PROBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08009f9c  08009f9c  00019f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e0  0800a5e0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5e0  0800a5e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e8  0800a5e8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a5f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00002a14  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20002a9c  20002a9c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cfb  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a7  00000000  00000000  00031db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e58  00000000  00000000  00036050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f91  00000000  00000000  00036ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018733  00000000  00000000  0005be39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0bff  00000000  00000000  0007456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013516b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004648  00000000  00000000  001351bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f84 	.word	0x08009f84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009f84 	.word	0x08009f84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <wavRecorder_reset>:
}Recorder_Control_e;
static volatile Recorder_Control_e recorderControlSM = Recorder_Control_Idle;

//Recorder reset
static void wavRecorder_reset(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  audioAccumSize=0;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <wavRecorder_reset+0x20>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
  recorderWriteBytes=0;
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <wavRecorder_reset+0x24>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
  recorderControlSM = Recorder_Control_Idle;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <wavRecorder_reset+0x28>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20002304 	.word	0x20002304
 8000598:	20000300 	.word	0x20000300
 800059c:	20002338 	.word	0x20002338

080005a0 <wav_recorder_fileCreate>:

/**
 * @brief Create WAV Recording file
 */
bool wav_recorder_fileCreate(const char* filePath)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  //Create WAV Header
  wavHeader.ChunkID = 0x46464952;
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005aa:	4a27      	ldr	r2, [pc, #156]	; (8000648 <wav_recorder_fileCreate+0xa8>)
 80005ac:	601a      	str	r2, [r3, #0]
  wavHeader.FileFormat = 0x45564157;
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <wav_recorder_fileCreate+0xac>)
 80005b2:	609a      	str	r2, [r3, #8]
  wavHeader.SubChunk1ID = 0x20746d66;
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005b6:	4a26      	ldr	r2, [pc, #152]	; (8000650 <wav_recorder_fileCreate+0xb0>)
 80005b8:	60da      	str	r2, [r3, #12]
  wavHeader.SubChunk1Size = 16;             //16-bit
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005bc:	2210      	movs	r2, #16
 80005be:	611a      	str	r2, [r3, #16]
  wavHeader.AudioFormat = 1;                //PCM
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	829a      	strh	r2, [r3, #20]
  wavHeader.NbrChannels = 1;                //Mono
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	82da      	strh	r2, [r3, #22]
  wavHeader.SampleRate = 44100;              //44.1KHz
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005ce:	f64a 4244 	movw	r2, #44100	; 0xac44
 80005d2:	619a      	str	r2, [r3, #24]
  wavHeader.BitPerSample = 16;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005d6:	2210      	movs	r2, #16
 80005d8:	845a      	strh	r2, [r3, #34]	; 0x22
  wavHeader.ByteRate = wavHeader.SampleRate*wavHeader.NbrChannels*wavHeader.BitPerSample/8;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005e0:	8ad2      	ldrh	r2, [r2, #22]
 80005e2:	fb02 f303 	mul.w	r3, r2, r3
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005e8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80005ea:	fb02 f303 	mul.w	r3, r2, r3
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005f2:	61d3      	str	r3, [r2, #28]
  wavHeader.BlockAlign = wavHeader.NbrChannels*wavHeader.BitPerSample/8;
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005f6:	8adb      	ldrh	r3, [r3, #22]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 80005fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	da00      	bge.n	8000608 <wav_recorder_fileCreate+0x68>
 8000606:	3307      	adds	r3, #7
 8000608:	10db      	asrs	r3, r3, #3
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 800060e:	841a      	strh	r2, [r3, #32]
  wavHeader.SubChunk2ID = 0x61746164;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <wav_recorder_fileCreate+0xa4>)
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <wav_recorder_fileCreate+0xb4>)
 8000614:	625a      	str	r2, [r3, #36]	; 0x24

//  wavHeader.SubChunk2Size = 40960*wavHeader.NbrChannels*wavHeader.BitPerSample/8;
//  wavHeader.FileSize = 36 + wavHeader.SubChunk2Size;

  //Open WAV file for Write/Overwrite
  if(f_open(&wavFile, filePath, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8000616:	220a      	movs	r2, #10
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <wav_recorder_fileCreate+0xb8>)
 800061c:	f006 fbd2 	bl	8006dc4 <f_open>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <wav_recorder_fileCreate+0x8a>
  {
    return false;
 8000626:	2300      	movs	r3, #0
 8000628:	e007      	b.n	800063a <wav_recorder_fileCreate+0x9a>
  }
  //Skip Header section (44 Bytes)
  f_lseek(&wavFile, 44);
 800062a:	f04f 022c 	mov.w	r2, #44	; 0x2c
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <wav_recorder_fileCreate+0xb8>)
 8000634:	f007 f983 	bl	800793e <f_lseek>
//  f_write(&wavFile, (uint8_t *)&wavHeader, 44, &recorderWriteBytes);
  return true;
 8000638:	2301      	movs	r3, #1
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000230c 	.word	0x2000230c
 8000648:	46464952 	.word	0x46464952
 800064c:	45564157 	.word	0x45564157
 8000650:	20746d66 	.word	0x20746d66
 8000654:	61746164 	.word	0x61746164
 8000658:	200000a8 	.word	0x200000a8

0800065c <wav_recorder_record>:

/**
 * @brief Start Recording
 */
void wav_recorder_record(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  isFinished = false;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <wav_recorder_record+0x28>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
  wavRecorder_reset();
 8000666:	f7ff ff85 	bl	8000574 <wavRecorder_reset>
  //Start ADC
  WAV_RECORDER_ADC_START();
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <wav_recorder_record+0x2c>)
 8000670:	f007 ff58 	bl	8008524 <adc_MIC_DMA_config>
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <wav_recorder_record+0x30>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <wav_recorder_record+0x30>)
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20002308 	.word	0x20002308
 8000688:	20000304 	.word	0x20000304
 800068c:	40001000 	.word	0x40001000

08000690 <wav_recorder_stop>:

/**
 * @brief Stop Recording
 */
void wav_recorder_stop(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  WAV_RECORDER_ADC_STOP();
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <wav_recorder_stop+0x2c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a08      	ldr	r2, [pc, #32]	; (80006bc <wav_recorder_stop+0x2c>)
 800069a:	f023 0301 	bic.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <wav_recorder_stop+0x30>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <wav_recorder_stop+0x30>)
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
  recorderControlSM = Recorder_Control_EndOfFile;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <wav_recorder_stop+0x34>)
 80006ae:	2203      	movs	r2, #3
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40020008 	.word	0x40020008
 80006c0:	40001000 	.word	0x40001000
 80006c4:	20002338 	.word	0x20002338

080006c8 <wav_recorder_process>:

/**
 * @brief Process WAV
 */
void wav_recorder_process(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  switch(recorderControlSM)
 80006ce:	4b4f      	ldr	r3, [pc, #316]	; (800080c <wav_recorder_process+0x144>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	f200 8094 	bhi.w	8000802 <wav_recorder_process+0x13a>
 80006da:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <wav_recorder_process+0x18>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	08000801 	.word	0x08000801
 80006e4:	080006f1 	.word	0x080006f1
 80006e8:	08000749 	.word	0x08000749
 80006ec:	080007a9 	.word	0x080007a9
  {
  case Recorder_Control_Idle:
    break;

  case Recorder_Control_HalfBuffer:
    recorderWriteBytes=0;
 80006f0:	4b47      	ldr	r3, [pc, #284]	; (8000810 <wav_recorder_process+0x148>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
    for(uint16_t i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	80fb      	strh	r3, [r7, #6]
 80006fa:	e010      	b.n	800071e <wav_recorder_process+0x56>
    {
      audioBuffer[i]= 8*(audioBuffer[i] - 1900); //Remove DC Offset;
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	4a45      	ldr	r2, [pc, #276]	; (8000814 <wav_recorder_process+0x14c>)
 8000700:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000704:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000708:	b29b      	uxth	r3, r3
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	b29a      	uxth	r2, r3
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	b211      	sxth	r1, r2
 8000712:	4a40      	ldr	r2, [pc, #256]	; (8000814 <wav_recorder_process+0x14c>)
 8000714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	3301      	adds	r3, #1
 800071c:	80fb      	strh	r3, [r7, #6]
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000724:	d3ea      	bcc.n	80006fc <wav_recorder_process+0x34>
    }
    f_write(&wavFile, (uint8_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE, &recorderWriteBytes);
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <wav_recorder_process+0x148>)
 8000728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800072c:	4939      	ldr	r1, [pc, #228]	; (8000814 <wav_recorder_process+0x14c>)
 800072e:	483a      	ldr	r0, [pc, #232]	; (8000818 <wav_recorder_process+0x150>)
 8000730:	f006 fe09 	bl	8007346 <f_write>
    audioAccumSize+=AUDIO_BUFFER_SIZE/2;
 8000734:	4b39      	ldr	r3, [pc, #228]	; (800081c <wav_recorder_process+0x154>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800073c:	4a37      	ldr	r2, [pc, #220]	; (800081c <wav_recorder_process+0x154>)
 800073e:	6013      	str	r3, [r2, #0]
    recorderControlSM = Recorder_Control_Idle;
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <wav_recorder_process+0x144>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
    break;
 8000746:	e05c      	b.n	8000802 <wav_recorder_process+0x13a>

  case Recorder_Control_FullBuffer:
    recorderWriteBytes=0;
 8000748:	4b31      	ldr	r3, [pc, #196]	; (8000810 <wav_recorder_process+0x148>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
    for(uint16_t i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 800074e:	2300      	movs	r3, #0
 8000750:	80bb      	strh	r3, [r7, #4]
 8000752:	e014      	b.n	800077e <wav_recorder_process+0xb6>
    {
      audioBuffer[AUDIO_BUFFER_SIZE/2 + i]= 8*(audioBuffer[AUDIO_BUFFER_SIZE/2 + i]-1900); //Remove DC Offset;
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <wav_recorder_process+0x14c>)
 800075c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000760:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000764:	b29b      	uxth	r3, r3
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	b29a      	uxth	r2, r3
 800076a:	88bb      	ldrh	r3, [r7, #4]
 800076c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000770:	b211      	sxth	r1, r2
 8000772:	4a28      	ldr	r2, [pc, #160]	; (8000814 <wav_recorder_process+0x14c>)
 8000774:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000784:	d3e6      	bcc.n	8000754 <wav_recorder_process+0x8c>
    }
    f_write(&wavFile, (uint8_t *)&audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE, &recorderWriteBytes);
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <wav_recorder_process+0x148>)
 8000788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800078c:	4924      	ldr	r1, [pc, #144]	; (8000820 <wav_recorder_process+0x158>)
 800078e:	4822      	ldr	r0, [pc, #136]	; (8000818 <wav_recorder_process+0x150>)
 8000790:	f006 fdd9 	bl	8007346 <f_write>
    audioAccumSize+=AUDIO_BUFFER_SIZE/2;
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <wav_recorder_process+0x154>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800079c:	4a1f      	ldr	r2, [pc, #124]	; (800081c <wav_recorder_process+0x154>)
 800079e:	6013      	str	r3, [r2, #0]
    recorderControlSM = Recorder_Control_Idle;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <wav_recorder_process+0x144>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
    break;
 80007a6:	e02c      	b.n	8000802 <wav_recorder_process+0x13a>

  case Recorder_Control_EndOfFile:
//    f_close(&wavFile);
//    f_open(&wavFile, filePath, FA_WRITE);
    f_rewind(&wavFile);
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	4819      	ldr	r0, [pc, #100]	; (8000818 <wav_recorder_process+0x150>)
 80007b2:	f007 f8c4 	bl	800793e <f_lseek>
    wavHeader.SubChunk2Size = audioAccumSize*wavHeader.NbrChannels*wavHeader.BitPerSample/8;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <wav_recorder_process+0x15c>)
 80007b8:	8adb      	ldrh	r3, [r3, #22]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <wav_recorder_process+0x154>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <wav_recorder_process+0x15c>)
 80007c6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80007c8:	fb02 f303 	mul.w	r3, r2, r3
 80007cc:	08db      	lsrs	r3, r3, #3
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <wav_recorder_process+0x15c>)
 80007d0:	6293      	str	r3, [r2, #40]	; 0x28
    wavHeader.FileSize = 36 + wavHeader.SubChunk2Size;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <wav_recorder_process+0x15c>)
 80007d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d6:	3324      	adds	r3, #36	; 0x24
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <wav_recorder_process+0x15c>)
 80007da:	6053      	str	r3, [r2, #4]
    f_write(&wavFile, (uint8_t *)&wavHeader, 44, &recorderWriteBytes);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <wav_recorder_process+0x148>)
 80007de:	222c      	movs	r2, #44	; 0x2c
 80007e0:	4910      	ldr	r1, [pc, #64]	; (8000824 <wav_recorder_process+0x15c>)
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <wav_recorder_process+0x150>)
 80007e4:	f006 fdaf 	bl	8007346 <f_write>
    f_close(&wavFile);
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <wav_recorder_process+0x150>)
 80007ea:	f007 f87e 	bl	80078ea <f_close>
    wavRecorder_reset();
 80007ee:	f7ff fec1 	bl	8000574 <wavRecorder_reset>
    isFinished = true;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <wav_recorder_process+0x160>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
    recorderControlSM = Recorder_Control_Idle;
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <wav_recorder_process+0x144>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
    break;
 80007fe:	e000      	b.n	8000802 <wav_recorder_process+0x13a>
    break;
 8000800:	bf00      	nop
  }
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20002338 	.word	0x20002338
 8000810:	20000300 	.word	0x20000300
 8000814:	20000304 	.word	0x20000304
 8000818:	200000a8 	.word	0x200000a8
 800081c:	20002304 	.word	0x20002304
 8000820:	20001304 	.word	0x20001304
 8000824:	2000230c 	.word	0x2000230c
 8000828:	20002308 	.word	0x20002308

0800082c <wav_recorder_isFinished>:

/**
 * @brief Is Finished
 */
bool wav_recorder_isFinished(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return isFinished;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <wav_recorder_isFinished+0x14>)
 8000832:	781b      	ldrb	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20002308 	.word	0x20002308

08000844 <wavRecorder_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void wavRecorder_halfTransfer_Callback(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  recorderControlSM = Recorder_Control_HalfBuffer;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <wavRecorder_halfTransfer_Callback+0x14>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	20002338 	.word	0x20002338

0800085c <wavRecorder_fullTransfer_Callback>:
void wavRecorder_fullTransfer_Callback(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  recorderControlSM = Recorder_Control_FullBuffer;
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <wavRecorder_fullTransfer_Callback+0x14>)
 8000862:	2202      	movs	r2, #2
 8000864:	701a      	strb	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20002338 	.word	0x20002338

08000874 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0c      	blt.n	80008a0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4907      	ldr	r1, [pc, #28]	; (80008ac <__NVIC_ClearPendingIRQ+0x38>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	3360      	adds	r3, #96	; 0x60
 800089c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000e100 	.word	0xe000e100

080008b0 <main>:
void SystemClock_Config(void);
static void MX_SPI1_Init(void);


int main (void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	//----------Setup------------------------------//
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008b4:	f000 fb2f 	bl	8000f16 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 80008b8:	f000 f8d8 	bl	8000a6c <SystemClock_Config>
	/* Initialize all configured peripherals */
	spi_GPIO_config();
 80008bc:	f008 f936 	bl	8008b2c <spi_GPIO_config>
	tim_TIM6_MIC_config();//44.1kHz Sample Rate
 80008c0:	f008 f98e 	bl	8008be0 <tim_TIM6_MIC_config>
	opamp_config();
 80008c4:	f008 f8ce 	bl	8008a64 <opamp_config>
	adc_MIC_config();
 80008c8:	f007 fd84 	bl	80083d4 <adc_MIC_config>
	gpio_LED_config();
 80008cc:	f008 f86c 	bl	80089a8 <gpio_LED_config>
	exti_buttonConfig();//Push bottom as interrupt source configuration (PA12->D2)
 80008d0:	f007 fee2 	bl	8008698 <exti_buttonConfig>
	uart_UART2_GPIO_config();
 80008d4:	f008 fa1e 	bl	8008d14 <uart_UART2_GPIO_config>
	uart_UART2_config(systemClock);
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <main+0x110>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f008 fa7b 	bl	8008dd8 <uart_UART2_config>
	MX_SPI1_Init();
 80008e2:	f000 f909 	bl	8000af8 <MX_SPI1_Init>
	MX_FATFS_Init();
 80008e6:	f002 fa01 	bl	8002cec <MX_FATFS_Init>
	//Mount SD Card
	fresult=f_mount(&fs, "/", 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	4935      	ldr	r1, [pc, #212]	; (80009c4 <main+0x114>)
 80008ee:	4836      	ldr	r0, [pc, #216]	; (80009c8 <main+0x118>)
 80008f0:	f006 fa22 	bl	8006d38 <f_mount>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <main+0x11c>)
 80008fa:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <main+0x11c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <main+0x5c>
	{
		printf("Failed to mount SD card to FatFs\r\n");
 8000904:	4832      	ldr	r0, [pc, #200]	; (80009d0 <main+0x120>)
 8000906:	f008 fbbf 	bl	8009088 <puts>
 800090a:	e002      	b.n	8000912 <main+0x62>
	}
	else
	{
		printf("Successfully Mounted SD card\r\n");
 800090c:	4831      	ldr	r0, [pc, #196]	; (80009d4 <main+0x124>)
 800090e:	f008 fbbb 	bl	8009088 <puts>
	}
	//Print status
	printf("SD card result = %d\r\n",fresult);
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <main+0x11c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	482f      	ldr	r0, [pc, #188]	; (80009d8 <main+0x128>)
 800091a:	f008 fb2f 	bl	8008f7c <iprintf>


	//----------Loop forever-----------------------//
	while(1)
	{
		gpio_LED_toggleGreen();
 800091e:	f008 f891 	bl	8008a44 <gpio_LED_toggleGreen>
		HAL_Delay(250);
 8000922:	20fa      	movs	r0, #250	; 0xfa
 8000924:	f000 fb6c 	bl	8001000 <HAL_Delay>
		//WAV Recorder
		if (exti_flag)
 8000928:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <main+0x12c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f6      	beq.n	800091e <main+0x6e>
		{
			if(wav_recorder_fileCreate("Audio1.wav"))
 8000930:	482b      	ldr	r0, [pc, #172]	; (80009e0 <main+0x130>)
 8000932:	f7ff fe35 	bl	80005a0 <wav_recorder_fileCreate>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <main+0x9a>
			{
				printf("Audio File Created Successfully\r\n");
 800093c:	4829      	ldr	r0, [pc, #164]	; (80009e4 <main+0x134>)
 800093e:	f008 fba3 	bl	8009088 <puts>
				isFileCreated=true;
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <main+0x138>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e005      	b.n	8000956 <main+0xa6>
			}
			else
			{
				printf("Audio File Creation Failed\r\n");
 800094a:	4828      	ldr	r0, [pc, #160]	; (80009ec <main+0x13c>)
 800094c:	f008 fb9c 	bl	8009088 <puts>
				isFileCreated=false;
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <main+0x138>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
			}
			if(isFileCreated)
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <main+0x138>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d027      	beq.n	80009ae <main+0xfe>
			{
				gpio_LED_writeGreen(true);
 800095e:	2001      	movs	r0, #1
 8000960:	f008 f852 	bl	8008a08 <gpio_LED_writeGreen>
				HAL_Delay(1000);
 8000964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000968:	f000 fb4a 	bl	8001000 <HAL_Delay>
				exti_flag=false;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <main+0x12c>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
				printf("Starting Recording...\r\n");
 8000972:	481f      	ldr	r0, [pc, #124]	; (80009f0 <main+0x140>)
 8000974:	f008 fb88 	bl	8009088 <puts>
				wav_recorder_record();
 8000978:	f7ff fe70 	bl	800065c <wav_recorder_record>
				while(!wav_recorder_isFinished())
 800097c:	e00c      	b.n	8000998 <main+0xe8>
				{
					wav_recorder_process();
 800097e:	f7ff fea3 	bl	80006c8 <wav_recorder_process>
					if(exti_flag)
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <main+0x12c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d006      	beq.n	8000998 <main+0xe8>
					{
						wav_recorder_stop();
 800098a:	f7ff fe81 	bl	8000690 <wav_recorder_stop>
						wav_recorder_process();
 800098e:	f7ff fe9b 	bl	80006c8 <wav_recorder_process>
						printf("Recording Stopped\r\n");
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <main+0x144>)
 8000994:	f008 fb78 	bl	8009088 <puts>
				while(!wav_recorder_isFinished())
 8000998:	f7ff ff48 	bl	800082c <wav_recorder_isFinished>
 800099c:	4603      	mov	r3, r0
 800099e:	f083 0301 	eor.w	r3, r3, #1
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1ea      	bne.n	800097e <main+0xce>
					}
				}
				gpio_LED_writeGreen(false);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f008 f82d 	bl	8008a08 <gpio_LED_writeGreen>
			}

			HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f000 fb25 	bl	8001000 <HAL_Delay>
			exti_flag=false;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <main+0x12c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
		gpio_LED_toggleGreen();
 80009bc:	e7af      	b.n	800091e <main+0x6e>
 80009be:	bf00      	nop
 80009c0:	20000000 	.word	0x20000000
 80009c4:	08009f9c 	.word	0x08009f9c
 80009c8:	200023a4 	.word	0x200023a4
 80009cc:	200023a2 	.word	0x200023a2
 80009d0:	08009fa0 	.word	0x08009fa0
 80009d4:	08009fc4 	.word	0x08009fc4
 80009d8:	08009fe4 	.word	0x08009fe4
 80009dc:	200023a0 	.word	0x200023a0
 80009e0:	08009ffc 	.word	0x08009ffc
 80009e4:	0800a008 	.word	0x0800a008
 80009e8:	200023a1 	.word	0x200023a1
 80009ec:	0800a02c 	.word	0x0800a02c
 80009f0:	0800a048 	.word	0x0800a048
 80009f4:	0800a060 	.word	0x0800a060

080009f8 <EXTI15_10_IRQHandler>:


/* Interrupt Routines -----------------------------------------------*/
//Push Button Interrupt
void EXTI15_10_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	//Clearing the pending interrupt field
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80009fc:	2028      	movs	r0, #40	; 0x28
 80009fe:	f7ff ff39 	bl	8000874 <__NVIC_ClearPendingIRQ>
	EXTI->PR1 |=(EXTI_PR1_PIF12);
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <EXTI15_10_IRQHandler+0x20>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <EXTI15_10_IRQHandler+0x20>)
 8000a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a0c:	6153      	str	r3, [r2, #20]
	//Application
	exti_flag =true;
 8000a0e:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <EXTI15_10_IRQHandler+0x24>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010400 	.word	0x40010400
 8000a1c:	200023a0 	.word	0x200023a0

08000a20 <DMA1_Channel1_IRQHandler>:
//DMA ADC Channel Interrupt
void DMA1_Channel1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	//Half Transfer
	if (DMA1->ISR & DMA_ISR_HTIF1)
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <DMA1_Channel1_IRQHandler+0x48>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d007      	beq.n	8000a40 <DMA1_Channel1_IRQHandler+0x20>
	{
		//Clear half transfer complete flag
		DMA1->IFCR |= (DMA_IFCR_CHTIF1);
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <DMA1_Channel1_IRQHandler+0x48>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <DMA1_Channel1_IRQHandler+0x48>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6053      	str	r3, [r2, #4]
		////Ready for the application
		wavRecorder_halfTransfer_Callback();
 8000a3c:	f7ff ff02 	bl	8000844 <wavRecorder_halfTransfer_Callback>

	}
	//Full Transfer
	if (DMA1->ISR & DMA_ISR_TCIF1)
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <DMA1_Channel1_IRQHandler+0x48>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d007      	beq.n	8000a5c <DMA1_Channel1_IRQHandler+0x3c>
	{
		//Clear transfer complete flag
		DMA1->IFCR |= (DMA_IFCR_CTCIF1);
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <DMA1_Channel1_IRQHandler+0x48>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <DMA1_Channel1_IRQHandler+0x48>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	6053      	str	r3, [r2, #4]
		////Ready for the application
		wavRecorder_fullTransfer_Callback();
 8000a58:	f7ff ff00 	bl	800085c <wavRecorder_fullTransfer_Callback>

	}
	//Clear interrupt pending flag
	NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8000a5c:	200b      	movs	r0, #11
 8000a5e:	f7ff ff09 	bl	8000874 <__NVIC_ClearPendingIRQ>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020000 	.word	0x40020000

08000a6c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b096      	sub	sp, #88	; 0x58
 8000a70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2244      	movs	r2, #68	; 0x44
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f008 fa76 	bl	8008f6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a92:	f000 fd37 	bl	8001504 <HAL_PWREx_ControlVoltageScaling>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000a9c:	f000 f86a 	bl	8000b74 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fd7a 	bl	80015b0 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x5a>
	{
		Error_Handler();
 8000ac2:	f000 f857 	bl	8000b74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aca:	2301      	movs	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f97a 	bl	8001dd8 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000aea:	f000 f843 	bl	8000b74 <Error_Handler>
	}
}
 8000aee:	bf00      	nop
 8000af0:	3758      	adds	r7, #88	; 0x58
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000afe:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <MX_SPI1_Init+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b16:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b46:	2207      	movs	r2, #7
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_SPI1_Init+0x74>)
 8000b58:	f001 fb2a 	bl	80021b0 <HAL_SPI_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8000b62:	f000 f807 	bl	8000b74 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000233c 	.word	0x2000233c
 8000b70:	40013000 	.word	0x40013000

08000b74 <Error_Handler>:
 * @retval None
 */


void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>

08000b7e <__io_putchar>:
#include "uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b084      	sub	sp, #16
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	733b      	strb	r3, [r7, #12]
 uart_UART2_TX(&c[0], 1, 100);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2264      	movs	r2, #100	; 0x64
 8000b92:	2101      	movs	r1, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f97b 	bl	8008e90 <uart_UART2_TX>
 return ch;
 8000b9a:	687b      	ldr	r3, [r7, #4]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_write>:

int _write(int file,char *ptr, int len) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	e009      	b.n	8000bca <_write+0x26>
  __io_putchar(*ptr++);
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	60ba      	str	r2, [r7, #8]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ffdd 	bl	8000b7e <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	dbf1      	blt.n	8000bb6 <_write+0x12>
 }
 return len;
 8000bd2:	687b      	ldr	r3, [r7, #4]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6613      	str	r3, [r2, #96]	; 0x60
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6593      	str	r3, [r2, #88]	; 0x58
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a20      	ldr	r2, [pc, #128]	; (8000cc4 <HAL_SPI_MspInit+0xa0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d139      	bne.n	8000cba <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_SPI_MspInit+0xa4>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <HAL_SPI_MspInit+0xa4>)
 8000c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c50:	6613      	str	r3, [r2, #96]	; 0x60
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_SPI_MspInit+0xa4>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_SPI_MspInit+0xa4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_SPI_MspInit+0xa4>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_SPI_MspInit+0xa4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f000 fabe 	bl	8001214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c98:	2340      	movs	r3, #64	; 0x40
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca8:	2305      	movs	r3, #5
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f000 faad 	bl	8001214 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40021000 	.word	0x40021000

08000ccc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <SDTimer_Handler+0x40>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d006      	beq.n	8000ce8 <SDTimer_Handler+0x1c>
    Timer1--;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <SDTimer_Handler+0x40>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <SDTimer_Handler+0x40>)
 8000ce6:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <SDTimer_Handler+0x44>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <SDTimer_Handler+0x34>
    Timer2--;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <SDTimer_Handler+0x44>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SDTimer_Handler+0x44>)
 8000cfe:	801a      	strh	r2, [r3, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200025de 	.word	0x200025de
 8000d10:	200025e0 	.word	0x200025e0

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN SysTick_IRQn 0 */

		  FatFsCnt++;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <SysTick_Handler+0x30>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	3301      	adds	r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <SysTick_Handler+0x30>)
 8000d6c:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <SysTick_Handler+0x30>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b09      	cmp	r3, #9
 8000d76:	d904      	bls.n	8000d82 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Handler+0x30>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8000d7e:	f7ff ffa5 	bl	8000ccc <SDTimer_Handler>
		  }

	  /* USER CODE END SysTick_IRQn 0 */
	  HAL_IncTick();
 8000d82:	f000 f91d 	bl	8000fc0 <HAL_IncTick>
	  /* USER CODE BEGIN SysTick_IRQn 1 */

	  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200025dc 	.word	0x200025dc

08000d90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e00a      	b.n	8000db8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000da2:	f3af 8000 	nop.w
 8000da6:	4601      	mov	r1, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf0      	blt.n	8000da2 <_read+0x12>
  }

  return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df2:	605a      	str	r2, [r3, #4]
  return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_isatty>:

int _isatty(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f008 f858 	bl	8008f18 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20010000 	.word	0x20010000
 8000e94:	00000800 	.word	0x00000800
 8000e98:	200025e4 	.word	0x200025e4
 8000e9c:	20002aa0 	.word	0x20002aa0

08000ea0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec8:	f7ff ffea 	bl	8000ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f008 f817 	bl	8008f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef6:	f7ff fcdb 	bl	80008b0 <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000efc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f08:	0800a5f0 	.word	0x0800a5f0
  ldr r2, =_sbss
 8000f0c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000f10:	20002a9c 	.word	0x20002a9c

08000f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_IRQHandler>

08000f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f943 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f80e 	bl	8000f48 <HAL_InitTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	e001      	b.n	8000f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f38:	f7ff fe50 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d023      	beq.n	8000fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_InitTick+0x70>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f941 	bl	80011fa <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d809      	bhi.n	8000f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f919 	bl	80011c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_InitTick+0x74>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e004      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e001      	b.n	8000fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	200025e8 	.word	0x200025e8

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200025e8 	.word	0x200025e8

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000000c 	.word	0x2000000c

08001048 <__NVIC_SetPriorityGrouping>:
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff47 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff5c 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffb0 	bl	8001168 <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	e148      	b.n	80014b6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 813a 	beq.w	80014b0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d005      	beq.n	8001254 <HAL_GPIO_Init+0x40>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d130      	bne.n	80012b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128a:	2201      	movs	r2, #1
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	f003 0201 	and.w	r2, r3, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d017      	beq.n	80012f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d123      	bne.n	8001346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	6939      	ldr	r1, [r7, #16]
 8001342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0203 	and.w	r2, r3, #3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8094 	beq.w	80014b0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001388:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x2c0>)
 800138a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138c:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <HAL_GPIO_Init+0x2c0>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6613      	str	r3, [r2, #96]	; 0x60
 8001394:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <HAL_GPIO_Init+0x2c0>)
 8001396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a0:	4a4d      	ldr	r2, [pc, #308]	; (80014d8 <HAL_GPIO_Init+0x2c4>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ca:	d00d      	beq.n	80013e8 <HAL_GPIO_Init+0x1d4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a43      	ldr	r2, [pc, #268]	; (80014dc <HAL_GPIO_Init+0x2c8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d007      	beq.n	80013e4 <HAL_GPIO_Init+0x1d0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <HAL_GPIO_Init+0x2cc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_GPIO_Init+0x1cc>
 80013dc:	2302      	movs	r3, #2
 80013de:	e004      	b.n	80013ea <HAL_GPIO_Init+0x1d6>
 80013e0:	2307      	movs	r3, #7
 80013e2:	e002      	b.n	80013ea <HAL_GPIO_Init+0x1d6>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <HAL_GPIO_Init+0x1d6>
 80013e8:	2300      	movs	r3, #0
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	f002 0203 	and.w	r2, r2, #3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4093      	lsls	r3, r2
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013fa:	4937      	ldr	r1, [pc, #220]	; (80014d8 <HAL_GPIO_Init+0x2c4>)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800142c:	4a2d      	ldr	r2, [pc, #180]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001480:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f47f aeaf 	bne.w	8001224 <HAL_GPIO_Init+0x10>
  }
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	48000400 	.word	0x48000400
 80014e0:	48000800 	.word	0x48000800
 80014e4:	40010400 	.word	0x40010400

080014e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001512:	d130      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800151c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001520:	d038      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2232      	movs	r2, #50	; 0x32
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	e002      	b.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3b01      	subs	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155c:	d102      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f2      	bne.n	800154a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d110      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e00f      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001582:	d007      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000
 80015a8:	20000004 	.word	0x20000004
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	f000 bc02 	b.w	8001dc8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c4:	4b96      	ldr	r3, [pc, #600]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ce:	4b94      	ldr	r3, [pc, #592]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80e4 	beq.w	80017ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_RCC_OscConfig+0x4c>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	f040 808b 	bne.w	800170a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	f040 8087 	bne.w	800170a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fc:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x64>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e3d9      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	4b81      	ldr	r3, [pc, #516]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <HAL_RCC_OscConfig+0x7e>
 8001624:	4b7e      	ldr	r3, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800162c:	e005      	b.n	800163a <HAL_RCC_OscConfig+0x8a>
 800162e:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163a:	4293      	cmp	r3, r2
 800163c:	d223      	bcs.n	8001686 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fd54 	bl	80020f0 <RCC_SetFlashLatencyFromMSIRange>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e3ba      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b73      	ldr	r3, [pc, #460]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a72      	ldr	r2, [pc, #456]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	496d      	ldr	r1, [pc, #436]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001670:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	4968      	ldr	r1, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e025      	b.n	80016d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001686:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a65      	ldr	r2, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4960      	ldr	r1, [pc, #384]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a4:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	495b      	ldr	r1, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fd14 	bl	80020f0 <RCC_SetFlashLatencyFromMSIRange>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e37a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d2:	f000 fc81 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	4950      	ldr	r1, [pc, #320]	; (8001824 <HAL_RCC_OscConfig+0x274>)
 80016e4:	5ccb      	ldrb	r3, [r1, r3]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <HAL_RCC_OscConfig+0x278>)
 80016f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <HAL_RCC_OscConfig+0x27c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc26 	bl	8000f48 <HAL_InitTick>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d052      	beq.n	80017ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	e35e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d032      	beq.n	8001778 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a42      	ldr	r2, [pc, #264]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800171e:	f7ff fc63 	bl	8000fe8 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001726:	f7ff fc5f 	bl	8000fe8 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e347      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a35      	ldr	r2, [pc, #212]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4930      	ldr	r1, [pc, #192]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	492b      	ldr	r1, [pc, #172]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
 8001776:	e01a      	b.n	80017ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001778:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a28      	ldr	r2, [pc, #160]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc30 	bl	8000fe8 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178c:	f7ff fc2c 	bl	8000fe8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e314      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1dc>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d073      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x21c>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d10e      	bne.n	80017e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d063      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d15f      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e2f1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x24c>
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e025      	b.n	8001848 <HAL_RCC_OscConfig+0x298>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d114      	bne.n	8001830 <HAL_RCC_OscConfig+0x280>
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a02      	ldr	r2, [pc, #8]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e013      	b.n	8001848 <HAL_RCC_OscConfig+0x298>
 8001820:	40021000 	.word	0x40021000
 8001824:	0800a0c8 	.word	0x0800a0c8
 8001828:	20000004 	.word	0x20000004
 800182c:	20000008 	.word	0x20000008
 8001830:	4ba0      	ldr	r3, [pc, #640]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a9f      	ldr	r2, [pc, #636]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b9d      	ldr	r3, [pc, #628]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9c      	ldr	r2, [pc, #624]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fbca 	bl	8000fe8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fbc6 	bl	8000fe8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e2ae      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x2a8>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fbb6 	bl	8000fe8 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fbb2 	bl	8000fe8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e29a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d0>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d060      	beq.n	8001970 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x310>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d119      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d116      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c0:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x328>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e277      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	4973      	ldr	r1, [pc, #460]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ec:	e040      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d023      	beq.n	800193e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f6:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff fb71 	bl	8000fe8 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fb6d 	bl	8000fe8 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e255      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	495f      	ldr	r1, [pc, #380]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e018      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff fb4d 	bl	8000fe8 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff fb49 	bl	8000fe8 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e231      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01c      	beq.n	80019be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff fb28 	bl	8000fe8 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fb24 	bl	8000fe8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e20c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x3ec>
 80019bc:	e01b      	b.n	80019f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c4:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff fb0b 	bl	8000fe8 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d6:	f7ff fb07 	bl	8000fe8 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1ef      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80a6 	beq.w	8001b50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d118      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a48:	f7ff face 	bl	8000fe8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a50:	f7ff faca 	bl	8000fe8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1b2      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4d8>
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a86:	e029      	b.n	8001adc <HAL_RCC_OscConfig+0x52c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d115      	bne.n	8001abc <HAL_RCC_OscConfig+0x50c>
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab0:	e014      	b.n	8001adc <HAL_RCC_OscConfig+0x52c>
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	4b9a      	ldr	r3, [pc, #616]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac2:	4a99      	ldr	r2, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001acc:	4b96      	ldr	r3, [pc, #600]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad2:	4a95      	ldr	r2, [pc, #596]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d016      	beq.n	8001b12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fa80 	bl	8000fe8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff fa7c 	bl	8000fe8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e162      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ed      	beq.n	8001aec <HAL_RCC_OscConfig+0x53c>
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa69 	bl	8000fe8 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fa65 	bl	8000fe8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e14b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b30:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ed      	bne.n	8001b1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	4b78      	ldr	r3, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6a:	4a6f      	ldr	r2, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff fa38 	bl	8000fe8 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7c:	f7ff fa34 	bl	8000fe8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e11c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8e:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ef      	beq.n	8001b7c <HAL_RCC_OscConfig+0x5cc>
 8001b9c:	e01b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b9e:	4b62      	ldr	r3, [pc, #392]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba4:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fa1b 	bl	8000fe8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb6:	f7ff fa17 	bl	8000fe8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0ff      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc8:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ef      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80f3 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	f040 80c9 	bne.w	8001d7c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bea:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0203 	and.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d12c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d123      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d11b      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d113      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d109      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d06b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d062      	beq.n	8001d24 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c5e:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0ac      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7a:	f7ff f9b5 	bl	8000fe8 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff f9b1 	bl	8000fe8 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e099      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_RCC_OscConfig+0x77c>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cb0:	3a01      	subs	r2, #1
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cba:	0212      	lsls	r2, r2, #8
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cc2:	0852      	lsrs	r2, r2, #1
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0552      	lsls	r2, r2, #21
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0652      	lsls	r2, r2, #25
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cda:	06d2      	lsls	r2, r2, #27
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	4912      	ldr	r1, [pc, #72]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cfc:	f7ff f974 	bl	8000fe8 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f970 	bl	8000fe8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e058      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d22:	e050      	b.n	8001dc6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e04f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d144      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d54:	f7ff f948 	bl	8000fe8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f944 	bl	8000fe8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e02c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x7ac>
 8001d7a:	e024      	b.n	8001dc6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d01f      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f92b 	bl	8000fe8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff f927 	bl	8000fe8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	4905      	ldr	r1, [pc, #20]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
 8001dc0:	e001      	b.n	8001dc6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	feeefffc 	.word	0xfeeefffc

08001dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0e7      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dec:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d910      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 0207 	bic.w	r2, r3, #7
 8001e02:	4970      	ldr	r1, [pc, #448]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b6e      	ldr	r3, [pc, #440]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0cf      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d908      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4960      	ldr	r1, [pc, #384]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04c      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d121      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0a6      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e76:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d115      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e09a      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e8e:	4b4e      	ldr	r3, [pc, #312]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e08e      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9e:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e086      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f023 0203 	bic.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4943      	ldr	r1, [pc, #268]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec0:	f7ff f892 	bl	8000fe8 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7ff f88e 	bl	8000fe8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e06e      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 020c 	and.w	r2, r3, #12
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1eb      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d010      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d208      	bcs.n	8001f1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	492b      	ldr	r1, [pc, #172]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d210      	bcs.n	8001f4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 0207 	bic.w	r2, r3, #7
 8001f34:	4923      	ldr	r1, [pc, #140]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e036      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	4918      	ldr	r1, [pc, #96]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4910      	ldr	r1, [pc, #64]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8c:	f000 f824 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	490b      	ldr	r1, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x1f4>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f8>)
 8001faa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1fc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe ffc9 	bl	8000f48 <HAL_InitTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fba:	7afb      	ldrb	r3, [r7, #11]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	0800a0c8 	.word	0x0800a0c8
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	20000008 	.word	0x20000008

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x34>
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d121      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d11e      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e005      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002034:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d102      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	e004      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d101      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_RCC_GetSysClockFreq+0x114>)
 800205e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d134      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0xa6>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d003      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0xac>
 800207c:	e005      	b.n	800208a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002080:	617b      	str	r3, [r7, #20]
      break;
 8002082:	e005      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002086:	617b      	str	r3, [r7, #20]
      break;
 8002088:	e002      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	617b      	str	r3, [r7, #20]
      break;
 800208e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	3301      	adds	r3, #1
 800209c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	fb03 f202 	mul.w	r2, r3, r2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	0e5b      	lsrs	r3, r3, #25
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	3301      	adds	r3, #1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020d0:	69bb      	ldr	r3, [r7, #24]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	0800a0d8 	.word	0x0800a0d8
 80020e8:	00f42400 	.word	0x00f42400
 80020ec:	007a1200 	.word	0x007a1200

080020f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002108:	f7ff f9ee 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 800210c:	6178      	str	r0, [r7, #20]
 800210e:	e014      	b.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	; 0x58
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002128:	f7ff f9de 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 800212c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002140:	d10b      	bne.n	800215a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b80      	cmp	r3, #128	; 0x80
 8002146:	d919      	bls.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2ba0      	cmp	r3, #160	; 0xa0
 800214c:	d902      	bls.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800214e:	2302      	movs	r3, #2
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	e013      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002154:	2301      	movs	r3, #1
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e010      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d902      	bls.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002160:	2303      	movs	r3, #3
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e00a      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d102      	bne.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800216c:	2302      	movs	r3, #2
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e004      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b70      	cmp	r3, #112	; 0x70
 8002176:	d101      	bne.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002178:	2301      	movs	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f023 0207 	bic.w	r2, r3, #7
 8002184:	4909      	ldr	r1, [pc, #36]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e095      	b.n	80022ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d108      	bne.n	80021dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021d2:	d009      	beq.n	80021e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
 80021da:	e005      	b.n	80021e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fd0e 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002228:	d902      	bls.n	8002230 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e002      	b.n	8002236 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002234:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800223e:	d007      	beq.n	8002250 <HAL_SPI_Init+0xa0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002248:	d002      	beq.n	8002250 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	ea42 0103 	orr.w	r1, r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	f003 0204 	and.w	r2, r3, #4
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022cc:	ea42 0103 	orr.w	r1, r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b088      	sub	sp, #32
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_SPI_Transmit+0x22>
 8002314:	2302      	movs	r3, #2
 8002316:	e15f      	b.n	80025d8 <HAL_SPI_Transmit+0x2e2>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002320:	f7fe fe62 	bl	8000fe8 <HAL_GetTick>
 8002324:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d002      	beq.n	800233c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002336:	2302      	movs	r3, #2
 8002338:	77fb      	strb	r3, [r7, #31]
    goto error;
 800233a:	e148      	b.n	80025ce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_SPI_Transmit+0x52>
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800234c:	e13f      	b.n	80025ce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2203      	movs	r2, #3
 8002352:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002398:	d10f      	bne.n	80023ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d007      	beq.n	80023d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023e0:	d94f      	bls.n	8002482 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_SPI_Transmit+0xfa>
 80023ea:	8afb      	ldrh	r3, [r7, #22]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d142      	bne.n	8002476 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	1c9a      	adds	r2, r3, #2
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002414:	e02f      	b.n	8002476 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d112      	bne.n	800244a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002448:	e015      	b.n	8002476 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800244a:	f7fe fdcd 	bl	8000fe8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d803      	bhi.n	8002462 <HAL_SPI_Transmit+0x16c>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d102      	bne.n	8002468 <HAL_SPI_Transmit+0x172>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002474:	e0ab      	b.n	80025ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ca      	bne.n	8002416 <HAL_SPI_Transmit+0x120>
 8002480:	e080      	b.n	8002584 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_SPI_Transmit+0x19a>
 800248a:	8afb      	ldrh	r3, [r7, #22]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d174      	bne.n	800257a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d912      	bls.n	80024c0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	1c9a      	adds	r2, r3, #2
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b02      	subs	r3, #2
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024be:	e05c      	b.n	800257a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80024e6:	e048      	b.n	800257a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d12b      	bne.n	800254e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d912      	bls.n	8002526 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	881a      	ldrh	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	1c9a      	adds	r2, r3, #2
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b02      	subs	r3, #2
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002524:	e029      	b.n	800257a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800254c:	e015      	b.n	800257a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800254e:	f7fe fd4b 	bl	8000fe8 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d803      	bhi.n	8002566 <HAL_SPI_Transmit+0x270>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d102      	bne.n	800256c <HAL_SPI_Transmit+0x276>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002578:	e029      	b.n	80025ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1b1      	bne.n	80024e8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fb69 	bl	8002c60 <SPI_EndRxTxTransaction>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e003      	b.n	80025ce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80025d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025ee:	2301      	movs	r3, #1
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_SPI_TransmitReceive+0x26>
 8002602:	2302      	movs	r3, #2
 8002604:	e20a      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x43c>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800260e:	f7fe fceb 	bl	8000fe8 <HAL_GetTick>
 8002612:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800261a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800262a:	7efb      	ldrb	r3, [r7, #27]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d00e      	beq.n	800264e <HAL_SPI_TransmitReceive+0x6e>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002636:	d106      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x66>
 8002640:	7efb      	ldrb	r3, [r7, #27]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d003      	beq.n	800264e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002646:	2302      	movs	r3, #2
 8002648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800264c:	e1e0      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x80>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x80>
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002666:	e1d3      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b04      	cmp	r3, #4
 8002672:	d003      	beq.n	800267c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2205      	movs	r2, #5
 8002678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	887a      	ldrh	r2, [r7, #2]
 80026a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026be:	d802      	bhi.n	80026c6 <HAL_SPI_TransmitReceive+0xe6>
 80026c0:	8a3b      	ldrh	r3, [r7, #16]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d908      	bls.n	80026d8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	e007      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d007      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800270e:	f240 8081 	bls.w	8002814 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_SPI_TransmitReceive+0x140>
 800271a:	8a7b      	ldrh	r3, [r7, #18]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d16d      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	881a      	ldrh	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	1c9a      	adds	r2, r3, #2
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002744:	e05a      	b.n	80027fc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d11b      	bne.n	800278c <HAL_SPI_TransmitReceive+0x1ac>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d016      	beq.n	800278c <HAL_SPI_TransmitReceive+0x1ac>
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b01      	cmp	r3, #1
 8002762:	d113      	bne.n	800278c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	1c9a      	adds	r2, r3, #2
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d11c      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x1f4>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	b292      	uxth	r2, r2
 80027b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	1c9a      	adds	r2, r3, #2
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027d0:	2301      	movs	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027d4:	f7fe fc08 	bl	8000fe8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d80b      	bhi.n	80027fc <HAL_SPI_TransmitReceive+0x21c>
 80027e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d007      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80027fa:	e109      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d19f      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x166>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d199      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x166>
 8002812:	e0e3      	b.n	80029dc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x244>
 800281c:	8a7b      	ldrh	r3, [r7, #18]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 80cf 	bne.w	80029c2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d912      	bls.n	8002854 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	1c9a      	adds	r2, r3, #2
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b02      	subs	r3, #2
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002852:	e0b6      	b.n	80029c2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287a:	e0a2      	b.n	80029c2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d134      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x314>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d02f      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x314>
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	2b01      	cmp	r3, #1
 8002898:	d12c      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d912      	bls.n	80028ca <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	881a      	ldrh	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	1c9a      	adds	r2, r3, #2
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b02      	subs	r3, #2
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028c8:	e012      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d148      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x3b4>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d042      	beq.n	8002994 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d923      	bls.n	8002962 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	b292      	uxth	r2, r2
 8002926:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	1c9a      	adds	r2, r3, #2
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b02      	subs	r3, #2
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d81f      	bhi.n	8002990 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	e016      	b.n	8002990 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f103 020c 	add.w	r2, r3, #12
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002990:	2301      	movs	r3, #1
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002994:	f7fe fb28 	bl	8000fe8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d803      	bhi.n	80029ac <HAL_SPI_TransmitReceive+0x3cc>
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d102      	bne.n	80029b2 <HAL_SPI_TransmitReceive+0x3d2>
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80029c0:	e026      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f47f af57 	bne.w	800287c <HAL_SPI_TransmitReceive+0x29c>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f47f af50 	bne.w	800287c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f93d 	bl	8002c60 <SPI_EndRxTxTransaction>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a06:	e003      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a34:	f7fe fad8 	bl	8000fe8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a44:	f7fe fad0 	bl	8000fe8 <HAL_GetTick>
 8002a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a4a:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	015b      	lsls	r3, r3, #5
 8002a50:	0d1b      	lsrs	r3, r3, #20
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a5a:	e054      	b.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d050      	beq.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a64:	f7fe fac0 	bl	8000fe8 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d902      	bls.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d13d      	bne.n	8002af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a92:	d111      	bne.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9c:	d004      	beq.n	8002aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d107      	bne.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac0:	d10f      	bne.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e017      	b.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d19b      	bne.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000004 	.word	0x20000004

08002b34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b46:	f7fe fa4f 	bl	8000fe8 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002b56:	f7fe fa47 	bl	8000fe8 <HAL_GetTick>
 8002b5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b64:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00da      	lsls	r2, r3, #3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	0d1b      	lsrs	r3, r3, #20
 8002b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b7c:	e060      	b.n	8002c40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b84:	d107      	bne.n	8002b96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d050      	beq.n	8002c40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b9e:	f7fe fa23 	bl	8000fe8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d902      	bls.n	8002bb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d13d      	bne.n	8002c30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bcc:	d111      	bne.n	8002bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd6:	d004      	beq.n	8002be2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d107      	bne.n	8002bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfa:	d10f      	bne.n	8002c1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e010      	b.n	8002c52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d196      	bne.n	8002b7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000004 	.word	0x20000004

08002c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff ff5b 	bl	8002b34 <SPI_WaitFifoStateUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e027      	b.n	8002ce4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff fec0 	bl	8002a24 <SPI_WaitFlagStateUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	f043 0220 	orr.w	r2, r3, #32
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e014      	b.n	8002ce4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff ff34 	bl	8002b34 <SPI_WaitFifoStateUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e000      	b.n	8002ce4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002cf0:	4904      	ldr	r1, [pc, #16]	; (8002d04 <MX_FATFS_Init+0x18>)
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_FATFS_Init+0x1c>)
 8002cf4:	f005 fa3c 	bl	8008170 <FATFS_LinkDriver>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <MX_FATFS_Init+0x20>)
 8002cfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200025f0 	.word	0x200025f0
 8002d08:	20000010 	.word	0x20000010
 8002d0c:	200025ec 	.word	0x200025ec

08002d10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002d14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	spi_cs_sd_write(false);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f005 ff3b 	bl	8008ba0 <spi_cs_sd_write>
	HAL_Delay(1);
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f7fe f968 	bl	8001000 <HAL_Delay>
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	spi_cs_sd_write(true);
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f005 ff31 	bl	8008ba0 <spi_cs_sd_write>
	HAL_Delay(1);
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f7fe f95e 	bl	8001000 <HAL_Delay>
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d52:	bf00      	nop
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <SPI_TxByte+0x30>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d1f8      	bne.n	8002d54 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002d62:	1df9      	adds	r1, r7, #7
 8002d64:	2364      	movs	r3, #100	; 0x64
 8002d66:	2201      	movs	r2, #1
 8002d68:	4803      	ldr	r0, [pc, #12]	; (8002d78 <SPI_TxByte+0x30>)
 8002d6a:	f7ff fac4 	bl	80022f6 <HAL_SPI_Transmit>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000233c 	.word	0x2000233c

08002d7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d88:	bf00      	nop
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <SPI_TxBuffer+0x30>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d1f8      	bne.n	8002d8a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	2364      	movs	r3, #100	; 0x64
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4803      	ldr	r0, [pc, #12]	; (8002dac <SPI_TxBuffer+0x30>)
 8002da0:	f7ff faa9 	bl	80022f6 <HAL_SPI_Transmit>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	2000233c 	.word	0x2000233c

08002db0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002db6:	23ff      	movs	r3, #255	; 0xff
 8002db8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002dba:	bf00      	nop
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <SPI_RxByte+0x34>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d1f8      	bne.n	8002dbc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002dca:	1dba      	adds	r2, r7, #6
 8002dcc:	1df9      	adds	r1, r7, #7
 8002dce:	2364      	movs	r3, #100	; 0x64
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	4803      	ldr	r0, [pc, #12]	; (8002de4 <SPI_RxByte+0x34>)
 8002dd6:	f7ff fc03 	bl	80025e0 <HAL_SPI_TransmitReceive>

	return data;
 8002dda:	79bb      	ldrb	r3, [r7, #6]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2000233c 	.word	0x2000233c

08002de8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002df0:	f7ff ffde 	bl	8002db0 <SPI_RxByte>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	701a      	strb	r2, [r3, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <SD_ReadyWait+0x30>)
 8002e0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e10:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002e12:	f7ff ffcd 	bl	8002db0 <SPI_RxByte>
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2bff      	cmp	r3, #255	; 0xff
 8002e1e:	d004      	beq.n	8002e2a <SD_ReadyWait+0x26>
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <SD_ReadyWait+0x30>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f3      	bne.n	8002e12 <SD_ReadyWait+0xe>

	return res;
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	200025e0 	.word	0x200025e0

08002e38 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002e3e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002e42:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002e44:	f7ff ff76 	bl	8002d34 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	e005      	b.n	8002e5a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002e4e:	20ff      	movs	r0, #255	; 0xff
 8002e50:	f7ff ff7a 	bl	8002d48 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	ddf6      	ble.n	8002e4e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002e60:	f7ff ff5e 	bl	8002d20 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002e64:	2340      	movs	r3, #64	; 0x40
 8002e66:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002e78:	2395      	movs	r3, #149	; 0x95
 8002e7a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002e7c:	463b      	mov	r3, r7
 8002e7e:	2106      	movs	r1, #6
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff7b 	bl	8002d7c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8002e86:	e002      	b.n	8002e8e <SD_PowerOn+0x56>
	{
		cnt--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8002e8e:	f7ff ff8f 	bl	8002db0 <SPI_RxByte>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <SD_PowerOn+0x66>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f4      	bne.n	8002e88 <SD_PowerOn+0x50>
	}

	DESELECT();
 8002e9e:	f7ff ff49 	bl	8002d34 <DESELECT>
	SPI_TxByte(0XFF);
 8002ea2:	20ff      	movs	r0, #255	; 0xff
 8002ea4:	f7ff ff50 	bl	8002d48 <SPI_TxByte>

	PowerFlag = 1;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <SD_PowerOn+0x80>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200025f5 	.word	0x200025f5

08002ebc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <SD_PowerOff+0x14>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	200025f5 	.word	0x200025f5

08002ed4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <SD_CheckPower+0x14>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200025f5 	.word	0x200025f5

08002eec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <SD_RxDataBlock+0x5c>)
 8002ef8:	22c8      	movs	r2, #200	; 0xc8
 8002efa:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002efc:	f7ff ff58 	bl	8002db0 <SPI_RxByte>
 8002f00:	4603      	mov	r3, r0
 8002f02:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2bff      	cmp	r3, #255	; 0xff
 8002f08:	d104      	bne.n	8002f14 <SD_RxDataBlock+0x28>
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <SD_RxDataBlock+0x5c>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f3      	bne.n	8002efc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2bfe      	cmp	r3, #254	; 0xfe
 8002f18:	d001      	beq.n	8002f1e <SD_RxDataBlock+0x32>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e00f      	b.n	8002f3e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff5f 	bl	8002de8 <SPI_RxBytePtr>
	} while(len--);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	603a      	str	r2, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f4      	bne.n	8002f1e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002f34:	f7ff ff3c 	bl	8002db0 <SPI_RxByte>
	SPI_RxByte();
 8002f38:	f7ff ff3a 	bl	8002db0 <SPI_RxByte>

	return TRUE;
 8002f3c:	2301      	movs	r3, #1
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200025de 	.word	0x200025de

08002f4c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002f5c:	f7ff ff52 	bl	8002e04 <SD_ReadyWait>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2bff      	cmp	r3, #255	; 0xff
 8002f64:	d001      	beq.n	8002f6a <SD_TxDataBlock+0x1e>
 8002f66:	2300      	movs	r3, #0
 8002f68:	e02f      	b.n	8002fca <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff feeb 	bl	8002d48 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	2bfd      	cmp	r3, #253	; 0xfd
 8002f76:	d020      	beq.n	8002fba <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fefd 	bl	8002d7c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002f82:	f7ff ff15 	bl	8002db0 <SPI_RxByte>
		SPI_RxByte();
 8002f86:	f7ff ff13 	bl	8002db0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002f8a:	e00b      	b.n	8002fa4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002f8c:	f7ff ff10 	bl	8002db0 <SPI_RxByte>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d006      	beq.n	8002fac <SD_TxDataBlock+0x60>
			i++;
 8002f9e:	7bbb      	ldrb	r3, [r7, #14]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d9f0      	bls.n	8002f8c <SD_TxDataBlock+0x40>
 8002faa:	e000      	b.n	8002fae <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002fac:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002fae:	bf00      	nop
 8002fb0:	f7ff fefe 	bl	8002db0 <SPI_RxByte>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0fa      	beq.n	8002fb0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d101      	bne.n	8002fc8 <SD_TxDataBlock+0x7c>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <SD_TxDataBlock+0x7e>

	return FALSE;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	6039      	str	r1, [r7, #0]
 8002fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002fde:	f7ff ff11 	bl	8002e04 <SD_ReadyWait>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2bff      	cmp	r3, #255	; 0xff
 8002fe6:	d001      	beq.n	8002fec <SD_SendCmd+0x1a>
 8002fe8:	23ff      	movs	r3, #255	; 0xff
 8002fea:	e042      	b.n	8003072 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff feaa 	bl	8002d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fea4 	bl	8002d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fe9e 	bl	8002d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fe98 	bl	8002d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fe93 	bl	8002d48 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d102      	bne.n	800302e <SD_SendCmd+0x5c>
 8003028:	2395      	movs	r3, #149	; 0x95
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e007      	b.n	800303e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2b48      	cmp	r3, #72	; 0x48
 8003032:	d102      	bne.n	800303a <SD_SendCmd+0x68>
 8003034:	2387      	movs	r3, #135	; 0x87
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e001      	b.n	800303e <SD_SendCmd+0x6c>
	else crc = 1;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fe81 	bl	8002d48 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b4c      	cmp	r3, #76	; 0x4c
 800304a:	d101      	bne.n	8003050 <SD_SendCmd+0x7e>
 800304c:	f7ff feb0 	bl	8002db0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003050:	230a      	movs	r3, #10
 8003052:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003054:	f7ff feac 	bl	8002db0 <SPI_RxByte>
 8003058:	4603      	mov	r3, r0
 800305a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800305c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da05      	bge.n	8003070 <SD_SendCmd+0x9e>
 8003064:	7bbb      	ldrb	r3, [r7, #14]
 8003066:	3b01      	subs	r3, #1
 8003068:	73bb      	strb	r3, [r7, #14]
 800306a:	7bbb      	ldrb	r3, [r7, #14]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f1      	bne.n	8003054 <SD_SendCmd+0x82>

	return res;
 8003070:	7b7b      	ldrb	r3, [r7, #13]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <SD_disk_initialize+0x14>
 800308c:	2301      	movs	r3, #1
 800308e:	e0d6      	b.n	800323e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003090:	4b6d      	ldr	r3, [pc, #436]	; (8003248 <SD_disk_initialize+0x1cc>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <SD_disk_initialize+0x2a>
 800309e:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <SD_disk_initialize+0x1cc>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e0cb      	b.n	800323e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80030a6:	f7ff fec7 	bl	8002e38 <SD_PowerOn>

	/* slave select */
	SELECT();
 80030aa:	f7ff fe39 	bl	8002d20 <SELECT>

	/* check disk type */
	type = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80030b2:	2100      	movs	r1, #0
 80030b4:	2040      	movs	r0, #64	; 0x40
 80030b6:	f7ff ff8c 	bl	8002fd2 <SD_SendCmd>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	f040 80a6 	bne.w	800320e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80030c2:	4b62      	ldr	r3, [pc, #392]	; (800324c <SD_disk_initialize+0x1d0>)
 80030c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030c8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80030ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80030ce:	2048      	movs	r0, #72	; 0x48
 80030d0:	f7ff ff7f 	bl	8002fd2 <SD_SendCmd>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d158      	bne.n	800318c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e00c      	b.n	80030fa <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80030e0:	7bfc      	ldrb	r4, [r7, #15]
 80030e2:	f7ff fe65 	bl	8002db0 <SPI_RxByte>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	f104 0310 	add.w	r3, r4, #16
 80030ee:	443b      	add	r3, r7
 80030f0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	3301      	adds	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d9ef      	bls.n	80030e0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003100:	7abb      	ldrb	r3, [r7, #10]
 8003102:	2b01      	cmp	r3, #1
 8003104:	f040 8083 	bne.w	800320e <SD_disk_initialize+0x192>
 8003108:	7afb      	ldrb	r3, [r7, #11]
 800310a:	2baa      	cmp	r3, #170	; 0xaa
 800310c:	d17f      	bne.n	800320e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800310e:	2100      	movs	r1, #0
 8003110:	2077      	movs	r0, #119	; 0x77
 8003112:	f7ff ff5e 	bl	8002fd2 <SD_SendCmd>
 8003116:	4603      	mov	r3, r0
 8003118:	2b01      	cmp	r3, #1
 800311a:	d807      	bhi.n	800312c <SD_disk_initialize+0xb0>
 800311c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003120:	2069      	movs	r0, #105	; 0x69
 8003122:	f7ff ff56 	bl	8002fd2 <SD_SendCmd>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800312c:	4b47      	ldr	r3, [pc, #284]	; (800324c <SD_disk_initialize+0x1d0>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1eb      	bne.n	800310e <SD_disk_initialize+0x92>
 8003136:	e000      	b.n	800313a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003138:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <SD_disk_initialize+0x1d0>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d064      	beq.n	800320e <SD_disk_initialize+0x192>
 8003144:	2100      	movs	r1, #0
 8003146:	207a      	movs	r0, #122	; 0x7a
 8003148:	f7ff ff43 	bl	8002fd2 <SD_SendCmd>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d15d      	bne.n	800320e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	e00c      	b.n	8003172 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8003158:	7bfc      	ldrb	r4, [r7, #15]
 800315a:	f7ff fe29 	bl	8002db0 <SPI_RxByte>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	f104 0310 	add.w	r3, r4, #16
 8003166:	443b      	add	r3, r7
 8003168:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	3301      	adds	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d9ef      	bls.n	8003158 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003178:	7a3b      	ldrb	r3, [r7, #8]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <SD_disk_initialize+0x10a>
 8003182:	230c      	movs	r3, #12
 8003184:	e000      	b.n	8003188 <SD_disk_initialize+0x10c>
 8003186:	2304      	movs	r3, #4
 8003188:	73bb      	strb	r3, [r7, #14]
 800318a:	e040      	b.n	800320e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800318c:	2100      	movs	r1, #0
 800318e:	2077      	movs	r0, #119	; 0x77
 8003190:	f7ff ff1f 	bl	8002fd2 <SD_SendCmd>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d808      	bhi.n	80031ac <SD_disk_initialize+0x130>
 800319a:	2100      	movs	r1, #0
 800319c:	2069      	movs	r0, #105	; 0x69
 800319e:	f7ff ff18 	bl	8002fd2 <SD_SendCmd>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d801      	bhi.n	80031ac <SD_disk_initialize+0x130>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e000      	b.n	80031ae <SD_disk_initialize+0x132>
 80031ac:	2301      	movs	r3, #1
 80031ae:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80031b0:	7bbb      	ldrb	r3, [r7, #14]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d10e      	bne.n	80031d4 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80031b6:	2100      	movs	r1, #0
 80031b8:	2077      	movs	r0, #119	; 0x77
 80031ba:	f7ff ff0a 	bl	8002fd2 <SD_SendCmd>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d80e      	bhi.n	80031e2 <SD_disk_initialize+0x166>
 80031c4:	2100      	movs	r1, #0
 80031c6:	2069      	movs	r0, #105	; 0x69
 80031c8:	f7ff ff03 	bl	8002fd2 <SD_SendCmd>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <SD_disk_initialize+0x166>
 80031d2:	e00d      	b.n	80031f0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80031d4:	2100      	movs	r1, #0
 80031d6:	2041      	movs	r0, #65	; 0x41
 80031d8:	f7ff fefb 	bl	8002fd2 <SD_SendCmd>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <SD_disk_initialize+0x1d0>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e1      	bne.n	80031b0 <SD_disk_initialize+0x134>
 80031ec:	e000      	b.n	80031f0 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80031ee:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80031f0:	4b16      	ldr	r3, [pc, #88]	; (800324c <SD_disk_initialize+0x1d0>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <SD_disk_initialize+0x18e>
 80031fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031fe:	2050      	movs	r0, #80	; 0x50
 8003200:	f7ff fee7 	bl	8002fd2 <SD_SendCmd>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <SD_disk_initialize+0x192>
 800320a:	2300      	movs	r3, #0
 800320c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800320e:	4a10      	ldr	r2, [pc, #64]	; (8003250 <SD_disk_initialize+0x1d4>)
 8003210:	7bbb      	ldrb	r3, [r7, #14]
 8003212:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003214:	f7ff fd8e 	bl	8002d34 <DESELECT>
	SPI_RxByte();
 8003218:	f7ff fdca 	bl	8002db0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800321c:	7bbb      	ldrb	r3, [r7, #14]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <SD_disk_initialize+0x1cc>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <SD_disk_initialize+0x1cc>)
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e001      	b.n	8003238 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003234:	f7ff fe42 	bl	8002ebc <SD_PowerOff>
	}

	return Stat;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <SD_disk_initialize+0x1cc>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bd90      	pop	{r4, r7, pc}
 8003246:	bf00      	nop
 8003248:	2000000d 	.word	0x2000000d
 800324c:	200025de 	.word	0x200025de
 8003250:	200025f4 	.word	0x200025f4

08003254 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <SD_disk_status+0x14>
 8003264:	2301      	movs	r3, #1
 8003266:	e002      	b.n	800326e <SD_disk_status+0x1a>
	return Stat;
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <SD_disk_status+0x28>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b2db      	uxtb	r3, r3
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	2000000d 	.word	0x2000000d

08003280 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4603      	mov	r3, r0
 800328e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <SD_disk_read+0x1c>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <SD_disk_read+0x20>
 800329c:	2304      	movs	r3, #4
 800329e:	e054      	b.n	800334a <SD_disk_read+0xca>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80032a0:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <SD_disk_read+0xd4>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <SD_disk_read+0x32>
 80032ae:	2303      	movs	r3, #3
 80032b0:	e04b      	b.n	800334a <SD_disk_read+0xca>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80032b2:	4b29      	ldr	r3, [pc, #164]	; (8003358 <SD_disk_read+0xd8>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <SD_disk_read+0x44>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	025b      	lsls	r3, r3, #9
 80032c2:	607b      	str	r3, [r7, #4]

	SELECT();
 80032c4:	f7ff fd2c 	bl	8002d20 <SELECT>

	if (count == 1)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d111      	bne.n	80032f2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	2051      	movs	r0, #81	; 0x51
 80032d2:	f7ff fe7e 	bl	8002fd2 <SD_SendCmd>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d12c      	bne.n	8003336 <SD_disk_read+0xb6>
 80032dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e0:	68b8      	ldr	r0, [r7, #8]
 80032e2:	f7ff fe03 	bl	8002eec <SD_RxDataBlock>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d024      	beq.n	8003336 <SD_disk_read+0xb6>
 80032ec:	2300      	movs	r3, #0
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	e021      	b.n	8003336 <SD_disk_read+0xb6>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	2052      	movs	r0, #82	; 0x52
 80032f6:	f7ff fe6c 	bl	8002fd2 <SD_SendCmd>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11a      	bne.n	8003336 <SD_disk_read+0xb6>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003304:	68b8      	ldr	r0, [r7, #8]
 8003306:	f7ff fdf1 	bl	8002eec <SD_RxDataBlock>
 800330a:	4603      	mov	r3, r0
 800330c:	f083 0301 	eor.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <SD_disk_read+0xac>
				buff += 512;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800331c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	3b01      	subs	r3, #1
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ea      	bne.n	8003300 <SD_disk_read+0x80>
 800332a:	e000      	b.n	800332e <SD_disk_read+0xae>
				if (!SD_RxDataBlock(buff, 512)) break;
 800332c:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800332e:	2100      	movs	r1, #0
 8003330:	204c      	movs	r0, #76	; 0x4c
 8003332:	f7ff fe4e 	bl	8002fd2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003336:	f7ff fcfd 	bl	8002d34 <DESELECT>
	SPI_RxByte();
 800333a:	f7ff fd39 	bl	8002db0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000000d 	.word	0x2000000d
 8003358:	200025f4 	.word	0x200025f4

0800335c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <SD_disk_write+0x1c>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <SD_disk_write+0x20>
 8003378:	2304      	movs	r3, #4
 800337a:	e071      	b.n	8003460 <SD_disk_write+0x104>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800337c:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <SD_disk_write+0x10c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <SD_disk_write+0x32>
 800338a:	2303      	movs	r3, #3
 800338c:	e068      	b.n	8003460 <SD_disk_write+0x104>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <SD_disk_write+0x10c>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <SD_disk_write+0x44>
 800339c:	2302      	movs	r3, #2
 800339e:	e05f      	b.n	8003460 <SD_disk_write+0x104>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80033a0:	4b32      	ldr	r3, [pc, #200]	; (800346c <SD_disk_write+0x110>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <SD_disk_write+0x56>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	025b      	lsls	r3, r3, #9
 80033b0:	607b      	str	r3, [r7, #4]

	SELECT();
 80033b2:	f7ff fcb5 	bl	8002d20 <SELECT>

	if (count == 1)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d110      	bne.n	80033de <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	2058      	movs	r0, #88	; 0x58
 80033c0:	f7ff fe07 	bl	8002fd2 <SD_SendCmd>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d140      	bne.n	800344c <SD_disk_write+0xf0>
 80033ca:	21fe      	movs	r1, #254	; 0xfe
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f7ff fdbd 	bl	8002f4c <SD_TxDataBlock>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d039      	beq.n	800344c <SD_disk_write+0xf0>
			count = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	e036      	b.n	800344c <SD_disk_write+0xf0>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80033de:	4b23      	ldr	r3, [pc, #140]	; (800346c <SD_disk_write+0x110>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80033ea:	2100      	movs	r1, #0
 80033ec:	2077      	movs	r0, #119	; 0x77
 80033ee:	f7ff fdf0 	bl	8002fd2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	2057      	movs	r0, #87	; 0x57
 80033f6:	f7ff fdec 	bl	8002fd2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	2059      	movs	r0, #89	; 0x59
 80033fe:	f7ff fde8 	bl	8002fd2 <SD_SendCmd>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d121      	bne.n	800344c <SD_disk_write+0xf0>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003408:	21fc      	movs	r1, #252	; 0xfc
 800340a:	68b8      	ldr	r0, [r7, #8]
 800340c:	f7ff fd9e 	bl	8002f4c <SD_TxDataBlock>
 8003410:	4603      	mov	r3, r0
 8003412:	f083 0301 	eor.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <SD_disk_write+0xd6>
				buff += 512;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003422:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	3b01      	subs	r3, #1
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1eb      	bne.n	8003408 <SD_disk_write+0xac>
 8003430:	e000      	b.n	8003434 <SD_disk_write+0xd8>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003432:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003434:	21fd      	movs	r1, #253	; 0xfd
 8003436:	2000      	movs	r0, #0
 8003438:	f7ff fd88 	bl	8002f4c <SD_TxDataBlock>
 800343c:	4603      	mov	r3, r0
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <SD_disk_write+0xf0>
			{
				count = 1;
 8003448:	2301      	movs	r3, #1
 800344a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800344c:	f7ff fc72 	bl	8002d34 <DESELECT>
	SPI_RxByte();
 8003450:	f7ff fcae 	bl	8002db0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000000d 	.word	0x2000000d
 800346c:	200025f4 	.word	0x200025f4

08003470 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b08b      	sub	sp, #44	; 0x2c
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	603a      	str	r2, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
 800347c:	460b      	mov	r3, r1
 800347e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <SD_disk_ioctl+0x1e>
 800348a:	2304      	movs	r3, #4
 800348c:	e115      	b.n	80036ba <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8003494:	79bb      	ldrb	r3, [r7, #6]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d124      	bne.n	80034e4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d012      	beq.n	80034c8 <SD_disk_ioctl+0x58>
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	dc1a      	bgt.n	80034dc <SD_disk_ioctl+0x6c>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <SD_disk_ioctl+0x40>
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d006      	beq.n	80034bc <SD_disk_ioctl+0x4c>
 80034ae:	e015      	b.n	80034dc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80034b0:	f7ff fd04 	bl	8002ebc <SD_PowerOff>
			res = RES_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80034ba:	e0fc      	b.n	80036b6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80034bc:	f7ff fcbc 	bl	8002e38 <SD_PowerOn>
			res = RES_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80034c6:	e0f6      	b.n	80036b6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	1c5c      	adds	r4, r3, #1
 80034cc:	f7ff fd02 	bl	8002ed4 <SD_CheckPower>
 80034d0:	4603      	mov	r3, r0
 80034d2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80034da:	e0ec      	b.n	80036b6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80034dc:	2304      	movs	r3, #4
 80034de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034e2:	e0e8      	b.n	80036b6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80034e4:	4b77      	ldr	r3, [pc, #476]	; (80036c4 <SD_disk_ioctl+0x254>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <SD_disk_ioctl+0x86>
 80034f2:	2303      	movs	r3, #3
 80034f4:	e0e1      	b.n	80036ba <SD_disk_ioctl+0x24a>

		SELECT();
 80034f6:	f7ff fc13 	bl	8002d20 <SELECT>

		switch (ctrl)
 80034fa:	79bb      	ldrb	r3, [r7, #6]
 80034fc:	2b0d      	cmp	r3, #13
 80034fe:	f200 80cb 	bhi.w	8003698 <SD_disk_ioctl+0x228>
 8003502:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <SD_disk_ioctl+0x98>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	08003603 	.word	0x08003603
 800350c:	08003541 	.word	0x08003541
 8003510:	080035f3 	.word	0x080035f3
 8003514:	08003699 	.word	0x08003699
 8003518:	08003699 	.word	0x08003699
 800351c:	08003699 	.word	0x08003699
 8003520:	08003699 	.word	0x08003699
 8003524:	08003699 	.word	0x08003699
 8003528:	08003699 	.word	0x08003699
 800352c:	08003699 	.word	0x08003699
 8003530:	08003699 	.word	0x08003699
 8003534:	08003615 	.word	0x08003615
 8003538:	08003639 	.word	0x08003639
 800353c:	0800365d 	.word	0x0800365d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003540:	2100      	movs	r1, #0
 8003542:	2049      	movs	r0, #73	; 0x49
 8003544:	f7ff fd45 	bl	8002fd2 <SD_SendCmd>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 80a8 	bne.w	80036a0 <SD_disk_ioctl+0x230>
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	2110      	movs	r1, #16
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fcc8 	bl	8002eec <SD_RxDataBlock>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 809e 	beq.w	80036a0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8003564:	7b3b      	ldrb	r3, [r7, #12]
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10e      	bne.n	800358c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800356e:	7d7b      	ldrb	r3, [r7, #21]
 8003570:	b29a      	uxth	r2, r3
 8003572:	7d3b      	ldrb	r3, [r7, #20]
 8003574:	b29b      	uxth	r3, r3
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	b29b      	uxth	r3, r3
 800357a:	4413      	add	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	3301      	adds	r3, #1
 8003580:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003582:	8bfb      	ldrh	r3, [r7, #30]
 8003584:	029a      	lsls	r2, r3, #10
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e02e      	b.n	80035ea <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800358c:	7c7b      	ldrb	r3, [r7, #17]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	b2da      	uxtb	r2, r3
 8003594:	7dbb      	ldrb	r3, [r7, #22]
 8003596:	09db      	lsrs	r3, r3, #7
 8003598:	b2db      	uxtb	r3, r3
 800359a:	4413      	add	r3, r2
 800359c:	b2da      	uxtb	r2, r3
 800359e:	7d7b      	ldrb	r3, [r7, #21]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f003 0306 	and.w	r3, r3, #6
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3302      	adds	r3, #2
 80035b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80035b4:	7d3b      	ldrb	r3, [r7, #20]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	7cbb      	ldrb	r3, [r7, #18]
 80035ca:	029b      	lsls	r3, r3, #10
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80035dc:	8bfa      	ldrh	r2, [r7, #30]
 80035de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035e2:	3b09      	subs	r3, #9
 80035e4:	409a      	lsls	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80035f0:	e056      	b.n	80036a0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003600:	e055      	b.n	80036ae <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003602:	f7ff fbff 	bl	8002e04 <SD_ReadyWait>
 8003606:	4603      	mov	r3, r0
 8003608:	2bff      	cmp	r3, #255	; 0xff
 800360a:	d14b      	bne.n	80036a4 <SD_disk_ioctl+0x234>
 800360c:	2300      	movs	r3, #0
 800360e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003612:	e047      	b.n	80036a4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003614:	2100      	movs	r1, #0
 8003616:	2049      	movs	r0, #73	; 0x49
 8003618:	f7ff fcdb 	bl	8002fd2 <SD_SendCmd>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d142      	bne.n	80036a8 <SD_disk_ioctl+0x238>
 8003622:	2110      	movs	r1, #16
 8003624:	6a38      	ldr	r0, [r7, #32]
 8003626:	f7ff fc61 	bl	8002eec <SD_RxDataBlock>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03b      	beq.n	80036a8 <SD_disk_ioctl+0x238>
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003636:	e037      	b.n	80036a8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003638:	2100      	movs	r1, #0
 800363a:	204a      	movs	r0, #74	; 0x4a
 800363c:	f7ff fcc9 	bl	8002fd2 <SD_SendCmd>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d132      	bne.n	80036ac <SD_disk_ioctl+0x23c>
 8003646:	2110      	movs	r1, #16
 8003648:	6a38      	ldr	r0, [r7, #32]
 800364a:	f7ff fc4f 	bl	8002eec <SD_RxDataBlock>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d02b      	beq.n	80036ac <SD_disk_ioctl+0x23c>
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800365a:	e027      	b.n	80036ac <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800365c:	2100      	movs	r1, #0
 800365e:	207a      	movs	r0, #122	; 0x7a
 8003660:	f7ff fcb7 	bl	8002fd2 <SD_SendCmd>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800366a:	2300      	movs	r3, #0
 800366c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003670:	e00b      	b.n	800368a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8003672:	6a3c      	ldr	r4, [r7, #32]
 8003674:	1c63      	adds	r3, r4, #1
 8003676:	623b      	str	r3, [r7, #32]
 8003678:	f7ff fb9a 	bl	8002db0 <SPI_RxByte>
 800367c:	4603      	mov	r3, r0
 800367e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003684:	3301      	adds	r3, #1
 8003686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800368a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800368e:	2b03      	cmp	r3, #3
 8003690:	d9ef      	bls.n	8003672 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8003698:	2304      	movs	r3, #4
 800369a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800369e:	e006      	b.n	80036ae <SD_disk_ioctl+0x23e>
			break;
 80036a0:	bf00      	nop
 80036a2:	e004      	b.n	80036ae <SD_disk_ioctl+0x23e>
			break;
 80036a4:	bf00      	nop
 80036a6:	e002      	b.n	80036ae <SD_disk_ioctl+0x23e>
			break;
 80036a8:	bf00      	nop
 80036aa:	e000      	b.n	80036ae <SD_disk_ioctl+0x23e>
			break;
 80036ac:	bf00      	nop
		}

		DESELECT();
 80036ae:	f7ff fb41 	bl	8002d34 <DESELECT>
		SPI_RxByte();
 80036b2:	f7ff fb7d 	bl	8002db0 <SPI_RxByte>
	}

	return res;
 80036b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	372c      	adds	r7, #44	; 0x2c
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000000d 	.word	0x2000000d

080036c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive number to identify the drive */
)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fcd1 	bl	800307c <SD_disk_initialize>
 80036da:	4603      	mov	r3, r0
 80036dc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fdae 	bl	8003254 <SD_disk_status>
 80036f8:	4603      	mov	r3, r0
 80036fa:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003714:	7bf8      	ldrb	r0, [r7, #15]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	f7ff fdb0 	bl	8003280 <SD_disk_read>
 8003720:	4603      	mov	r3, r0
 8003722:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <USER_write>:
	BYTE pdrv,          /* Physical drive number to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800373c:	7bf8      	ldrb	r0, [r7, #15]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	f7ff fe0a 	bl	800335c <SD_disk_write>
 8003748:	4603      	mov	r3, r0
 800374a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	603a      	str	r2, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
 8003760:	460b      	mov	r3, r1
 8003762:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	79b9      	ldrb	r1, [r7, #6]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fe80 	bl	8003470 <SD_disk_ioctl>
 8003770:	4603      	mov	r3, r0
 8003772:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	4a08      	ldr	r2, [pc, #32]	; (80037ac <disk_status+0x30>)
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	79fa      	ldrb	r2, [r7, #7]
 8003794:	4905      	ldr	r1, [pc, #20]	; (80037ac <disk_status+0x30>)
 8003796:	440a      	add	r2, r1
 8003798:	7a12      	ldrb	r2, [r2, #8]
 800379a:	4610      	mov	r0, r2
 800379c:	4798      	blx	r3
 800379e:	4603      	mov	r3, r0
 80037a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20002a80 	.word	0x20002a80

080037b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <disk_initialize+0x48>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d111      	bne.n	80037ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <disk_initialize+0x48>)
 80037cc:	2101      	movs	r1, #1
 80037ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <disk_initialize+0x48>)
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	79fa      	ldrb	r2, [r7, #7]
 80037de:	4906      	ldr	r1, [pc, #24]	; (80037f8 <disk_initialize+0x48>)
 80037e0:	440a      	add	r2, r1
 80037e2:	7a12      	ldrb	r2, [r2, #8]
 80037e4:	4610      	mov	r0, r2
 80037e6:	4798      	blx	r3
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20002a80 	.word	0x20002a80

080037fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <disk_read+0x3c>)
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	689c      	ldr	r4, [r3, #8]
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	4a07      	ldr	r2, [pc, #28]	; (8003838 <disk_read+0x3c>)
 800381c:	4413      	add	r3, r2
 800381e:	7a18      	ldrb	r0, [r3, #8]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	47a0      	blx	r4
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]
  return res;
 800382c:	7dfb      	ldrb	r3, [r7, #23]
}
 800382e:	4618      	mov	r0, r3
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd90      	pop	{r4, r7, pc}
 8003836:	bf00      	nop
 8003838:	20002a80 	.word	0x20002a80

0800383c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4603      	mov	r3, r0
 800384a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <disk_write+0x3c>)
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68dc      	ldr	r4, [r3, #12]
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	4a07      	ldr	r2, [pc, #28]	; (8003878 <disk_write+0x3c>)
 800385c:	4413      	add	r3, r2
 800385e:	7a18      	ldrb	r0, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	47a0      	blx	r4
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]
  return res;
 800386c:	7dfb      	ldrb	r3, [r7, #23]
}
 800386e:	4618      	mov	r0, r3
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd90      	pop	{r4, r7, pc}
 8003876:	bf00      	nop
 8003878:	20002a80 	.word	0x20002a80

0800387c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	603a      	str	r2, [r7, #0]
 8003886:	71fb      	strb	r3, [r7, #7]
 8003888:	460b      	mov	r3, r1
 800388a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <disk_ioctl+0x38>)
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	79fa      	ldrb	r2, [r7, #7]
 800389a:	4906      	ldr	r1, [pc, #24]	; (80038b4 <disk_ioctl+0x38>)
 800389c:	440a      	add	r2, r1
 800389e:	7a10      	ldrb	r0, [r2, #8]
 80038a0:	79b9      	ldrb	r1, [r7, #6]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	4798      	blx	r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20002a80 	.word	0x20002a80

080038b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80038c8:	89fb      	ldrh	r3, [r7, #14]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	b21a      	sxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b21b      	sxth	r3, r3
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b21b      	sxth	r3, r3
 80038d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80038da:	89fb      	ldrh	r3, [r7, #14]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3303      	adds	r3, #3
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	3202      	adds	r2, #2
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	3201      	adds	r2, #1
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003920:	68fb      	ldr	r3, [r7, #12]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800392e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003932:	b09d      	sub	sp, #116	; 0x74
 8003934:	af00      	add	r7, sp, #0
 8003936:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8003938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800393a:	3307      	adds	r3, #7
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2200      	movs	r2, #0
 8003942:	469a      	mov	sl, r3
 8003944:	4693      	mov	fp, r2
 8003946:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800394a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800394e:	f04f 0000 	mov.w	r0, #0
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	0219      	lsls	r1, r3, #8
 8003958:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800395c:	0210      	lsls	r0, r2, #8
 800395e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003960:	3306      	adds	r3, #6
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2200      	movs	r2, #0
 8003968:	461c      	mov	r4, r3
 800396a:	4615      	mov	r5, r2
 800396c:	ea40 0804 	orr.w	r8, r0, r4
 8003970:	ea41 0905 	orr.w	r9, r1, r5
 8003974:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8003978:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800397c:	f04f 0000 	mov.w	r0, #0
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	0219      	lsls	r1, r3, #8
 8003986:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800398a:	0210      	lsls	r0, r2, #8
 800398c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800398e:	3305      	adds	r3, #5
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2200      	movs	r2, #0
 8003996:	65bb      	str	r3, [r7, #88]	; 0x58
 8003998:	65fa      	str	r2, [r7, #92]	; 0x5c
 800399a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800399e:	4623      	mov	r3, r4
 80039a0:	4303      	orrs	r3, r0
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a4:	462b      	mov	r3, r5
 80039a6:	430b      	orrs	r3, r1
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039aa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80039ae:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 80039b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80039b6:	f04f 0000 	mov.w	r0, #0
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	0219      	lsls	r1, r3, #8
 80039c0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80039c4:	0210      	lsls	r0, r2, #8
 80039c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c8:	3304      	adds	r3, #4
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2200      	movs	r2, #0
 80039d0:	653b      	str	r3, [r7, #80]	; 0x50
 80039d2:	657a      	str	r2, [r7, #84]	; 0x54
 80039d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80039d8:	4623      	mov	r3, r4
 80039da:	4303      	orrs	r3, r0
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	462b      	mov	r3, r5
 80039e0:	430b      	orrs	r3, r1
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
 80039e4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80039e8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 80039ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80039f0:	f04f 0000 	mov.w	r0, #0
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	0219      	lsls	r1, r3, #8
 80039fa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80039fe:	0210      	lsls	r0, r2, #8
 8003a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a02:	3303      	adds	r3, #3
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2200      	movs	r2, #0
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a0c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a0e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003a12:	4623      	mov	r3, r4
 8003a14:	4303      	orrs	r3, r0
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	462b      	mov	r3, r5
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003a22:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8003a26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	0219      	lsls	r1, r3, #8
 8003a34:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a38:	0210      	lsls	r0, r2, #8
 8003a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2200      	movs	r2, #0
 8003a44:	643b      	str	r3, [r7, #64]	; 0x40
 8003a46:	647a      	str	r2, [r7, #68]	; 0x44
 8003a48:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	4303      	orrs	r3, r0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	462b      	mov	r3, r5
 8003a54:	430b      	orrs	r3, r1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a5c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8003a60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	020b      	lsls	r3, r1, #8
 8003a6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a72:	0202      	lsls	r2, r0, #8
 8003a74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a76:	3101      	adds	r1, #1
 8003a78:	7809      	ldrb	r1, [r1, #0]
 8003a7a:	b2c9      	uxtb	r1, r1
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a80:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003a82:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8003a86:	4621      	mov	r1, r4
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4319      	orrs	r1, r3
 8003a90:	60f9      	str	r1, [r7, #12]
 8003a92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a96:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8003a9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	020b      	lsls	r3, r1, #8
 8003aa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003aac:	0202      	lsls	r2, r0, #8
 8003aae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003ab0:	7809      	ldrb	r1, [r1, #0]
 8003ab2:	b2c9      	uxtb	r1, r1
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	6339      	str	r1, [r7, #48]	; 0x30
 8003ab8:	6378      	str	r0, [r7, #52]	; 0x34
 8003aba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003abe:	4621      	mov	r1, r4
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	6039      	str	r1, [r7, #0]
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	4319      	orrs	r1, r3
 8003ac8:	6079      	str	r1, [r7, #4]
 8003aca:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ace:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8003ad2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	3774      	adds	r7, #116	; 0x74
 8003adc:	46bd      	mov	sp, r7
 8003ade:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003ae2:	4770      	bx	lr

08003ae4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	887a      	ldrh	r2, [r7, #2]
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	887a      	ldrh	r2, [r7, #2]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	60fa      	str	r2, [r7, #12]
 8003b84:	783a      	ldrb	r2, [r7, #0]
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	0a02      	lsrs	r2, r0, #8
 8003b96:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003b9a:	0a0b      	lsrs	r3, r1, #8
 8003b9c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	60fa      	str	r2, [r7, #12]
 8003ba6:	783a      	ldrb	r2, [r7, #0]
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	0a02      	lsrs	r2, r0, #8
 8003bb8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003bbc:	0a0b      	lsrs	r3, r1, #8
 8003bbe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	60fa      	str	r2, [r7, #12]
 8003bc8:	783a      	ldrb	r2, [r7, #0]
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	0a02      	lsrs	r2, r0, #8
 8003bda:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003bde:	0a0b      	lsrs	r3, r1, #8
 8003be0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	60fa      	str	r2, [r7, #12]
 8003bea:	783a      	ldrb	r2, [r7, #0]
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	0a02      	lsrs	r2, r0, #8
 8003bfc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c00:	0a0b      	lsrs	r3, r1, #8
 8003c02:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	60fa      	str	r2, [r7, #12]
 8003c0c:	783a      	ldrb	r2, [r7, #0]
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	0a02      	lsrs	r2, r0, #8
 8003c1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c22:	0a0b      	lsrs	r3, r1, #8
 8003c24:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	60fa      	str	r2, [r7, #12]
 8003c2e:	783a      	ldrb	r2, [r7, #0]
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	0a02      	lsrs	r2, r0, #8
 8003c40:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c44:	0a0b      	lsrs	r3, r1, #8
 8003c46:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	60fa      	str	r2, [r7, #12]
 8003c50:	783a      	ldrb	r2, [r7, #0]
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	0a02      	lsrs	r2, r0, #8
 8003c62:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c66:	0a0b      	lsrs	r3, r1, #8
 8003c68:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	60fa      	str	r2, [r7, #12]
 8003c72:	783a      	ldrb	r2, [r7, #0]
 8003c74:	701a      	strb	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	1c53      	adds	r3, r2, #1
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	1c59      	adds	r1, r3, #1
 8003ca6:	6179      	str	r1, [r7, #20]
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f1      	bne.n	8003c9c <mem_cpy+0x1a>
	}
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	617a      	str	r2, [r7, #20]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f3      	bne.n	8003cd4 <mem_set+0x10>
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003cfa:	b480      	push	{r7}
 8003cfc:	b089      	sub	sp, #36	; 0x24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	61fa      	str	r2, [r7, #28]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	61ba      	str	r2, [r7, #24]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	1acb      	subs	r3, r1, r3
 8003d26:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <mem_cmp+0x40>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0eb      	beq.n	8003d12 <mem_cmp+0x18>

	return r;
 8003d3a:	697b      	ldr	r3, [r7, #20]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3724      	adds	r7, #36	; 0x24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003d52:	e002      	b.n	8003d5a <chk_chr+0x12>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <chk_chr+0x26>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d1f2      	bne.n	8003d54 <chk_chr+0xc>
	return *str;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	781b      	ldrb	r3, [r3, #0]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e029      	b.n	8003de8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003d94:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <chk_lock+0xb4>)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4413      	add	r3, r2
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01d      	beq.n	8003dde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <chk_lock+0xb4>)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	4413      	add	r3, r2
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d116      	bne.n	8003de2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003db4:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <chk_lock+0xb4>)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d10c      	bne.n	8003de2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <chk_lock+0xb4>)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4413      	add	r3, r2
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d102      	bne.n	8003de2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ddc:	e007      	b.n	8003dee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3301      	adds	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d9d2      	bls.n	8003d94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d109      	bne.n	8003e08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <chk_lock+0x80>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d101      	bne.n	8003e04 <chk_lock+0x84>
 8003e00:	2300      	movs	r3, #0
 8003e02:	e010      	b.n	8003e26 <chk_lock+0xa6>
 8003e04:	2312      	movs	r3, #18
 8003e06:	e00e      	b.n	8003e26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <chk_lock+0xa0>
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <chk_lock+0xb4>)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	4413      	add	r3, r2
 8003e16:	330c      	adds	r3, #12
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1e:	d101      	bne.n	8003e24 <chk_lock+0xa4>
 8003e20:	2310      	movs	r3, #16
 8003e22:	e000      	b.n	8003e26 <chk_lock+0xa6>
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20002600 	.word	0x20002600

08003e38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	e002      	b.n	8003e4a <enq_lock+0x12>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3301      	adds	r3, #1
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d806      	bhi.n	8003e5e <enq_lock+0x26>
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <enq_lock+0x40>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	4413      	add	r3, r2
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f2      	bne.n	8003e44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20002600 	.word	0x20002600

08003e7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e01f      	b.n	8003ecc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003e8c:	4a41      	ldr	r2, [pc, #260]	; (8003f94 <inc_lock+0x118>)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	4413      	add	r3, r2
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d113      	bne.n	8003ec6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003e9e:	4a3d      	ldr	r2, [pc, #244]	; (8003f94 <inc_lock+0x118>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d109      	bne.n	8003ec6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003eb2:	4a38      	ldr	r2, [pc, #224]	; (8003f94 <inc_lock+0x118>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	4413      	add	r3, r2
 8003eba:	3308      	adds	r3, #8
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d006      	beq.n	8003ed4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d9dc      	bls.n	8003e8c <inc_lock+0x10>
 8003ed2:	e000      	b.n	8003ed6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003ed4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d132      	bne.n	8003f42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e002      	b.n	8003ee8 <inc_lock+0x6c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d806      	bhi.n	8003efc <inc_lock+0x80>
 8003eee:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <inc_lock+0x118>)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	4413      	add	r3, r2
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f2      	bne.n	8003ee2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d101      	bne.n	8003f06 <inc_lock+0x8a>
 8003f02:	2300      	movs	r3, #0
 8003f04:	e040      	b.n	8003f88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4922      	ldr	r1, [pc, #136]	; (8003f94 <inc_lock+0x118>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	440b      	add	r3, r1
 8003f12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	491e      	ldr	r1, [pc, #120]	; (8003f94 <inc_lock+0x118>)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	440b      	add	r3, r1
 8003f20:	3304      	adds	r3, #4
 8003f22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f28:	491a      	ldr	r1, [pc, #104]	; (8003f94 <inc_lock+0x118>)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	440b      	add	r3, r1
 8003f30:	3308      	adds	r3, #8
 8003f32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <inc_lock+0x118>)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	4413      	add	r3, r2
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	2200      	movs	r2, #0
 8003f40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <inc_lock+0xe0>
 8003f48:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <inc_lock+0x118>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	4413      	add	r3, r2
 8003f50:	330c      	adds	r3, #12
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <inc_lock+0xe0>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e015      	b.n	8003f88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d108      	bne.n	8003f74 <inc_lock+0xf8>
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <inc_lock+0x118>)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	4413      	add	r3, r2
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	e001      	b.n	8003f78 <inc_lock+0xfc>
 8003f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f78:	4906      	ldr	r1, [pc, #24]	; (8003f94 <inc_lock+0x118>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	440b      	add	r3, r1
 8003f80:	330c      	adds	r3, #12
 8003f82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3301      	adds	r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20002600 	.word	0x20002600

08003f98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d825      	bhi.n	8003ff8 <dec_lock+0x60>
		n = Files[i].ctr;
 8003fac:	4a17      	ldr	r2, [pc, #92]	; (800400c <dec_lock+0x74>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	4413      	add	r3, r2
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc0:	d101      	bne.n	8003fc6 <dec_lock+0x2e>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <dec_lock+0x3a>
 8003fcc:	89fb      	ldrh	r3, [r7, #14]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003fd2:	4a0e      	ldr	r2, [pc, #56]	; (800400c <dec_lock+0x74>)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	4413      	add	r3, r2
 8003fda:	330c      	adds	r3, #12
 8003fdc:	89fa      	ldrh	r2, [r7, #14]
 8003fde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003fe0:	89fb      	ldrh	r3, [r7, #14]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <dec_lock+0x5a>
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <dec_lock+0x74>)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	4413      	add	r3, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	737b      	strb	r3, [r7, #13]
 8003ff6:	e001      	b.n	8003ffc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003ffc:	7b7b      	ldrb	r3, [r7, #13]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20002600 	.word	0x20002600

08004010 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e010      	b.n	8004040 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800401e:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <clear_lock+0x44>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	4413      	add	r3, r2
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	d105      	bne.n	800403a <clear_lock+0x2a>
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <clear_lock+0x44>)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	4413      	add	r3, r2
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3301      	adds	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d9eb      	bls.n	800401e <clear_lock+0xe>
	}
}
 8004046:	bf00      	nop
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	20002600 	.word	0x20002600

08004058 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	78db      	ldrb	r3, [r3, #3]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d034      	beq.n	80040d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7858      	ldrb	r0, [r3, #1]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800407c:	2301      	movs	r3, #1
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	f7ff fbdc 	bl	800383c <disk_write>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <sync_window+0x38>
			res = FR_DISK_ERR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
 800408e:	e022      	b.n	80040d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	1ad2      	subs	r2, r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d217      	bcs.n	80040d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	789b      	ldrb	r3, [r3, #2]
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	e010      	b.n	80040d0 <sync_window+0x78>
					wsect += fs->fsize;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7858      	ldrb	r0, [r3, #1]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040c2:	2301      	movs	r3, #1
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	f7ff fbb9 	bl	800383c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d8eb      	bhi.n	80040ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d01b      	beq.n	8004130 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ffad 	bl	8004058 <sync_window>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d113      	bne.n	8004130 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7858      	ldrb	r0, [r3, #1]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004112:	2301      	movs	r3, #1
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	f7ff fb71 	bl	80037fc <disk_read>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff87 	bl	8004058 <sync_window>
 800414a:	4603      	mov	r3, r0
 800414c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d158      	bne.n	8004206 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d148      	bne.n	80041ee <sync_fs+0xb2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	791b      	ldrb	r3, [r3, #4]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d144      	bne.n	80041ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3338      	adds	r3, #56	; 0x38
 8004168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fda8 	bl	8003cc4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3338      	adds	r3, #56	; 0x38
 8004178:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800417c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fcaf 	bl	8003ae4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3338      	adds	r3, #56	; 0x38
 800418a:	4921      	ldr	r1, [pc, #132]	; (8004210 <sync_fs+0xd4>)
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fcc4 	bl	8003b1a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3338      	adds	r3, #56	; 0x38
 8004196:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800419a:	491e      	ldr	r1, [pc, #120]	; (8004214 <sync_fs+0xd8>)
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fcbc 	bl	8003b1a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3338      	adds	r3, #56	; 0x38
 80041a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f7ff fcb2 	bl	8003b1a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3338      	adds	r3, #56	; 0x38
 80041ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7ff fca8 	bl	8003b1a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	7858      	ldrb	r0, [r3, #1]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e2:	2301      	movs	r3, #1
 80041e4:	f7ff fb2a 	bl	800383c <disk_write>
			fs->fsi_flag = 0;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fb40 	bl	800387c <disk_ioctl>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <sync_fs+0xca>
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	41615252 	.word	0x41615252
 8004214:	61417272 	.word	0x61417272

08004218 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3b02      	subs	r3, #2
 8004226:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	3b02      	subs	r3, #2
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d301      	bcc.n	8004238 <clust2sect+0x20>
 8004234:	2300      	movs	r3, #0
 8004236:	e008      	b.n	800424a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	895b      	ldrh	r3, [r3, #10]
 800423c:	461a      	mov	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	fb03 f202 	mul.w	r2, r3, r2
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	4413      	add	r3, r2
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	6809      	ldr	r1, [r1, #0]
 8004266:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	2901      	cmp	r1, #1
 800426c:	d904      	bls.n	8004278 <get_fat+0x20>
 800426e:	69b9      	ldr	r1, [r7, #24]
 8004270:	69c9      	ldr	r1, [r1, #28]
 8004272:	6838      	ldr	r0, [r7, #0]
 8004274:	4288      	cmp	r0, r1
 8004276:	d302      	bcc.n	800427e <get_fat+0x26>
		val = 1;	/* Internal error */
 8004278:	2301      	movs	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e101      	b.n	8004482 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800427e:	f04f 31ff 	mov.w	r1, #4294967295
 8004282:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	7809      	ldrb	r1, [r1, #0]
 8004288:	3901      	subs	r1, #1
 800428a:	2903      	cmp	r1, #3
 800428c:	f200 80ed 	bhi.w	800446a <get_fat+0x212>
 8004290:	a001      	add	r0, pc, #4	; (adr r0, 8004298 <get_fat+0x40>)
 8004292:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042a9 	.word	0x080042a9
 800429c:	08004331 	.word	0x08004331
 80042a0:	08004367 	.word	0x08004367
 80042a4:	0800439f 	.word	0x0800439f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	0a5b      	lsrs	r3, r3, #9
 80042be:	4413      	add	r3, r2
 80042c0:	4619      	mov	r1, r3
 80042c2:	69b8      	ldr	r0, [r7, #24]
 80042c4:	f7ff ff0c 	bl	80040e0 <move_window>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 80d0 	bne.w	8004470 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	60fa      	str	r2, [r7, #12]
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4413      	add	r3, r2
 80042de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042e2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	0a5b      	lsrs	r3, r3, #9
 80042ec:	4413      	add	r3, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	69b8      	ldr	r0, [r7, #24]
 80042f2:	f7ff fef5 	bl	80040e0 <move_window>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f040 80bb 	bne.w	8004474 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4413      	add	r3, r2
 8004308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	461a      	mov	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <get_fat+0xce>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	e002      	b.n	800432c <get_fat+0xd4>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432c:	61fb      	str	r3, [r7, #28]
			break;
 800432e:	e0a8      	b.n	8004482 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	4413      	add	r3, r2
 800433a:	4619      	mov	r1, r3
 800433c:	69b8      	ldr	r0, [r7, #24]
 800433e:	f7ff fecf 	bl	80040e0 <move_window>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	f040 8097 	bne.w	8004478 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004358:	4413      	add	r3, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff faac 	bl	80038b8 <ld_word>
 8004360:	4603      	mov	r3, r0
 8004362:	61fb      	str	r3, [r7, #28]
			break;
 8004364:	e08d      	b.n	8004482 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	09db      	lsrs	r3, r3, #7
 800436e:	4413      	add	r3, r2
 8004370:	4619      	mov	r1, r3
 8004372:	69b8      	ldr	r0, [r7, #24]
 8004374:	f7ff feb4 	bl	80040e0 <move_window>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d17e      	bne.n	800447c <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800438c:	4413      	add	r3, r2
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff faaa 	bl	80038e8 <ld_dword>
 8004394:	4603      	mov	r3, r0
 8004396:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800439a:	61fb      	str	r3, [r7, #28]
			break;
 800439c:	e071      	b.n	8004482 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80043a4:	4301      	orrs	r1, r0
 80043a6:	d060      	beq.n	800446a <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	6889      	ldr	r1, [r1, #8]
 80043ac:	6838      	ldr	r0, [r7, #0]
 80043ae:	1a41      	subs	r1, r0, r1
 80043b0:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80043b8:	1e42      	subs	r2, r0, #1
 80043ba:	f141 33ff 	adc.w	r3, r1, #4294967295
 80043be:	f04f 0000 	mov.w	r0, #0
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	0a50      	lsrs	r0, r2, #9
 80043c8:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80043cc:	0a59      	lsrs	r1, r3, #9
 80043ce:	4602      	mov	r2, r0
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	895b      	ldrh	r3, [r3, #10]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	79db      	ldrb	r3, [r3, #7]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d10e      	bne.n	8004400 <get_fat+0x1a8>
					if (cofs <= clen) {
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d80a      	bhi.n	8004400 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d002      	beq.n	80043f8 <get_fat+0x1a0>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	e001      	b.n	80043fc <get_fat+0x1a4>
 80043f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80043fc:	61fb      	str	r3, [r7, #28]
						break;
 80043fe:	e040      	b.n	8004482 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	79db      	ldrb	r3, [r3, #7]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d108      	bne.n	800441a <get_fat+0x1c2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	429a      	cmp	r2, r3
 8004410:	d203      	bcs.n	800441a <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	61fb      	str	r3, [r7, #28]
					break;
 8004418:	e033      	b.n	8004482 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	79db      	ldrb	r3, [r3, #7]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d023      	beq.n	800446a <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800442a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800442e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8004430:	e027      	b.n	8004482 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	09db      	lsrs	r3, r3, #7
 800443a:	4413      	add	r3, r2
 800443c:	4619      	mov	r1, r3
 800443e:	69b8      	ldr	r0, [r7, #24]
 8004440:	f7ff fe4e 	bl	80040e0 <move_window>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11a      	bne.n	8004480 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004458:	4413      	add	r3, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fa44 	bl	80038e8 <ld_dword>
 8004460:	4603      	mov	r3, r0
 8004462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004466:	61fb      	str	r3, [r7, #28]
					break;
 8004468:	e00b      	b.n	8004482 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800446a:	2301      	movs	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e008      	b.n	8004482 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004470:	bf00      	nop
 8004472:	e006      	b.n	8004482 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004474:	bf00      	nop
 8004476:	e004      	b.n	8004482 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004478:	bf00      	nop
 800447a:	e002      	b.n	8004482 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004480:	bf00      	nop
		}
	}

	return val;
 8004482:	69fb      	ldr	r3, [r7, #28]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004498:	2302      	movs	r3, #2
 800449a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	f240 80d6 	bls.w	8004650 <put_fat+0x1c4>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	f080 80d0 	bcs.w	8004650 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	f300 80d4 	bgt.w	8004662 <put_fat+0x1d6>
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	f280 8093 	bge.w	80045e6 <put_fat+0x15a>
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <put_fat+0x3e>
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d06e      	beq.n	80045a6 <put_fat+0x11a>
 80044c8:	e0cb      	b.n	8004662 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4413      	add	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	0a5b      	lsrs	r3, r3, #9
 80044e0:	4413      	add	r3, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fdfb 	bl	80040e0 <move_window>
 80044ea:	4603      	mov	r3, r0
 80044ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 80af 	bne.w	8004654 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	1c59      	adds	r1, r3, #1
 8004500:	61b9      	str	r1, [r7, #24]
 8004502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004506:	4413      	add	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <put_fat+0xa4>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	b25b      	sxtb	r3, r3
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	b25a      	sxtb	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	b25b      	sxtb	r3, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	b25b      	sxtb	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e001      	b.n	8004534 <put_fat+0xa8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	0a5b      	lsrs	r3, r3, #9
 8004546:	4413      	add	r3, r2
 8004548:	4619      	mov	r1, r3
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff fdc8 	bl	80040e0 <move_window>
 8004550:	4603      	mov	r3, r0
 8004552:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004554:	7ffb      	ldrb	r3, [r7, #31]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d17e      	bne.n	8004658 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	4413      	add	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <put_fat+0xf0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e00e      	b.n	800459a <put_fat+0x10e>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b25b      	sxtb	r3, r3
 8004582:	f023 030f 	bic.w	r3, r3, #15
 8004586:	b25a      	sxtb	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	b25b      	sxtb	r3, r3
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	b25b      	sxtb	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b25b      	sxtb	r3, r3
 8004598:	b2db      	uxtb	r3, r3
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	70da      	strb	r2, [r3, #3]
			break;
 80045a4:	e05d      	b.n	8004662 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	4413      	add	r3, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fd94 	bl	80040e0 <move_window>
 80045b8:	4603      	mov	r3, r0
 80045ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045bc:	7ffb      	ldrb	r3, [r7, #31]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d14c      	bne.n	800465c <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80045d0:	4413      	add	r3, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	b292      	uxth	r2, r2
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fa83 	bl	8003ae4 <st_word>
			fs->wflag = 1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	70da      	strb	r2, [r3, #3]
			break;
 80045e4:	e03d      	b.n	8004662 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	09db      	lsrs	r3, r3, #7
 80045ee:	4413      	add	r3, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff fd74 	bl	80040e0 <move_window>
 80045f8:	4603      	mov	r3, r0
 80045fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045fc:	7ffb      	ldrb	r3, [r7, #31]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d12e      	bne.n	8004660 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d012      	beq.n	8004630 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800461e:	4413      	add	r3, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff f961 	bl	80038e8 <ld_dword>
 8004626:	4603      	mov	r3, r0
 8004628:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800462c:	4323      	orrs	r3, r4
 800462e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800463e:	4413      	add	r3, r2
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fa69 	bl	8003b1a <st_dword>
			fs->wflag = 1;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	70da      	strb	r2, [r3, #3]
			break;
 800464e:	e008      	b.n	8004662 <put_fat+0x1d6>
		}
	}
 8004650:	bf00      	nop
 8004652:	e006      	b.n	8004662 <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004654:	bf00      	nop
 8004656:	e004      	b.n	8004662 <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004658:	bf00      	nop
 800465a:	e002      	b.n	8004662 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004660:	bf00      	nop
	return res;
 8004662:	7ffb      	ldrb	r3, [r7, #31]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3724      	adds	r7, #36	; 0x24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd90      	pop	{r4, r7, pc}

0800466c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3b02      	subs	r3, #2
 800467c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	3b02      	subs	r3, #2
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d301      	bcc.n	800468e <find_bitmap+0x22>
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	0b1b      	lsrs	r3, r3, #12
 80046a2:	4413      	add	r3, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff fd1a 	bl	80040e0 <move_window>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <find_bitmap+0x4c>
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	e051      	b.n	800475c <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	08db      	lsrs	r3, r3, #3
 80046bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	2201      	movs	r2, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	4413      	add	r3, r2
 80046d8:	3338      	adds	r3, #56	; 0x38
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046e0:	4013      	ands	r3, r2
 80046e2:	74fb      	strb	r3, [r7, #19]
 80046e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3301      	adds	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	3b02      	subs	r3, #2
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d307      	bcc.n	8004710 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8004700:	2300      	movs	r3, #0
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	2300      	movs	r3, #0
 8004706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800470a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800470e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	3301      	adds	r3, #1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d106      	bne.n	8004732 <find_bitmap+0xc6>
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	3302      	adds	r3, #2
 8004728:	e018      	b.n	800475c <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d101      	bne.n	800473e <find_bitmap+0xd2>
 800473a:	2300      	movs	r3, #0
 800473c:	e00e      	b.n	800475c <find_bitmap+0xf0>
			} while (bm);
 800473e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1c5      	bne.n	80046d2 <find_bitmap+0x66>
			bm = 1;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	3301      	adds	r3, #1
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004758:	d3bb      	bcc.n	80046d2 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800475a:	e79e      	b.n	800469a <find_bitmap+0x2e>
	}
}
 800475c:	4618      	mov	r0, r3
 800475e:	3728      	adds	r7, #40	; 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3b02      	subs	r3, #2
 8004776:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	0b1b      	lsrs	r3, r3, #12
 8004780:	4413      	add	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	08db      	lsrs	r3, r3, #3
 8004788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	2201      	movs	r2, #1
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	617a      	str	r2, [r7, #20]
 80047a2:	4619      	mov	r1, r3
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff fc9b 	bl	80040e0 <move_window>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <change_bitmap+0x50>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e03d      	b.n	8004830 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	4413      	add	r3, r2
 80047ba:	3338      	adds	r3, #56	; 0x38
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	7ffb      	ldrb	r3, [r7, #31]
 80047c0:	4013      	ands	r3, r2
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <change_bitmap+0x76>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e02a      	b.n	8004830 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	3338      	adds	r3, #56	; 0x38
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	7ffb      	ldrb	r3, [r7, #31]
 80047e6:	4053      	eors	r3, r2
 80047e8:	b2d9      	uxtb	r1, r3
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	4413      	add	r3, r2
 80047f0:	3338      	adds	r3, #56	; 0x38
 80047f2:	460a      	mov	r2, r1
 80047f4:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3b01      	subs	r3, #1
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <change_bitmap+0xa8>
 8004808:	2300      	movs	r3, #0
 800480a:	e011      	b.n	8004830 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800480c:	7ffb      	ldrb	r3, [r7, #31]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	7ffb      	ldrb	r3, [r7, #31]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1cd      	bne.n	80047b4 <change_bitmap+0x50>
			bm = 1;
 8004818:	2301      	movs	r3, #1
 800481a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	3301      	adds	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004828:	d3c4      	bcc.n	80047b4 <change_bitmap+0x50>
		i = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800482e:	e7b5      	b.n	800479c <change_bitmap+0x38>
	}
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	79db      	ldrb	r3, [r3, #7]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d121      	bne.n	800488c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e014      	b.n	8004880 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3301      	adds	r3, #1
 800485e:	461a      	mov	r2, r3
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	f7ff fe13 	bl	800448c <put_fat>
 8004866:	4603      	mov	r3, r0
 8004868:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <fill_first_frag+0x3c>
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	e00c      	b.n	800488e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3301      	adds	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	3b01      	subs	r3, #1
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e7      	bne.n	8004856 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80048a2:	e020      	b.n	80048e6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	1c59      	adds	r1, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d905      	bls.n	80048c6 <fill_last_frag+0x30>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	3302      	adds	r3, #2
 80048c4:	e000      	b.n	80048c8 <fill_last_frag+0x32>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	461a      	mov	r2, r3
 80048ca:	f7ff fddf 	bl	800448c <put_fat>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <fill_last_frag+0x46>
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	e009      	b.n	80048f0 <fill_last_frag+0x5a>
		obj->n_frag--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	1e5a      	subs	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1da      	bne.n	80048a4 <fill_last_frag+0xe>
	}
	return FR_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d904      	bls.n	8004926 <remove_chain+0x2e>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d301      	bcc.n	800492a <remove_chain+0x32>
 8004926:	2302      	movs	r3, #2
 8004928:	e096      	b.n	8004a58 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d014      	beq.n	800495a <remove_chain+0x62>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d103      	bne.n	8004940 <remove_chain+0x48>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	79db      	ldrb	r3, [r3, #7]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d00c      	beq.n	800495a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004940:	f04f 32ff 	mov.w	r2, #4294967295
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	69b8      	ldr	r0, [r7, #24]
 8004948:	f7ff fda0 	bl	800448c <put_fat>
 800494c:	4603      	mov	r3, r0
 800494e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004950:	7ffb      	ldrb	r3, [r7, #31]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <remove_chain+0x62>
 8004956:	7ffb      	ldrb	r3, [r7, #31]
 8004958:	e07e      	b.n	8004a58 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff fc7b 	bl	8004258 <get_fat>
 8004962:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d055      	beq.n	8004a16 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <remove_chain+0x7c>
 8004970:	2302      	movs	r3, #2
 8004972:	e071      	b.n	8004a58 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d101      	bne.n	8004980 <remove_chain+0x88>
 800497c:	2301      	movs	r3, #1
 800497e:	e06b      	b.n	8004a58 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d00b      	beq.n	80049a0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004988:	2200      	movs	r2, #0
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	69b8      	ldr	r0, [r7, #24]
 800498e:	f7ff fd7d 	bl	800448c <put_fat>
 8004992:	4603      	mov	r3, r0
 8004994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004996:	7ffb      	ldrb	r3, [r7, #31]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <remove_chain+0xa8>
 800499c:	7ffb      	ldrb	r3, [r7, #31]
 800499e:	e05b      	b.n	8004a58 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	3b02      	subs	r3, #2
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20b      	bcs.n	80049c6 <remove_chain+0xce>
			fs->free_clst++;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	791b      	ldrb	r3, [r3, #4]
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	3301      	adds	r3, #1
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d102      	bne.n	80049d6 <remove_chain+0xde>
			ecl = nxt;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	623b      	str	r3, [r7, #32]
 80049d4:	e017      	b.n	8004a06 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d10f      	bne.n	80049fe <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80049de:	6a3a      	ldr	r2, [r7, #32]
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	2300      	movs	r3, #0
 80049e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ea:	69b8      	ldr	r0, [r7, #24]
 80049ec:	f7ff feba 	bl	8004764 <change_bitmap>
 80049f0:	4603      	mov	r3, r0
 80049f2:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80049f4:	7ffb      	ldrb	r3, [r7, #31]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <remove_chain+0x106>
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	e02c      	b.n	8004a58 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3a2      	bcc.n	800495a <remove_chain+0x62>
 8004a14:	e000      	b.n	8004a18 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8004a16:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11a      	bne.n	8004a56 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	71da      	strb	r2, [r3, #7]
 8004a2c:	e013      	b.n	8004a56 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	79db      	ldrb	r3, [r3, #7]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d10f      	bne.n	8004a56 <remove_chain+0x15e>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d30a      	bcc.n	8004a56 <remove_chain+0x15e>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	4413      	add	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d802      	bhi.n	8004a56 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2202      	movs	r2, #2
 8004a54:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3728      	adds	r7, #40	; 0x28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <create_chain+0x2c>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d31b      	bcc.n	8004ac4 <create_chain+0x64>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	e018      	b.n	8004ac4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004a92:	6839      	ldr	r1, [r7, #0]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fbdf 	bl	8004258 <get_fat>
 8004a9a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d801      	bhi.n	8004aa6 <create_chain+0x46>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e0d9      	b.n	8004c5a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d101      	bne.n	8004ab2 <create_chain+0x52>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	e0d3      	b.n	8004c5a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d201      	bcs.n	8004ac0 <create_chain+0x60>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	e0cc      	b.n	8004c5a <create_chain+0x1fa>
		scl = clst;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d164      	bne.n	8004b96 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8004acc:	2201      	movs	r2, #1
 8004ace:	69b9      	ldr	r1, [r7, #24]
 8004ad0:	6938      	ldr	r0, [r7, #16]
 8004ad2:	f7ff fdcb 	bl	800466c <find_bitmap>
 8004ad6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <create_chain+0x86>
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d101      	bne.n	8004aea <create_chain+0x8a>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	e0b7      	b.n	8004c5a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8004aea:	2301      	movs	r3, #1
 8004aec:	2201      	movs	r2, #1
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	6938      	ldr	r0, [r7, #16]
 8004af2:	f7ff fe37 	bl	8004764 <change_bitmap>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d101      	bne.n	8004b04 <create_chain+0xa4>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0aa      	b.n	8004c5a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d102      	bne.n	8004b10 <create_chain+0xb0>
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0e:	e0a4      	b.n	8004c5a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	71da      	strb	r2, [r3, #7]
 8004b1c:	e011      	b.n	8004b42 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	79db      	ldrb	r3, [r3, #7]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d10d      	bne.n	8004b42 <create_chain+0xe2>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d008      	beq.n	8004b42 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	1ad2      	subs	r2, r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	79db      	ldrb	r3, [r3, #7]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d064      	beq.n	8004c14 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d10b      	bne.n	8004b6c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <create_chain+0x104>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e000      	b.n	8004b66 <create_chain+0x106>
 8004b64:	2302      	movs	r3, #2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	61d3      	str	r3, [r2, #28]
 8004b6a:	e053      	b.n	8004c14 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <create_chain+0x11a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fe89 	bl	8004896 <fill_last_frag>
 8004b84:	4603      	mov	r3, r0
 8004b86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d142      	bne.n	8004c14 <create_chain+0x1b4>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	61da      	str	r2, [r3, #28]
 8004b94:	e03e      	b.n	8004c14 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d307      	bcc.n	8004bba <create_chain+0x15a>
				ncl = 2;
 8004baa:	2302      	movs	r3, #2
 8004bac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d901      	bls.n	8004bba <create_chain+0x15a>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e04f      	b.n	8004c5a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004bba:	69f9      	ldr	r1, [r7, #28]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fb4b 	bl	8004258 <get_fat>
 8004bc2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00e      	beq.n	8004be8 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d003      	beq.n	8004bd8 <create_chain+0x178>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d101      	bne.n	8004bdc <create_chain+0x17c>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	e03e      	b.n	8004c5a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1da      	bne.n	8004b9a <create_chain+0x13a>
 8004be4:	2300      	movs	r3, #0
 8004be6:	e038      	b.n	8004c5a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8004be8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	69f9      	ldr	r1, [r7, #28]
 8004bf0:	6938      	ldr	r0, [r7, #16]
 8004bf2:	f7ff fc4b 	bl	800448c <put_fat>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <create_chain+0x1b4>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	6938      	ldr	r0, [r7, #16]
 8004c0c:	f7ff fc3e 	bl	800448c <put_fat>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	3b02      	subs	r3, #2
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d804      	bhi.n	8004c38 <create_chain+0x1d8>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	791b      	ldrb	r3, [r3, #4]
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	711a      	strb	r2, [r3, #4]
 8004c46:	e007      	b.n	8004c58 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d102      	bne.n	8004c54 <create_chain+0x1f4>
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e000      	b.n	8004c56 <create_chain+0x1f6>
 8004c54:	2301      	movs	r3, #1
 8004c56:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c58:	69fb      	ldr	r3, [r7, #28]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c62:	b5b0      	push	{r4, r5, r7, lr}
 8004c64:	b088      	sub	sp, #32
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c78:	3304      	adds	r3, #4
 8004c7a:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c80:	f04f 0000 	mov.w	r0, #0
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	0a50      	lsrs	r0, r2, #9
 8004c8a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8004c8e:	0a59      	lsrs	r1, r3, #9
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	895b      	ldrh	r3, [r3, #10]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2200      	movs	r2, #0
 8004c98:	461c      	mov	r4, r3
 8004c9a:	4615      	mov	r5, r2
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	f7fb fae6 	bl	8000270 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	1d1a      	adds	r2, r3, #4
 8004cb0:	61ba      	str	r2, [r7, #24]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <clmt_clust+0x5e>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e010      	b.n	8004ce2 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d307      	bcc.n	8004cd8 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cd6:	e7e9      	b.n	8004cac <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8004cd8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bdb0      	pop	{r4, r5, r7, pc}

08004cea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d102      	bne.n	8004d08 <dir_sdi+0x1e>
 8004d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d06:	e001      	b.n	8004d0c <dir_sdi+0x22>
 8004d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d904      	bls.n	8004d1c <dir_sdi+0x32>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <dir_sdi+0x36>
		return FR_INT_ERR;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e066      	b.n	8004dee <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <dir_sdi+0x5c>
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d905      	bls.n	8004d46 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	8912      	ldrh	r2, [r2, #8]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d301      	bcc.n	8004d5c <dir_sdi+0x72>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e048      	b.n	8004dee <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
 8004d64:	e029      	b.n	8004dba <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	895b      	ldrh	r3, [r3, #10]
 8004d6a:	025b      	lsls	r3, r3, #9
 8004d6c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d6e:	e019      	b.n	8004da4 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fa6f 	bl	8004258 <get_fat>
 8004d7a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d101      	bne.n	8004d88 <dir_sdi+0x9e>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e032      	b.n	8004dee <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d904      	bls.n	8004d98 <dir_sdi+0xae>
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d301      	bcc.n	8004d9c <dir_sdi+0xb2>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e028      	b.n	8004dee <dir_sdi+0x104>
			ofs -= csz;
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d2e1      	bcs.n	8004d70 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8004dac:	6979      	ldr	r1, [r7, #20]
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	f7ff fa32 	bl	8004218 <clust2sect>
 8004db4:	4602      	mov	r2, r0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <dir_sdi+0xe2>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e010      	b.n	8004dee <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	0a5b      	lsrs	r3, r3, #9
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de6:	441a      	add	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b086      	sub	sp, #24
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	3320      	adds	r3, #32
 8004e0c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <dir_next+0x38>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d102      	bne.n	8004e24 <dir_next+0x2e>
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	e001      	b.n	8004e28 <dir_next+0x32>
 8004e24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d801      	bhi.n	8004e32 <dir_next+0x3c>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	e0b2      	b.n	8004f98 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 80a0 	bne.w	8004f7e <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	8912      	ldrh	r2, [r2, #8]
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	f0c0 8090 	bcc.w	8004f7e <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
 8004e64:	2304      	movs	r3, #4
 8004e66:	e097      	b.n	8004f98 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	0a5b      	lsrs	r3, r3, #9
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	8952      	ldrh	r2, [r2, #10]
 8004e70:	3a01      	subs	r2, #1
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f040 8082 	bne.w	8004f7e <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7ff f9e8 	bl	8004258 <get_fat>
 8004e88:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d801      	bhi.n	8004e94 <dir_next+0x9e>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e081      	b.n	8004f98 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d101      	bne.n	8004ea0 <dir_next+0xaa>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e07b      	b.n	8004f98 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d35f      	bcc.n	8004f6a <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e06e      	b.n	8004f98 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7ff fdcc 	bl	8004a60 <create_chain>
 8004ec8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <dir_next+0xde>
 8004ed0:	2307      	movs	r3, #7
 8004ed2:	e061      	b.n	8004f98 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <dir_next+0xe8>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e05c      	b.n	8004f98 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d101      	bne.n	8004eea <dir_next+0xf4>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e056      	b.n	8004f98 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	79db      	ldrb	r3, [r3, #7]
 8004eee:	f043 0304 	orr.w	r3, r3, #4
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff f8ad 	bl	8004058 <sync_window>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <dir_next+0x112>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e047      	b.n	8004f98 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3338      	adds	r3, #56	; 0x38
 8004f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f10:	2100      	movs	r1, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fed6 	bl	8003cc4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	6979      	ldr	r1, [r7, #20]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff f97a 	bl	8004218 <clust2sect>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2a:	e012      	b.n	8004f52 <dir_next+0x15c>
						fs->wflag = 1;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff f890 	bl	8004058 <sync_window>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <dir_next+0x14c>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e02a      	b.n	8004f98 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	635a      	str	r2, [r3, #52]	; 0x34
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	895b      	ldrh	r3, [r3, #10]
 8004f56:	461a      	mov	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d3e6      	bcc.n	8004f2c <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad2      	subs	r2, r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff f950 	bl	8004218 <clust2sect>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f90:	441a      	add	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fe99 	bl	8004cea <dir_sdi>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d140      	bne.n	8005044 <dir_alloc+0xa4>
		n = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff f887 	bl	80040e0 <move_window>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d132      	bne.n	8005042 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d108      	bne.n	8004ff6 <dir_alloc+0x56>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	b25b      	sxtb	r3, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	09db      	lsrs	r3, r3, #7
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	e00f      	b.n	8005016 <dir_alloc+0x76>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2be5      	cmp	r3, #229	; 0xe5
 8004ffe:	d004      	beq.n	800500a <dir_alloc+0x6a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <dir_alloc+0x6e>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <dir_alloc+0x70>
 800500e:	2300      	movs	r3, #0
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3301      	adds	r3, #1
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d102      	bne.n	800502e <dir_alloc+0x8e>
 8005028:	e00c      	b.n	8005044 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800502e:	2101      	movs	r1, #1
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fee0 	bl	8004df6 <dir_next>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0c2      	beq.n	8004fc6 <dir_alloc+0x26>
 8005040:	e000      	b.n	8005044 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8005042:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	2b04      	cmp	r3, #4
 8005048:	d101      	bne.n	800504e <dir_alloc+0xae>
 800504a:	2307      	movs	r3, #7
 800504c:	75fb      	strb	r3, [r7, #23]
	return res;
 800504e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	331a      	adds	r3, #26
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fc26 	bl	80038b8 <ld_word>
 800506c:	4603      	mov	r3, r0
 800506e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d109      	bne.n	800508c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe fc1b 	bl	80038b8 <ld_word>
 8005082:	4603      	mov	r3, r0
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	331a      	adds	r3, #26
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	b292      	uxth	r2, r2
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe fd19 	bl	8003ae4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d109      	bne.n	80050ce <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f103 0214 	add.w	r2, r3, #20
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7fe fd0b 	bl	8003ae4 <st_word>
	}
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	331a      	adds	r3, #26
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fbe6 	bl	80038b8 <ld_word>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <cmp_lfn+0x1e>
 80050f2:	2300      	movs	r3, #0
 80050f4:	e059      	b.n	80051aa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050fe:	1e5a      	subs	r2, r3, #1
 8005100:	4613      	mov	r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800510c:	2301      	movs	r3, #1
 800510e:	81fb      	strh	r3, [r7, #14]
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	e033      	b.n	800517e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005116:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <cmp_lfn+0xdc>)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4413      	add	r3, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fbc7 	bl	80038b8 <ld_word>
 800512a:	4603      	mov	r3, r0
 800512c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800512e:	89fb      	ldrh	r3, [r7, #14]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01a      	beq.n	800516a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2bfe      	cmp	r3, #254	; 0xfe
 8005138:	d812      	bhi.n	8005160 <cmp_lfn+0x88>
 800513a:	89bb      	ldrh	r3, [r7, #12]
 800513c:	4618      	mov	r0, r3
 800513e:	f003 f863 	bl	8008208 <ff_wtoupper>
 8005142:	4603      	mov	r3, r0
 8005144:	461c      	mov	r4, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	617a      	str	r2, [r7, #20]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f003 f857 	bl	8008208 <ff_wtoupper>
 800515a:	4603      	mov	r3, r0
 800515c:	429c      	cmp	r4, r3
 800515e:	d001      	beq.n	8005164 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005160:	2300      	movs	r3, #0
 8005162:	e022      	b.n	80051aa <cmp_lfn+0xd2>
			}
			wc = uc;
 8005164:	89bb      	ldrh	r3, [r7, #12]
 8005166:	81fb      	strh	r3, [r7, #14]
 8005168:	e006      	b.n	8005178 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800516a:	89bb      	ldrh	r3, [r7, #12]
 800516c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005170:	4293      	cmp	r3, r2
 8005172:	d001      	beq.n	8005178 <cmp_lfn+0xa0>
 8005174:	2300      	movs	r3, #0
 8005176:	e018      	b.n	80051aa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	3301      	adds	r3, #1
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d9c8      	bls.n	8005116 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <cmp_lfn+0xd0>
 8005190:	89fb      	ldrh	r3, [r7, #14]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <cmp_lfn+0xd0>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <cmp_lfn+0xd0>
 80051a4:	2300      	movs	r3, #0
 80051a6:	e000      	b.n	80051aa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80051a8:	2301      	movs	r3, #1
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd90      	pop	{r4, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	0800a188 	.word	0x0800a188

080051b8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	331a      	adds	r3, #26
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fb76 	bl	80038b8 <ld_word>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <pick_lfn+0x1e>
 80051d2:	2300      	movs	r3, #0
 80051d4:	e04d      	b.n	8005272 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051de:	1e5a      	subs	r2, r3, #1
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80051ec:	2301      	movs	r3, #1
 80051ee:	81fb      	strh	r3, [r7, #14]
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	e028      	b.n	8005248 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80051f6:	4a21      	ldr	r2, [pc, #132]	; (800527c <pick_lfn+0xc4>)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4413      	add	r3, r2
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	4413      	add	r3, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fb57 	bl	80038b8 <ld_word>
 800520a:	4603      	mov	r3, r0
 800520c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00f      	beq.n	8005234 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2bfe      	cmp	r3, #254	; 0xfe
 8005218:	d901      	bls.n	800521e <pick_lfn+0x66>
 800521a:	2300      	movs	r3, #0
 800521c:	e029      	b.n	8005272 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800521e:	89bb      	ldrh	r3, [r7, #12]
 8005220:	81fb      	strh	r3, [r7, #14]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	617a      	str	r2, [r7, #20]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4413      	add	r3, r2
 800522e:	89fa      	ldrh	r2, [r7, #14]
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e006      	b.n	8005242 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005234:	89bb      	ldrh	r3, [r7, #12]
 8005236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800523a:	4293      	cmp	r3, r2
 800523c:	d001      	beq.n	8005242 <pick_lfn+0x8a>
 800523e:	2300      	movs	r3, #0
 8005240:	e017      	b.n	8005272 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3301      	adds	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b0c      	cmp	r3, #12
 800524c:	d9d3      	bls.n	80051f6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2bfe      	cmp	r3, #254	; 0xfe
 800525e:	d901      	bls.n	8005264 <pick_lfn+0xac>
 8005260:	2300      	movs	r3, #0
 8005262:	e006      	b.n	8005272 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	4413      	add	r3, r2
 800526c:	2200      	movs	r2, #0
 800526e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005270:	2301      	movs	r3, #1
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	0800a188 	.word	0x0800a188

08005280 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4611      	mov	r1, r2
 800528c:	461a      	mov	r2, r3
 800528e:	460b      	mov	r3, r1
 8005290:	71fb      	strb	r3, [r7, #7]
 8005292:	4613      	mov	r3, r2
 8005294:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	330d      	adds	r3, #13
 800529a:	79ba      	ldrb	r2, [r7, #6]
 800529c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	330b      	adds	r3, #11
 80052a2:	220f      	movs	r2, #15
 80052a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	330c      	adds	r3, #12
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	331a      	adds	r3, #26
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fc15 	bl	8003ae4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	1e5a      	subs	r2, r3, #1
 80052be:	4613      	mov	r3, r2
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	82fb      	strh	r3, [r7, #22]
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80052d2:	8afb      	ldrh	r3, [r7, #22]
 80052d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <put_lfn+0x6c>
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	61fa      	str	r2, [r7, #28]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80052ec:	4a17      	ldr	r2, [pc, #92]	; (800534c <put_lfn+0xcc>)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4413      	add	r3, r2
 80052fa:	8afa      	ldrh	r2, [r7, #22]
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fbf0 	bl	8003ae4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005304:	8afb      	ldrh	r3, [r7, #22]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <put_lfn+0x90>
 800530a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800530e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	3301      	adds	r3, #1
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b0c      	cmp	r3, #12
 800531a:	d9da      	bls.n	80052d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800531c:	8afb      	ldrh	r3, [r7, #22]
 800531e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005322:	4293      	cmp	r3, r2
 8005324:	d006      	beq.n	8005334 <put_lfn+0xb4>
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d103      	bne.n	800533c <put_lfn+0xbc>
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	79fa      	ldrb	r2, [r7, #7]
 8005340:	701a      	strb	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	0800a188 	.word	0x0800a188

08005350 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800535e:	220b      	movs	r2, #11
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7fe fc8d 	bl	8003c82 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b05      	cmp	r3, #5
 800536c:	d92b      	bls.n	80053c6 <gen_numname+0x76>
		sr = seq;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005372:	e022      	b.n	80053ba <gen_numname+0x6a>
			wc = *lfn++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	1c9a      	adds	r2, r3, #2
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800537e:	2300      	movs	r3, #0
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
 8005382:	e017      	b.n	80053b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	005a      	lsls	r2, r3, #1
 8005388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <gen_numname+0x5e>
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80053a8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80053ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	3301      	adds	r3, #1
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d9e4      	bls.n	8005384 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1d8      	bne.n	8005374 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80053c6:	2307      	movs	r3, #7
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	3330      	adds	r3, #48	; 0x30
 80053d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80053da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053de:	2b39      	cmp	r3, #57	; 0x39
 80053e0:	d904      	bls.n	80053ec <gen_numname+0x9c>
 80053e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053e6:	3307      	adds	r3, #7
 80053e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	1e5a      	subs	r2, r3, #1
 80053f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80053f2:	3330      	adds	r3, #48	; 0x30
 80053f4:	443b      	add	r3, r7
 80053f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80053fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1df      	bne.n	80053ca <gen_numname+0x7a>
	ns[i] = '~';
 800540a:	f107 0214 	add.w	r2, r7, #20
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	4413      	add	r3, r2
 8005412:	227e      	movs	r2, #126	; 0x7e
 8005414:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005416:	2300      	movs	r3, #0
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
 800541a:	e002      	b.n	8005422 <gen_numname+0xd2>
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	3301      	adds	r3, #1
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
 8005422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	429a      	cmp	r2, r3
 8005428:	d205      	bcs.n	8005436 <gen_numname+0xe6>
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	4413      	add	r3, r2
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b20      	cmp	r3, #32
 8005434:	d1f2      	bne.n	800541c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	2b07      	cmp	r3, #7
 800543a:	d807      	bhi.n	800544c <gen_numname+0xfc>
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	62ba      	str	r2, [r7, #40]	; 0x28
 8005442:	3330      	adds	r3, #48	; 0x30
 8005444:	443b      	add	r3, r7
 8005446:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800544a:	e000      	b.n	800544e <gen_numname+0xfe>
 800544c:	2120      	movs	r1, #32
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	627a      	str	r2, [r7, #36]	; 0x24
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	460a      	mov	r2, r1
 800545a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	2b07      	cmp	r3, #7
 8005460:	d9e9      	bls.n	8005436 <gen_numname+0xe6>
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	3730      	adds	r7, #48	; 0x30
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005478:	230b      	movs	r3, #11
 800547a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	0852      	lsrs	r2, r2, #1
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	4313      	orrs	r3, r2
 8005486:	b2da      	uxtb	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	6079      	str	r1, [r7, #4]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4413      	add	r3, r2
 8005492:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	3b01      	subs	r3, #1
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ed      	bne.n	800547c <sum_sfn+0x10>
	return sum;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3301      	adds	r3, #1
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	015b      	lsls	r3, r3, #5
 80054c0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80054c2:	2300      	movs	r3, #0
 80054c4:	827b      	strh	r3, [r7, #18]
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e018      	b.n	80054fe <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d103      	bne.n	80054da <xdir_sum+0x2c>
			i++;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	3301      	adds	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e00e      	b.n	80054f8 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80054da:	8a7b      	ldrh	r3, [r7, #18]
 80054dc:	03db      	lsls	r3, r3, #15
 80054de:	b29a      	uxth	r2, r3
 80054e0:	8a7b      	ldrh	r3, [r7, #18]
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	440b      	add	r3, r1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3301      	adds	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	429a      	cmp	r2, r3
 8005504:	d3e2      	bcc.n	80054cc <xdir_sum+0x1e>
		}
	}
	return sum;
 8005506:	8a7b      	ldrh	r3, [r7, #18]
}
 8005508:	4618      	mov	r0, r3
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8005520:	e01f      	b.n	8005562 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8005522:	89bb      	ldrh	r3, [r7, #12]
 8005524:	4618      	mov	r0, r3
 8005526:	f002 fe6f 	bl	8008208 <ff_wtoupper>
 800552a:	4603      	mov	r3, r0
 800552c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800552e:	89fb      	ldrh	r3, [r7, #14]
 8005530:	03db      	lsls	r3, r3, #15
 8005532:	b29a      	uxth	r2, r3
 8005534:	89fb      	ldrh	r3, [r7, #14]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b29b      	uxth	r3, r3
 800553a:	4413      	add	r3, r2
 800553c:	b29a      	uxth	r2, r3
 800553e:	89bb      	ldrh	r3, [r7, #12]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	b29b      	uxth	r3, r3
 8005544:	4413      	add	r3, r2
 8005546:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8005548:	89fb      	ldrh	r3, [r7, #14]
 800554a:	03db      	lsls	r3, r3, #15
 800554c:	b29a      	uxth	r2, r3
 800554e:	89fb      	ldrh	r3, [r7, #14]
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	b29b      	uxth	r3, r3
 8005554:	4413      	add	r3, r2
 8005556:	b29a      	uxth	r2, r3
 8005558:	89bb      	ldrh	r3, [r7, #12]
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	b29b      	uxth	r3, r3
 800555e:	4413      	add	r3, r2
 8005560:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	1c9a      	adds	r2, r3, #2
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	81bb      	strh	r3, [r7, #12]
 800556c:	89bb      	ldrh	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1d7      	bne.n	8005522 <xname_sum+0xe>
	}
	return sum;
 8005572:	89fb      	ldrh	r3, [r7, #14]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7fe fda2 	bl	80040e0 <move_window>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <load_xdir+0x2e>
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	e09f      	b.n	80056ea <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b85      	cmp	r3, #133	; 0x85
 80055b2:	d001      	beq.n	80055b8 <load_xdir+0x3c>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e098      	b.n	80056ea <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	2220      	movs	r2, #32
 80055be:	4619      	mov	r1, r3
 80055c0:	6938      	ldr	r0, [r7, #16]
 80055c2:	f7fe fb5e 	bl	8003c82 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	3301      	adds	r3, #1
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	015b      	lsls	r3, r3, #5
 80055d0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b5f      	cmp	r3, #95	; 0x5f
 80055d6:	d903      	bls.n	80055e0 <load_xdir+0x64>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80055de:	d901      	bls.n	80055e4 <load_xdir+0x68>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e082      	b.n	80056ea <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80055e4:	2100      	movs	r1, #0
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fc05 	bl	8004df6 <dir_next>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <load_xdir+0x7e>
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	e077      	b.n	80056ea <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7fe fd6b 	bl	80040e0 <move_window>
 800560a:	4603      	mov	r3, r0
 800560c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <load_xdir+0x9c>
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	e068      	b.n	80056ea <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2bc0      	cmp	r3, #192	; 0xc0
 8005620:	d001      	beq.n	8005626 <load_xdir+0xaa>
 8005622:	2302      	movs	r3, #2
 8005624:	e061      	b.n	80056ea <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f103 0020 	add.w	r0, r3, #32
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005630:	2220      	movs	r2, #32
 8005632:	4619      	mov	r1, r3
 8005634:	f7fe fb25 	bl	8003c82 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3323      	adds	r3, #35	; 0x23
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	332c      	adds	r3, #44	; 0x2c
 8005640:	4a2c      	ldr	r2, [pc, #176]	; (80056f4 <load_xdir+0x178>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	08db      	lsrs	r3, r3, #3
 8005648:	015b      	lsls	r3, r3, #5
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	429a      	cmp	r2, r3
 800564e:	d201      	bcs.n	8005654 <load_xdir+0xd8>
 8005650:	2302      	movs	r3, #2
 8005652:	e04a      	b.n	80056ea <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8005654:	2340      	movs	r3, #64	; 0x40
 8005656:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8005658:	2100      	movs	r1, #0
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fbcb 	bl	8004df6 <dir_next>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <load_xdir+0xf2>
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	e03d      	b.n	80056ea <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f7fe fd31 	bl	80040e0 <move_window>
 800567e:	4603      	mov	r3, r0
 8005680:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <load_xdir+0x110>
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	e02e      	b.n	80056ea <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2bc1      	cmp	r3, #193	; 0xc1
 8005694:	d001      	beq.n	800569a <load_xdir+0x11e>
 8005696:	2302      	movs	r3, #2
 8005698:	e027      	b.n	80056ea <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80056a0:	d208      	bcs.n	80056b4 <load_xdir+0x138>
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	18d0      	adds	r0, r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ac:	2220      	movs	r2, #32
 80056ae:	4619      	mov	r1, r3
 80056b0:	f7fe fae7 	bl	8003c82 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	3320      	adds	r3, #32
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3ca      	bcc.n	8005658 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80056c8:	d80e      	bhi.n	80056e8 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f7ff feef 	bl	80054ae <xdir_sum>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461c      	mov	r4, r3
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3302      	adds	r3, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe f8ed 	bl	80038b8 <ld_word>
 80056de:	4603      	mov	r3, r0
 80056e0:	429c      	cmp	r4, r3
 80056e2:	d001      	beq.n	80056e8 <load_xdir+0x16c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e000      	b.n	80056ea <load_xdir+0x16e>
	}
	return FR_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd90      	pop	{r4, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	88888889 	.word	0x88888889

080056f8 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80056f8:	b5b0      	push	{r4, r5, r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6808      	ldr	r0, [r1, #0]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	6a08      	ldr	r0, [r1, #32]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005716:	b2c8      	uxtb	r0, r1
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005720:	2000      	movs	r0, #0
 8005722:	460c      	mov	r4, r1
 8005724:	4605      	mov	r5, r0
 8005726:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800572a:	2300      	movs	r3, #0
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff fad2 	bl	8004cea <dir_sdi>
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff13 	bl	800557c <load_xdir>
 8005756:	4603      	mov	r3, r0
 8005758:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bdb0      	pop	{r4, r5, r7, pc}

08005764 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1c9c      	adds	r4, r3, #2
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff fe98 	bl	80054ae <xdir_sum>
 800577e:	4603      	mov	r3, r0
 8005780:	4619      	mov	r1, r3
 8005782:	4620      	mov	r0, r4
 8005784:	f7fe f9ae 	bl	8003ae4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	3301      	adds	r3, #1
 8005790:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff faa6 	bl	8004cea <dir_sdi>
 800579e:	4603      	mov	r3, r0
 80057a0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80057a2:	e026      	b.n	80057f2 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f7fe fc96 	bl	80040e0 <move_window>
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11d      	bne.n	80057fa <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c2:	2220      	movs	r2, #32
 80057c4:	68f9      	ldr	r1, [r7, #12]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fa5b 	bl	8003c82 <mem_cpy>
		dp->obj.fs->wflag = 1;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2201      	movs	r2, #1
 80057d2:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00e      	beq.n	80057fe <store_xdir+0x9a>
		dirb += SZDIRE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3320      	adds	r3, #32
 80057e4:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80057e6:	2100      	movs	r1, #0
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff fb04 	bl	8004df6 <dir_next>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0d5      	beq.n	80057a4 <store_xdir+0x40>
 80057f8:	e002      	b.n	8005800 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <store_xdir+0x9c>
		if (--nent == 0) break;
 80057fe:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <store_xdir+0xa8>
 8005806:	7dfb      	ldrb	r3, [r7, #23]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <store_xdir+0xac>
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	e000      	b.n	8005812 <store_xdir+0xae>
 8005810:	2302      	movs	r3, #2
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	bd90      	pop	{r4, r7, pc}

0800581a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800581a:	b590      	push	{r4, r7, lr}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8005824:	2240      	movs	r2, #64	; 0x40
 8005826:	2100      	movs	r1, #0
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fe fa4b 	bl	8003cc4 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2285      	movs	r2, #133	; 0x85
 8005832:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3320      	adds	r3, #32
 8005838:	22c0      	movs	r2, #192	; 0xc0
 800583a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800583c:	2300      	movs	r3, #0
 800583e:	72bb      	strb	r3, [r7, #10]
 8005840:	2301      	movs	r3, #1
 8005842:	72fb      	strb	r3, [r7, #11]
 8005844:	2301      	movs	r3, #1
 8005846:	813b      	strh	r3, [r7, #8]
 8005848:	2340      	movs	r3, #64	; 0x40
 800584a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	60fa      	str	r2, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	22c1      	movs	r2, #193	; 0xc1
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	60fa      	str	r2, [r7, #12]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	2200      	movs	r2, #0
 8005866:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8005868:	893b      	ldrh	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <create_xdir+0x6c>
 800586e:	7abb      	ldrb	r3, [r7, #10]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	4413      	add	r3, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	813b      	strh	r3, [r7, #8]
 800587a:	893b      	ldrh	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <create_xdir+0x6c>
 8005880:	7abb      	ldrb	r3, [r7, #10]
 8005882:	3301      	adds	r3, #1
 8005884:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	893a      	ldrh	r2, [r7, #8]
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe f927 	bl	8003ae4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3302      	adds	r3, #2
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e0      	bne.n	8005868 <create_xdir+0x4e>
		nb++;
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	3301      	adds	r3, #1
 80058aa:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80058ac:	7abb      	ldrb	r3, [r7, #10]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1c8      	bne.n	800584c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3323      	adds	r3, #35	; 0x23
 80058be:	7aba      	ldrb	r2, [r7, #10]
 80058c0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3301      	adds	r3, #1
 80058c6:	7afa      	ldrb	r2, [r7, #11]
 80058c8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80058d0:	6838      	ldr	r0, [r7, #0]
 80058d2:	f7ff fe1f 	bl	8005514 <xname_sum>
 80058d6:	4603      	mov	r3, r0
 80058d8:	4619      	mov	r1, r3
 80058da:	4620      	mov	r0, r4
 80058dc:	f7fe f902 	bl	8003ae4 <st_word>
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80058f2:	2304      	movs	r3, #4
 80058f4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80058fc:	23ff      	movs	r3, #255	; 0xff
 80058fe:	757b      	strb	r3, [r7, #21]
 8005900:	23ff      	movs	r3, #255	; 0xff
 8005902:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005904:	e09f      	b.n	8005a46 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	4619      	mov	r1, r3
 800590c:	6938      	ldr	r0, [r7, #16]
 800590e:	f7fe fbe7 	bl	80040e0 <move_window>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 809a 	bne.w	8005a52 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8005926:	7dbb      	ldrb	r3, [r7, #22]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800592c:	2304      	movs	r3, #4
 800592e:	75fb      	strb	r3, [r7, #23]
 8005930:	e096      	b.n	8005a60 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b04      	cmp	r3, #4
 8005938:	d118      	bne.n	800596c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800593a:	7dbb      	ldrb	r3, [r7, #22]
 800593c:	2b85      	cmp	r3, #133	; 0x85
 800593e:	d179      	bne.n	8005a34 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff fe17 	bl	800557c <load_xdir>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d17e      	bne.n	8005a56 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	3304      	adds	r3, #4
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005964:	b2da      	uxtb	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	719a      	strb	r2, [r3, #6]
					}
					break;
 800596a:	e074      	b.n	8005a56 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	330b      	adds	r3, #11
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005978:	73fb      	strb	r3, [r7, #15]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	7bfa      	ldrb	r2, [r7, #15]
 800597e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005980:	7dbb      	ldrb	r3, [r7, #22]
 8005982:	2be5      	cmp	r3, #229	; 0xe5
 8005984:	d00e      	beq.n	80059a4 <dir_read+0xbc>
 8005986:	7dbb      	ldrb	r3, [r7, #22]
 8005988:	2b2e      	cmp	r3, #46	; 0x2e
 800598a:	d00b      	beq.n	80059a4 <dir_read+0xbc>
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	f023 0320 	bic.w	r3, r3, #32
 8005992:	2b08      	cmp	r3, #8
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d002      	beq.n	80059aa <dir_read+0xc2>
				ord = 0xFF;
 80059a4:	23ff      	movs	r3, #255	; 0xff
 80059a6:	757b      	strb	r3, [r7, #21]
 80059a8:	e044      	b.n	8005a34 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	2b0f      	cmp	r3, #15
 80059ae:	d12f      	bne.n	8005a10 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80059b0:	7dbb      	ldrb	r3, [r7, #22]
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00d      	beq.n	80059d6 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	7b5b      	ldrb	r3, [r3, #13]
 80059c0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80059c2:	7dbb      	ldrb	r3, [r7, #22]
 80059c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c8:	75bb      	strb	r3, [r7, #22]
 80059ca:	7dbb      	ldrb	r3, [r7, #22]
 80059cc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80059d6:	7dba      	ldrb	r2, [r7, #22]
 80059d8:	7d7b      	ldrb	r3, [r7, #21]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d115      	bne.n	8005a0a <dir_read+0x122>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	330d      	adds	r3, #13
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	7d3a      	ldrb	r2, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d10e      	bne.n	8005a0a <dir_read+0x122>
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f7ff fbde 	bl	80051b8 <pick_lfn>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <dir_read+0x122>
 8005a02:	7d7b      	ldrb	r3, [r7, #21]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e000      	b.n	8005a0c <dir_read+0x124>
 8005a0a:	23ff      	movs	r3, #255	; 0xff
 8005a0c:	757b      	strb	r3, [r7, #21]
 8005a0e:	e011      	b.n	8005a34 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005a10:	7d7b      	ldrb	r3, [r7, #21]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <dir_read+0x142>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff fd26 	bl	800546c <sum_sfn>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	7d3b      	ldrb	r3, [r7, #20]
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d017      	beq.n	8005a5a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a30:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8005a32:	e012      	b.n	8005a5a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005a34:	2100      	movs	r1, #0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff f9dd 	bl	8004df6 <dir_next>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <dir_read+0x176>
	while (dp->sect) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f47f af5b 	bne.w	8005906 <dir_read+0x1e>
 8005a50:	e006      	b.n	8005a60 <dir_read+0x178>
		if (res != FR_OK) break;
 8005a52:	bf00      	nop
 8005a54:	e004      	b.n	8005a60 <dir_read+0x178>
					break;
 8005a56:	bf00      	nop
 8005a58:	e002      	b.n	8005a60 <dir_read+0x178>
					break;
 8005a5a:	bf00      	nop
 8005a5c:	e000      	b.n	8005a60 <dir_read+0x178>
		if (res != FR_OK) break;
 8005a5e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <dir_read+0x184>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005a76:	b590      	push	{r4, r7, lr}
 8005a78:	b089      	sub	sp, #36	; 0x24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005a84:	2100      	movs	r1, #0
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff f92f 	bl	8004cea <dir_sdi>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8005a90:	7ffb      	ldrb	r3, [r7, #31]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <dir_find+0x24>
 8005a96:	7ffb      	ldrb	r3, [r7, #31]
 8005a98:	e112      	b.n	8005cc0 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d164      	bne.n	8005b6c <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff fd34 	bl	8005514 <xname_sum>
 8005aac:	4603      	mov	r3, r0
 8005aae:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8005ab0:	e04f      	b.n	8005b52 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	3324      	adds	r3, #36	; 0x24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fd fefd 	bl	80038b8 <ld_word>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	893b      	ldrh	r3, [r7, #8]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d000      	beq.n	8005aca <dir_find+0x54>
 8005ac8:	e043      	b.n	8005b52 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005ad2:	76fb      	strb	r3, [r7, #27]
 8005ad4:	2340      	movs	r3, #64	; 0x40
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	e029      	b.n	8005b32 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <dir_find+0x78>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3302      	adds	r3, #2
 8005aec:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4413      	add	r3, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fd fede 	bl	80038b8 <ld_word>
 8005afc:	4603      	mov	r3, r0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f002 fb82 	bl	8008208 <ff_wtoupper>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461c      	mov	r4, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f002 fb77 	bl	8008208 <ff_wtoupper>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	d10c      	bne.n	8005b3a <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005b20:	7efb      	ldrb	r3, [r7, #27]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	76fb      	strb	r3, [r7, #27]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	3302      	adds	r3, #2
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	7efb      	ldrb	r3, [r7, #27]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1d2      	bne.n	8005ade <dir_find+0x68>
 8005b38:	e000      	b.n	8005b3c <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005b3a:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005b3c:	7efb      	ldrb	r3, [r7, #27]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <dir_find+0xdc>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	4413      	add	r3, r2
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8005b52:	2100      	movs	r1, #0
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fec7 	bl	80058e8 <dir_read>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	7ffb      	ldrb	r3, [r7, #31]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0a6      	beq.n	8005ab2 <dir_find+0x3c>
 8005b64:	e000      	b.n	8005b68 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005b66:	bf00      	nop
		}
		return res;
 8005b68:	7ffb      	ldrb	r3, [r7, #31]
 8005b6a:	e0a9      	b.n	8005cc0 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005b6c:	23ff      	movs	r3, #255	; 0xff
 8005b6e:	773b      	strb	r3, [r7, #28]
 8005b70:	7f3b      	ldrb	r3, [r7, #28]
 8005b72:	777b      	strb	r3, [r7, #29]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	4619      	mov	r1, r3
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7fe faac 	bl	80040e0 <move_window>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8005b8c:	7ffb      	ldrb	r3, [r7, #31]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f040 8090 	bne.w	8005cb4 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005b9c:	7fbb      	ldrb	r3, [r7, #30]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <dir_find+0x132>
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e08a      	b.n	8005cbe <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bac:	330b      	adds	r3, #11
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb4:	72fb      	strb	r3, [r7, #11]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	7afa      	ldrb	r2, [r7, #11]
 8005bba:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005bbc:	7fbb      	ldrb	r3, [r7, #30]
 8005bbe:	2be5      	cmp	r3, #229	; 0xe5
 8005bc0:	d007      	beq.n	8005bd2 <dir_find+0x15c>
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d009      	beq.n	8005be0 <dir_find+0x16a>
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	2b0f      	cmp	r3, #15
 8005bd0:	d006      	beq.n	8005be0 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005bd2:	23ff      	movs	r3, #255	; 0xff
 8005bd4:	777b      	strb	r3, [r7, #29]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bde:	e05e      	b.n	8005c9e <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005be0:	7afb      	ldrb	r3, [r7, #11]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d136      	bne.n	8005c54 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d154      	bne.n	8005c9e <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005bf4:	7fbb      	ldrb	r3, [r7, #30]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00d      	beq.n	8005c1a <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	7b5b      	ldrb	r3, [r3, #13]
 8005c04:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005c06:	7fbb      	ldrb	r3, [r7, #30]
 8005c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0c:	77bb      	strb	r3, [r7, #30]
 8005c0e:	7fbb      	ldrb	r3, [r7, #30]
 8005c10:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c1a:	7fba      	ldrb	r2, [r7, #30]
 8005c1c:	7f7b      	ldrb	r3, [r7, #29]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d115      	bne.n	8005c4e <dir_find+0x1d8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	330d      	adds	r3, #13
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	7f3a      	ldrb	r2, [r7, #28]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d10e      	bne.n	8005c4e <dir_find+0x1d8>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7ff fa4c 	bl	80050d8 <cmp_lfn>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <dir_find+0x1d8>
 8005c46:	7f7b      	ldrb	r3, [r7, #29]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	e000      	b.n	8005c50 <dir_find+0x1da>
 8005c4e:	23ff      	movs	r3, #255	; 0xff
 8005c50:	777b      	strb	r3, [r7, #29]
 8005c52:	e024      	b.n	8005c9e <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c54:	7f7b      	ldrb	r3, [r7, #29]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <dir_find+0x1f8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fc04 	bl	800546c <sum_sfn>
 8005c64:	4603      	mov	r3, r0
 8005c66:	461a      	mov	r2, r3
 8005c68:	7f3b      	ldrb	r3, [r7, #28]
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d024      	beq.n	8005cb8 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <dir_find+0x21c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3340      	adds	r3, #64	; 0x40
 8005c84:	220b      	movs	r2, #11
 8005c86:	4619      	mov	r1, r3
 8005c88:	f7fe f837 	bl	8003cfa <mem_cmp>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d014      	beq.n	8005cbc <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c92:	23ff      	movs	r3, #255	; 0xff
 8005c94:	777b      	strb	r3, [r7, #29]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9c:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff f8a8 	bl	8004df6 <dir_next>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8005caa:	7ffb      	ldrb	r3, [r7, #31]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f43f af65 	beq.w	8005b7c <dir_find+0x106>
 8005cb2:	e004      	b.n	8005cbe <dir_find+0x248>
		if (res != FR_OK) break;
 8005cb4:	bf00      	nop
 8005cb6:	e002      	b.n	8005cbe <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005cb8:	bf00      	nop
 8005cba:	e000      	b.n	8005cbe <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005cbc:	bf00      	nop

	return res;
 8005cbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3724      	adds	r7, #36	; 0x24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd90      	pop	{r4, r7, pc}

08005cc8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ccc:	b0a0      	sub	sp, #128	; 0x80
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005cde:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <dir_register+0x22>
 8005ce6:	2306      	movs	r3, #6
 8005ce8:	e18e      	b.n	8006008 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005cea:	2300      	movs	r3, #0
 8005cec:	677b      	str	r3, [r7, #116]	; 0x74
 8005cee:	e002      	b.n	8005cf6 <dir_register+0x2e>
 8005cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	677b      	str	r3, [r7, #116]	; 0x74
 8005cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f4      	bne.n	8005cf0 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	f040 809f 	bne.w	8005e4e <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d12:	330e      	adds	r3, #14
 8005d14:	4aa2      	ldr	r2, [pc, #648]	; (8005fa0 <dir_register+0x2d8>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	08db      	lsrs	r3, r3, #3
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8005d20:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff f93c 	bl	8004fa0 <dir_alloc>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8005d2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <dir_register+0x74>
 8005d36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d3a:	e165      	b.n	8006008 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d42:	3b01      	subs	r3, #1
 8005d44:	015b      	lsls	r3, r3, #5
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d072      	beq.n	8005e3a <dir_register+0x172>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	79db      	ldrb	r3, [r3, #7]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d06c      	beq.n	8005e3a <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005d66:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005d68:	8949      	ldrh	r1, [r1, #10]
 8005d6a:	0249      	lsls	r1, r1, #9
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4605      	mov	r5, r0
 8005d72:	eb12 0804 	adds.w	r8, r2, r4
 8005d76:	eb43 0905 	adc.w	r9, r3, r5
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fd58 	bl	8004838 <fill_first_frag>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005d8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <dir_register+0xd4>
 8005d96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d9a:	e135      	b.n	8006008 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	f04f 32ff 	mov.w	r2, #4294967295
 8005da6:	4619      	mov	r1, r3
 8005da8:	f7fe fd75 	bl	8004896 <fill_last_frag>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005db2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <dir_register+0xf8>
 8005dba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005dbe:	e123      	b.n	8006008 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	f107 0308 	add.w	r3, r7, #8
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fc95 	bl	80056f8 <load_obj_dir>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005dd4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <dir_register+0x11a>
 8005ddc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005de0:	e112      	b.n	8006008 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8005de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005df0:	4608      	mov	r0, r1
 8005df2:	f7fd febe 	bl	8003b72 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e04:	4608      	mov	r0, r1
 8005e06:	f7fd feb4 	bl	8003b72 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	79da      	ldrb	r2, [r3, #7]
 8005e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	3321      	adds	r3, #33	; 0x21
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff fc9f 	bl	8005764 <store_xdir>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005e2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <dir_register+0x172>
 8005e34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e38:	e0e6      	b.n	8006008 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	4619      	mov	r1, r3
 8005e44:	4610      	mov	r0, r2
 8005e46:	f7ff fce8 	bl	800581a <create_xdir>
		return FR_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e0dc      	b.n	8006008 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8005e54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e58:	220c      	movs	r2, #12
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd ff11 	bl	8003c82 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d033      	beq.n	8005ed4 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2240      	movs	r2, #64	; 0x40
 8005e70:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8005e74:	2301      	movs	r3, #1
 8005e76:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e78:	e016      	b.n	8005ea8 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e8a:	f7ff fa61 	bl	8005350 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff fdf1 	bl	8005a76 <dir_find>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8005e9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8005ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eaa:	2b63      	cmp	r3, #99	; 0x63
 8005eac:	d9e5      	bls.n	8005e7a <dir_register+0x1b2>
 8005eae:	e000      	b.n	8005eb2 <dir_register+0x1ea>
			if (res != FR_OK) break;
 8005eb0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb4:	2b64      	cmp	r3, #100	; 0x64
 8005eb6:	d101      	bne.n	8005ebc <dir_register+0x1f4>
 8005eb8:	2307      	movs	r3, #7
 8005eba:	e0a5      	b.n	8006008 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005ebc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d002      	beq.n	8005eca <dir_register+0x202>
 8005ec4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005ec8:	e09e      	b.n	8006008 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005eca:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ed4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <dir_register+0x228>
 8005ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <dir_register+0x2dc>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	089b      	lsrs	r3, r3, #2
 8005eec:	3301      	adds	r3, #1
 8005eee:	e000      	b.n	8005ef2 <dir_register+0x22a>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005ef4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff f852 	bl	8004fa0 <dir_alloc>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005f02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d14f      	bne.n	8005faa <dir_register+0x2e2>
 8005f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d049      	beq.n	8005faa <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f1c:	015b      	lsls	r3, r3, #5
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fe fee1 	bl	8004cea <dir_sdi>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005f2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d139      	bne.n	8005faa <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3340      	adds	r3, #64	; 0x40
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff fa96 	bl	800546c <sum_sfn>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f4e:	f7fe f8c7 	bl	80040e0 <move_window>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8005f58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d123      	bne.n	8005fa8 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f62:	68d8      	ldr	r0, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005f70:	f7ff f986 	bl	8005280 <put_lfn>
				fs->wflag = 1;
 8005f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f76:	2201      	movs	r2, #1
 8005f78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fe ff3a 	bl	8004df6 <dir_next>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8005f88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <dir_register+0x2e2>
 8005f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f92:	3b01      	subs	r3, #1
 8005f94:	673b      	str	r3, [r7, #112]	; 0x70
 8005f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1d4      	bne.n	8005f46 <dir_register+0x27e>
 8005f9c:	e005      	b.n	8005faa <dir_register+0x2e2>
 8005f9e:	bf00      	nop
 8005fa0:	88888889 	.word	0x88888889
 8005fa4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8005fa8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005faa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d128      	bne.n	8006004 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fba:	f7fe f891 	bl	80040e0 <move_window>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005fc4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d11b      	bne.n	8006004 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fd fe75 	bl	8003cc4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3340      	adds	r3, #64	; 0x40
 8005fe2:	220b      	movs	r2, #11
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f7fd fe4c 	bl	8003c82 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	f002 0218 	and.w	r2, r2, #24
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006000:	2201      	movs	r2, #1
 8006002:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006004:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006008:	4618      	mov	r0, r3
 800600a:	3780      	adds	r7, #128	; 0x80
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006012:	bf00      	nop

08006014 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	61ba      	str	r2, [r7, #24]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4413      	add	r3, r2
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006044:	2b1f      	cmp	r3, #31
 8006046:	d940      	bls.n	80060ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800604a:	2b2f      	cmp	r3, #47	; 0x2f
 800604c:	d006      	beq.n	800605c <create_name+0x48>
 800604e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006050:	2b5c      	cmp	r3, #92	; 0x5c
 8006052:	d110      	bne.n	8006076 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006054:	e002      	b.n	800605c <create_name+0x48>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	3301      	adds	r3, #1
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	4413      	add	r3, r2
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b2f      	cmp	r3, #47	; 0x2f
 8006066:	d0f6      	beq.n	8006056 <create_name+0x42>
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	4413      	add	r3, r2
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b5c      	cmp	r3, #92	; 0x5c
 8006072:	d0f0      	beq.n	8006056 <create_name+0x42>
			break;
 8006074:	e02a      	b.n	80060cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2bfe      	cmp	r3, #254	; 0xfe
 800607a:	d901      	bls.n	8006080 <create_name+0x6c>
 800607c:	2306      	movs	r3, #6
 800607e:	e17d      	b.n	800637c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006082:	b2db      	uxtb	r3, r3
 8006084:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006088:	2101      	movs	r1, #1
 800608a:	4618      	mov	r0, r3
 800608c:	f002 f880 	bl	8008190 <ff_convert>
 8006090:	4603      	mov	r3, r0
 8006092:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <create_name+0x8a>
 800609a:	2306      	movs	r3, #6
 800609c:	e16e      	b.n	800637c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800609e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060a0:	2b7f      	cmp	r3, #127	; 0x7f
 80060a2:	d809      	bhi.n	80060b8 <create_name+0xa4>
 80060a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060a6:	4619      	mov	r1, r3
 80060a8:	488d      	ldr	r0, [pc, #564]	; (80062e0 <create_name+0x2cc>)
 80060aa:	f7fd fe4d 	bl	8003d48 <chk_chr>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <create_name+0xa4>
 80060b4:	2306      	movs	r3, #6
 80060b6:	e161      	b.n	800637c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	617a      	str	r2, [r7, #20]
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80060c8:	e7b4      	b.n	8006034 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80060ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	441a      	add	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80060d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060d8:	2b1f      	cmp	r3, #31
 80060da:	d801      	bhi.n	80060e0 <create_name+0xcc>
 80060dc:	2304      	movs	r3, #4
 80060de:	e000      	b.n	80060e2 <create_name+0xce>
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80060e6:	e011      	b.n	800610c <create_name+0xf8>
		w = lfn[di - 1];
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80060ee:	3b01      	subs	r3, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80060fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d002      	beq.n	8006106 <create_name+0xf2>
 8006100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006102:	2b2e      	cmp	r3, #46	; 0x2e
 8006104:	d106      	bne.n	8006114 <create_name+0x100>
		di--;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	3b01      	subs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1ea      	bne.n	80060e8 <create_name+0xd4>
 8006112:	e000      	b.n	8006116 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006114:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <create_name+0x118>
 8006128:	2306      	movs	r3, #6
 800612a:	e127      	b.n	800637c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3340      	adds	r3, #64	; 0x40
 8006130:	220b      	movs	r2, #11
 8006132:	2120      	movs	r1, #32
 8006134:	4618      	mov	r0, r3
 8006136:	f7fd fdc5 	bl	8003cc4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800613a:	2300      	movs	r3, #0
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e002      	b.n	8006146 <create_name+0x132>
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	3301      	adds	r3, #1
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	2b20      	cmp	r3, #32
 8006152:	d0f5      	beq.n	8006140 <create_name+0x12c>
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	2b2e      	cmp	r3, #46	; 0x2e
 8006160:	d0ee      	beq.n	8006140 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <create_name+0x168>
 8006168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800616c:	f043 0303 	orr.w	r3, r3, #3
 8006170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006174:	e002      	b.n	800617c <create_name+0x168>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	3b01      	subs	r3, #1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <create_name+0x182>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006188:	3b01      	subs	r3, #1
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	2b2e      	cmp	r3, #46	; 0x2e
 8006194:	d1ef      	bne.n	8006176 <create_name+0x162>

	i = b = 0; ni = 8;
 8006196:	2300      	movs	r3, #0
 8006198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800619c:	2300      	movs	r3, #0
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	2308      	movs	r3, #8
 80061a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	61ba      	str	r2, [r7, #24]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80061b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 8090 	beq.w	80062dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d006      	beq.n	80061d0 <create_name+0x1bc>
 80061c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c4:	2b2e      	cmp	r3, #46	; 0x2e
 80061c6:	d10a      	bne.n	80061de <create_name+0x1ca>
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d006      	beq.n	80061de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80061d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061d4:	f043 0303 	orr.w	r3, r3, #3
 80061d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061dc:	e07d      	b.n	80062da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d203      	bcs.n	80061ee <create_name+0x1da>
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d123      	bne.n	8006236 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	2b0b      	cmp	r3, #11
 80061f2:	d106      	bne.n	8006202 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80061f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061f8:	f043 0303 	orr.w	r3, r3, #3
 80061fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006200:	e075      	b.n	80062ee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	429a      	cmp	r2, r3
 8006208:	d005      	beq.n	8006216 <create_name+0x202>
 800620a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800620e:	f043 0303 	orr.w	r3, r3, #3
 8006212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	429a      	cmp	r2, r3
 800621c:	d866      	bhi.n	80062ec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	2308      	movs	r3, #8
 8006224:	623b      	str	r3, [r7, #32]
 8006226:	230b      	movs	r3, #11
 8006228:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800622a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006234:	e051      	b.n	80062da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006238:	2b7f      	cmp	r3, #127	; 0x7f
 800623a:	d914      	bls.n	8006266 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800623c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800623e:	2100      	movs	r1, #0
 8006240:	4618      	mov	r0, r3
 8006242:	f001 ffa5 	bl	8008190 <ff_convert>
 8006246:	4603      	mov	r3, r0
 8006248:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800624a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <create_name+0x246>
 8006250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006252:	3b80      	subs	r3, #128	; 0x80
 8006254:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <create_name+0x2d0>)
 8006256:	5cd3      	ldrb	r3, [r2, r3]
 8006258:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800625a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800625e:	f043 0302 	orr.w	r3, r3, #2
 8006262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <create_name+0x268>
 800626c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800626e:	4619      	mov	r1, r3
 8006270:	481d      	ldr	r0, [pc, #116]	; (80062e8 <create_name+0x2d4>)
 8006272:	f7fd fd69 	bl	8003d48 <chk_chr>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800627c:	235f      	movs	r3, #95	; 0x5f
 800627e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006284:	f043 0303 	orr.w	r3, r3, #3
 8006288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800628c:	e01b      	b.n	80062c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800628e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d909      	bls.n	80062a8 <create_name+0x294>
 8006294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006296:	2b5a      	cmp	r3, #90	; 0x5a
 8006298:	d806      	bhi.n	80062a8 <create_name+0x294>
					b |= 2;
 800629a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800629e:	f043 0302 	orr.w	r3, r3, #2
 80062a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062a6:	e00e      	b.n	80062c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80062a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062aa:	2b60      	cmp	r3, #96	; 0x60
 80062ac:	d90b      	bls.n	80062c6 <create_name+0x2b2>
 80062ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062b0:	2b7a      	cmp	r3, #122	; 0x7a
 80062b2:	d808      	bhi.n	80062c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80062b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062c2:	3b20      	subs	r3, #32
 80062c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	623a      	str	r2, [r7, #32]
 80062cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062ce:	b2d1      	uxtb	r1, r2
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	460a      	mov	r2, r1
 80062d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 80062da:	e763      	b.n	80061a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80062dc:	bf00      	nop
 80062de:	e006      	b.n	80062ee <create_name+0x2da>
 80062e0:	0800a074 	.word	0x0800a074
 80062e4:	0800a108 	.word	0x0800a108
 80062e8:	0800a080 	.word	0x0800a080
			if (si > di) break;			/* No extension */
 80062ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062f4:	2be5      	cmp	r3, #229	; 0xe5
 80062f6:	d103      	bne.n	8006300 <create_name+0x2ec>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2205      	movs	r2, #5
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b08      	cmp	r3, #8
 8006304:	d104      	bne.n	8006310 <create_name+0x2fc>
 8006306:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006314:	f003 030c 	and.w	r3, r3, #12
 8006318:	2b0c      	cmp	r3, #12
 800631a:	d005      	beq.n	8006328 <create_name+0x314>
 800631c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	2b03      	cmp	r3, #3
 8006326:	d105      	bne.n	8006334 <create_name+0x320>
 8006328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800632c:	f043 0302 	orr.w	r3, r3, #2
 8006330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d117      	bne.n	8006370 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d105      	bne.n	8006358 <create_name+0x344>
 800634c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006350:	f043 0310 	orr.w	r3, r3, #16
 8006354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006358:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800635c:	f003 030c 	and.w	r3, r3, #12
 8006360:	2b04      	cmp	r3, #4
 8006362:	d105      	bne.n	8006370 <create_name+0x35c>
 8006364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006368:	f043 0308 	orr.w	r3, r3, #8
 800636c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006376:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800637a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800637c:	4618      	mov	r0, r3
 800637e:	3728      	adds	r7, #40	; 0x28
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006398:	e002      	b.n	80063a0 <follow_path+0x1c>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b2f      	cmp	r3, #47	; 0x2f
 80063a6:	d0f8      	beq.n	800639a <follow_path+0x16>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b5c      	cmp	r3, #92	; 0x5c
 80063ae:	d0f4      	beq.n	800639a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2200      	movs	r2, #0
 80063b4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2200      	movs	r2, #0
 80063ba:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b1f      	cmp	r3, #31
 80063c2:	d80a      	bhi.n	80063da <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80063cc:	2100      	movs	r1, #0
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fe fc8b 	bl	8004cea <dir_sdi>
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]
 80063d8:	e078      	b.n	80064cc <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80063da:	463b      	mov	r3, r7
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fe18 	bl	8006014 <create_name>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d169      	bne.n	80064c2 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fb41 	bl	8005a76 <dir_find>
 80063f4:	4603      	mov	r3, r0
 80063f6:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80063fe:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006400:	7dfb      	ldrb	r3, [r7, #23]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	2b04      	cmp	r3, #4
 800640a:	d15c      	bne.n	80064c6 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d157      	bne.n	80064c6 <follow_path+0x142>
 8006416:	2305      	movs	r3, #5
 8006418:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800641a:	e054      	b.n	80064c6 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d151      	bne.n	80064ca <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	799b      	ldrb	r3, [r3, #6]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8006432:	2305      	movs	r3, #5
 8006434:	75fb      	strb	r3, [r7, #23]
 8006436:	e049      	b.n	80064cc <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b04      	cmp	r3, #4
 800643e:	d130      	bne.n	80064a2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800644e:	4613      	mov	r3, r2
 8006450:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	79d2      	ldrb	r2, [r2, #7]
 8006458:	431a      	orrs	r2, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	3334      	adds	r3, #52	; 0x34
 800646c:	4618      	mov	r0, r3
 800646e:	f7fd fa3b 	bl	80038e8 <ld_dword>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	3321      	adds	r3, #33	; 0x21
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	b2da      	uxtb	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	3338      	adds	r3, #56	; 0x38
 8006490:	4618      	mov	r0, r3
 8006492:	f7fd fa4c 	bl	800392e <ld_qword>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	6939      	ldr	r1, [r7, #16]
 800649c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80064a0:	e79b      	b.n	80063da <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b0:	4413      	add	r3, r2
 80064b2:	4619      	mov	r1, r3
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7fe fdcf 	bl	8005058 <ld_clust>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064c0:	e78b      	b.n	80063da <follow_path+0x56>
			if (res != FR_OK) break;
 80064c2:	bf00      	nop
 80064c4:	e002      	b.n	80064cc <follow_path+0x148>
				break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064ca:	bf00      	nop
			}
		}
	}

	return res;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d031      	beq.n	8006550 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e002      	b.n	80064fa <get_ldnumber+0x24>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	3301      	adds	r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b1f      	cmp	r3, #31
 8006500:	d903      	bls.n	800650a <get_ldnumber+0x34>
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b3a      	cmp	r3, #58	; 0x3a
 8006508:	d1f4      	bne.n	80064f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b3a      	cmp	r3, #58	; 0x3a
 8006510:	d11c      	bne.n	800654c <get_ldnumber+0x76>
			tp = *path;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	60fa      	str	r2, [r7, #12]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	3b30      	subs	r3, #48	; 0x30
 8006522:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b09      	cmp	r3, #9
 8006528:	d80e      	bhi.n	8006548 <get_ldnumber+0x72>
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	429a      	cmp	r2, r3
 8006530:	d10a      	bne.n	8006548 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d107      	bne.n	8006548 <get_ldnumber+0x72>
					vol = (int)i;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3301      	adds	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	e002      	b.n	8006552 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006550:	693b      	ldr	r3, [r7, #16]
}
 8006552:	4618      	mov	r0, r3
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
	...

08006560 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	70da      	strb	r2, [r3, #3]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f04f 32ff 	mov.w	r2, #4294967295
 8006576:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fd fdb0 	bl	80040e0 <move_window>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <check_fs+0x2a>
 8006586:	2304      	movs	r3, #4
 8006588:	e044      	b.n	8006614 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3338      	adds	r3, #56	; 0x38
 800658e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006592:	4618      	mov	r0, r3
 8006594:	f7fd f990 	bl	80038b8 <ld_word>
 8006598:	4603      	mov	r3, r0
 800659a:	461a      	mov	r2, r3
 800659c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d001      	beq.n	80065a8 <check_fs+0x48>
 80065a4:	2303      	movs	r3, #3
 80065a6:	e035      	b.n	8006614 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065ae:	2be9      	cmp	r3, #233	; 0xe9
 80065b0:	d009      	beq.n	80065c6 <check_fs+0x66>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065b8:	2beb      	cmp	r3, #235	; 0xeb
 80065ba:	d11e      	bne.n	80065fa <check_fs+0x9a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065c2:	2b90      	cmp	r3, #144	; 0x90
 80065c4:	d119      	bne.n	80065fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3338      	adds	r3, #56	; 0x38
 80065ca:	3336      	adds	r3, #54	; 0x36
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fd f98b 	bl	80038e8 <ld_dword>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065d8:	4a10      	ldr	r2, [pc, #64]	; (800661c <check_fs+0xbc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d101      	bne.n	80065e2 <check_fs+0x82>
 80065de:	2300      	movs	r3, #0
 80065e0:	e018      	b.n	8006614 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3338      	adds	r3, #56	; 0x38
 80065e6:	3352      	adds	r3, #82	; 0x52
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fd f97d 	bl	80038e8 <ld_dword>
 80065ee:	4603      	mov	r3, r0
 80065f0:	4a0b      	ldr	r2, [pc, #44]	; (8006620 <check_fs+0xc0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d101      	bne.n	80065fa <check_fs+0x9a>
 80065f6:	2300      	movs	r3, #0
 80065f8:	e00c      	b.n	8006614 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3338      	adds	r3, #56	; 0x38
 80065fe:	220b      	movs	r2, #11
 8006600:	4908      	ldr	r1, [pc, #32]	; (8006624 <check_fs+0xc4>)
 8006602:	4618      	mov	r0, r3
 8006604:	f7fd fb79 	bl	8003cfa <mem_cmp>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <check_fs+0xb2>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <check_fs+0xb4>
#endif
	return 2;
 8006612:	2302      	movs	r3, #2
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	00544146 	.word	0x00544146
 8006620:	33544146 	.word	0x33544146
 8006624:	0800a088 	.word	0x0800a088

08006628 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800662c:	b09c      	sub	sp, #112	; 0x70
 800662e:	af00      	add	r7, sp, #0
 8006630:	61f8      	str	r0, [r7, #28]
 8006632:	61b9      	str	r1, [r7, #24]
 8006634:	4613      	mov	r3, r2
 8006636:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800663e:	69f8      	ldr	r0, [r7, #28]
 8006640:	f7ff ff49 	bl	80064d6 <get_ldnumber>
 8006644:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8006646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006648:	2b00      	cmp	r3, #0
 800664a:	da01      	bge.n	8006650 <find_volume+0x28>
 800664c:	230b      	movs	r3, #11
 800664e:	e32d      	b.n	8006cac <find_volume+0x684>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006650:	4a99      	ldr	r2, [pc, #612]	; (80068b8 <find_volume+0x290>)
 8006652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006658:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800665a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <find_volume+0x3c>
 8006660:	230c      	movs	r3, #12
 8006662:	e323      	b.n	8006cac <find_volume+0x684>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006668:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01a      	beq.n	80066b0 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fd f87c 	bl	800377c <disk_status>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800668a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <find_volume+0x84>
 800669c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80066a8:	230a      	movs	r3, #10
 80066aa:	e2ff      	b.n	8006cac <find_volume+0x684>
			}
			return FR_OK;				/* The file system object is valid */
 80066ac:	2300      	movs	r3, #0
 80066ae:	e2fd      	b.n	8006cac <find_volume+0x684>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80066b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80066b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066bc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80066be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fd f874 	bl	80037b0 <disk_initialize>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80066ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80066da:	2303      	movs	r3, #3
 80066dc:	e2e6      	b.n	8006cac <find_volume+0x684>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <find_volume+0xcc>
 80066e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80066f0:	230a      	movs	r3, #10
 80066f2:	e2db      	b.n	8006cac <find_volume+0x684>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80066f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80066fc:	f7ff ff30 	bl	8006560 <check_fs>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800670a:	2b02      	cmp	r3, #2
 800670c:	d14d      	bne.n	80067aa <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800670e:	2300      	movs	r3, #0
 8006710:	65bb      	str	r3, [r7, #88]	; 0x58
 8006712:	e020      	b.n	8006756 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006716:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800671a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006722:	4413      	add	r3, r2
 8006724:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006728:	3304      	adds	r3, #4
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d006      	beq.n	800673e <find_volume+0x116>
 8006730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006732:	3308      	adds	r3, #8
 8006734:	4618      	mov	r0, r3
 8006736:	f7fd f8d7 	bl	80038e8 <ld_dword>
 800673a:	4602      	mov	r2, r0
 800673c:	e000      	b.n	8006740 <find_volume+0x118>
 800673e:	2200      	movs	r2, #0
 8006740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	3360      	adds	r3, #96	; 0x60
 8006746:	f107 0110 	add.w	r1, r7, #16
 800674a:	440b      	add	r3, r1
 800674c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006752:	3301      	adds	r3, #1
 8006754:	65bb      	str	r3, [r7, #88]	; 0x58
 8006756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006758:	2b03      	cmp	r3, #3
 800675a:	d9db      	bls.n	8006714 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800675c:	2300      	movs	r3, #0
 800675e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 8006760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <find_volume+0x144>
 8006766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006768:	3b01      	subs	r3, #1
 800676a:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800676c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	3360      	adds	r3, #96	; 0x60
 8006772:	f107 0210 	add.w	r2, r7, #16
 8006776:	4413      	add	r3, r2
 8006778:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800677c:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800677e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <find_volume+0x168>
 8006784:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006786:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006788:	f7ff feea 	bl	8006560 <check_fs>
 800678c:	4603      	mov	r3, r0
 800678e:	e000      	b.n	8006792 <find_volume+0x16a>
 8006790:	2303      	movs	r3, #3
 8006792:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006796:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800679a:	2b01      	cmp	r3, #1
 800679c:	d905      	bls.n	80067aa <find_volume+0x182>
 800679e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067a0:	3301      	adds	r3, #1
 80067a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d9e0      	bls.n	800676c <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80067aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d101      	bne.n	80067b6 <find_volume+0x18e>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e27a      	b.n	8006cac <find_volume+0x684>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80067b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d901      	bls.n	80067c2 <find_volume+0x19a>
 80067be:	230d      	movs	r3, #13
 80067c0:	e274      	b.n	8006cac <find_volume+0x684>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80067c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	f040 80fa 	bne.w	80069c0 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80067cc:	230b      	movs	r3, #11
 80067ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80067d0:	e002      	b.n	80067d8 <find_volume+0x1b0>
 80067d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067d4:	3301      	adds	r3, #1
 80067d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067da:	2b3f      	cmp	r3, #63	; 0x3f
 80067dc:	d806      	bhi.n	80067ec <find_volume+0x1c4>
 80067de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e2:	4413      	add	r3, r2
 80067e4:	3338      	adds	r3, #56	; 0x38
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f2      	beq.n	80067d2 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80067ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ee:	2b3f      	cmp	r3, #63	; 0x3f
 80067f0:	d801      	bhi.n	80067f6 <find_volume+0x1ce>
 80067f2:	230d      	movs	r3, #13
 80067f4:	e25a      	b.n	8006cac <find_volume+0x684>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	3338      	adds	r3, #56	; 0x38
 80067fa:	3368      	adds	r3, #104	; 0x68
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fd f85b 	bl	80038b8 <ld_word>
 8006802:	4603      	mov	r3, r0
 8006804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006808:	d001      	beq.n	800680e <find_volume+0x1e6>
 800680a:	230d      	movs	r3, #13
 800680c:	e24e      	b.n	8006cac <find_volume+0x684>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800680e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006810:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006814:	2b09      	cmp	r3, #9
 8006816:	d001      	beq.n	800681c <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 8006818:	230d      	movs	r3, #13
 800681a:	e247      	b.n	8006cac <find_volume+0x684>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800681c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681e:	3338      	adds	r3, #56	; 0x38
 8006820:	3348      	adds	r3, #72	; 0x48
 8006822:	4618      	mov	r0, r3
 8006824:	f7fd f883 	bl	800392e <ld_qword>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800682e:	2000      	movs	r0, #0
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	1851      	adds	r1, r2, r1
 8006838:	6039      	str	r1, [r7, #0]
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	eb43 0101 	adc.w	r1, r3, r1
 8006840:	6079      	str	r1, [r7, #4]
 8006842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006846:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800684a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800684e:	2b01      	cmp	r3, #1
 8006850:	d301      	bcc.n	8006856 <find_volume+0x22e>
 8006852:	230d      	movs	r3, #13
 8006854:	e22a      	b.n	8006cac <find_volume+0x684>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8006856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006858:	3338      	adds	r3, #56	; 0x38
 800685a:	3354      	adds	r3, #84	; 0x54
 800685c:	4618      	mov	r0, r3
 800685e:	f7fd f843 	bl	80038e8 <ld_dword>
 8006862:	4602      	mov	r2, r0
 8006864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006866:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8006868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686a:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800686e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006870:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8006872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006874:	789b      	ldrb	r3, [r3, #2]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <find_volume+0x256>
 800687a:	230d      	movs	r3, #13
 800687c:	e216      	b.n	8006cac <find_volume+0x684>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800687e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006880:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006884:	461a      	mov	r2, r3
 8006886:	2301      	movs	r3, #1
 8006888:	4093      	lsls	r3, r2
 800688a:	b29a      	uxth	r2, r3
 800688c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8006890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006892:	895b      	ldrh	r3, [r3, #10]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <find_volume+0x274>
 8006898:	230d      	movs	r3, #13
 800689a:	e207      	b.n	8006cac <find_volume+0x684>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800689c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689e:	3338      	adds	r3, #56	; 0x38
 80068a0:	335c      	adds	r3, #92	; 0x5c
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fd f820 	bl	80038e8 <ld_dword>
 80068a8:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	4a03      	ldr	r2, [pc, #12]	; (80068bc <find_volume+0x294>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d906      	bls.n	80068c0 <find_volume+0x298>
 80068b2:	230d      	movs	r3, #13
 80068b4:	e1fa      	b.n	8006cac <find_volume+0x684>
 80068b6:	bf00      	nop
 80068b8:	200025f8 	.word	0x200025f8
 80068bc:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80068c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c2:	1c9a      	adds	r2, r3, #2
 80068c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c6:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80068c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068cc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80068ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d0:	3338      	adds	r3, #56	; 0x38
 80068d2:	3358      	adds	r3, #88	; 0x58
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fd f807 	bl	80038e8 <ld_dword>
 80068da:	4602      	mov	r2, r0
 80068dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068de:	441a      	add	r2, r3
 80068e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80068e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e6:	3338      	adds	r3, #56	; 0x38
 80068e8:	3350      	adds	r3, #80	; 0x50
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fc fffc 	bl	80038e8 <ld_dword>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068f4:	441a      	add	r2, r3
 80068f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f8:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80068fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	2200      	movs	r2, #0
 8006900:	469a      	mov	sl, r3
 8006902:	4693      	mov	fp, r2
 8006904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006906:	895b      	ldrh	r3, [r3, #10]
 8006908:	461a      	mov	r2, r3
 800690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	2200      	movs	r2, #0
 8006912:	4698      	mov	r8, r3
 8006914:	4691      	mov	r9, r2
 8006916:	eb1a 0408 	adds.w	r4, sl, r8
 800691a:	eb4b 0509 	adc.w	r5, fp, r9
 800691e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006922:	42a2      	cmp	r2, r4
 8006924:	41ab      	sbcs	r3, r5
 8006926:	d201      	bcs.n	800692c <find_volume+0x304>
 8006928:	230d      	movs	r3, #13
 800692a:	e1bf      	b.n	8006cac <find_volume+0x684>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800692c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692e:	3338      	adds	r3, #56	; 0x38
 8006930:	3360      	adds	r3, #96	; 0x60
 8006932:	4618      	mov	r0, r3
 8006934:	f7fc ffd8 	bl	80038e8 <ld_dword>
 8006938:	4602      	mov	r2, r0
 800693a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800693c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800693e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	4619      	mov	r1, r3
 8006944:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006946:	f7fd fc67 	bl	8004218 <clust2sect>
 800694a:	4603      	mov	r3, r0
 800694c:	4619      	mov	r1, r3
 800694e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006950:	f7fd fbc6 	bl	80040e0 <move_window>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <find_volume+0x336>
 800695a:	2301      	movs	r3, #1
 800695c:	e1a6      	b.n	8006cac <find_volume+0x684>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800695e:	2300      	movs	r3, #0
 8006960:	65bb      	str	r3, [r7, #88]	; 0x58
 8006962:	e015      	b.n	8006990 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8006964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006968:	4413      	add	r3, r2
 800696a:	3338      	adds	r3, #56	; 0x38
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b81      	cmp	r3, #129	; 0x81
 8006970:	d10b      	bne.n	800698a <find_volume+0x362>
 8006972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006974:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800697a:	3314      	adds	r3, #20
 800697c:	4413      	add	r3, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f7fc ffb2 	bl	80038e8 <ld_dword>
 8006984:	4603      	mov	r3, r0
 8006986:	2b02      	cmp	r3, #2
 8006988:	d007      	beq.n	800699a <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800698a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800698c:	3320      	adds	r3, #32
 800698e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006996:	d3e5      	bcc.n	8006964 <find_volume+0x33c>
 8006998:	e000      	b.n	800699c <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800699a:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800699c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800699e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a2:	d101      	bne.n	80069a8 <find_volume+0x380>
 80069a4:	230d      	movs	r3, #13
 80069a6:	e181      	b.n	8006cac <find_volume+0x684>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80069a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069aa:	f04f 32ff 	mov.w	r2, #4294967295
 80069ae:	619a      	str	r2, [r3, #24]
 80069b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b6:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80069be:	e15d      	b.n	8006c7c <find_volume+0x654>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80069c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c2:	3338      	adds	r3, #56	; 0x38
 80069c4:	330b      	adds	r3, #11
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fc ff76 	bl	80038b8 <ld_word>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d2:	d001      	beq.n	80069d8 <find_volume+0x3b0>
 80069d4:	230d      	movs	r3, #13
 80069d6:	e169      	b.n	8006cac <find_volume+0x684>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	3338      	adds	r3, #56	; 0x38
 80069dc:	3316      	adds	r3, #22
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fc ff6a 	bl	80038b8 <ld_word>
 80069e4:	4603      	mov	r3, r0
 80069e6:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80069e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <find_volume+0x3d4>
 80069ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f0:	3338      	adds	r3, #56	; 0x38
 80069f2:	3324      	adds	r3, #36	; 0x24
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fc ff77 	bl	80038e8 <ld_dword>
 80069fa:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 80069fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a00:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0e:	789b      	ldrb	r3, [r3, #2]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d005      	beq.n	8006a20 <find_volume+0x3f8>
 8006a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a16:	789b      	ldrb	r3, [r3, #2]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d001      	beq.n	8006a20 <find_volume+0x3f8>
 8006a1c:	230d      	movs	r3, #13
 8006a1e:	e145      	b.n	8006cac <find_volume+0x684>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a28:	fb02 f303 	mul.w	r3, r2, r3
 8006a2c:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3c:	895b      	ldrh	r3, [r3, #10]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <find_volume+0x42c>
 8006a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a44:	895b      	ldrh	r3, [r3, #10]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a4a:	895b      	ldrh	r3, [r3, #10]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <find_volume+0x430>
 8006a54:	230d      	movs	r3, #13
 8006a56:	e129      	b.n	8006cac <find_volume+0x684>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5a:	3338      	adds	r3, #56	; 0x38
 8006a5c:	3311      	adds	r3, #17
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fc ff2a 	bl	80038b8 <ld_word>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6e:	891b      	ldrh	r3, [r3, #8]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <find_volume+0x456>
 8006a7a:	230d      	movs	r3, #13
 8006a7c:	e116      	b.n	8006cac <find_volume+0x684>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a80:	3338      	adds	r3, #56	; 0x38
 8006a82:	3313      	adds	r3, #19
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fc ff17 	bl	80038b8 <ld_word>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d106      	bne.n	8006aa2 <find_volume+0x47a>
 8006a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a96:	3338      	adds	r3, #56	; 0x38
 8006a98:	3320      	adds	r3, #32
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fc ff24 	bl	80038e8 <ld_dword>
 8006aa0:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa4:	3338      	adds	r3, #56	; 0x38
 8006aa6:	330e      	adds	r3, #14
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fc ff05 	bl	80038b8 <ld_word>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ab4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <find_volume+0x498>
 8006abc:	230d      	movs	r3, #13
 8006abe:	e0f5      	b.n	8006cac <find_volume+0x684>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006ac0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ac6:	4413      	add	r3, r2
 8006ac8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006aca:	8912      	ldrh	r2, [r2, #8]
 8006acc:	0912      	lsrs	r2, r2, #4
 8006ace:	b292      	uxth	r2, r2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d201      	bcs.n	8006ae0 <find_volume+0x4b8>
 8006adc:	230d      	movs	r3, #13
 8006ade:	e0e5      	b.n	8006cac <find_volume+0x684>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ae8:	8952      	ldrh	r2, [r2, #10]
 8006aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <find_volume+0x4d2>
 8006af6:	230d      	movs	r3, #13
 8006af8:	e0d8      	b.n	8006cac <find_volume+0x684>
		fmt = FS_FAT32;
 8006afa:	2303      	movs	r3, #3
 8006afc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b02:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d802      	bhi.n	8006b10 <find_volume+0x4e8>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d802      	bhi.n	8006b20 <find_volume+0x4f8>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b22:	1c9a      	adds	r2, r3, #2
 8006b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b26:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b2e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b34:	441a      	add	r2, r3
 8006b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b38:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3e:	441a      	add	r2, r3
 8006b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006b44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d11e      	bne.n	8006b8a <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b4e:	3338      	adds	r3, #56	; 0x38
 8006b50:	332a      	adds	r3, #42	; 0x2a
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fc feb0 	bl	80038b8 <ld_word>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <find_volume+0x53a>
 8006b5e:	230d      	movs	r3, #13
 8006b60:	e0a4      	b.n	8006cac <find_volume+0x684>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b64:	891b      	ldrh	r3, [r3, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <find_volume+0x546>
 8006b6a:	230d      	movs	r3, #13
 8006b6c:	e09e      	b.n	8006cac <find_volume+0x684>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b70:	3338      	adds	r3, #56	; 0x38
 8006b72:	332c      	adds	r3, #44	; 0x2c
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fc feb7 	bl	80038e8 <ld_dword>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b88:	e01f      	b.n	8006bca <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8c:	891b      	ldrh	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <find_volume+0x56e>
 8006b92:	230d      	movs	r3, #13
 8006b94:	e08a      	b.n	8006cac <find_volume+0x684>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b9c:	441a      	add	r2, r3
 8006b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ba2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d103      	bne.n	8006bb2 <find_volume+0x58a>
 8006baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	e00a      	b.n	8006bc8 <find_volume+0x5a0>
 8006bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb4:	69da      	ldr	r2, [r3, #28]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	4413      	add	r3, r2
 8006bbc:	085a      	lsrs	r2, r3, #1
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bcc:	6a1a      	ldr	r2, [r3, #32]
 8006bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006bd4:	0a5b      	lsrs	r3, r3, #9
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d201      	bcs.n	8006bde <find_volume+0x5b6>
 8006bda:	230d      	movs	r3, #13
 8006bdc:	e066      	b.n	8006cac <find_volume+0x684>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be0:	f04f 32ff 	mov.w	r2, #4294967295
 8006be4:	619a      	str	r2, [r3, #24]
 8006be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf0:	2280      	movs	r2, #128	; 0x80
 8006bf2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006bf4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d13f      	bne.n	8006c7c <find_volume+0x654>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfe:	3338      	adds	r3, #56	; 0x38
 8006c00:	3330      	adds	r3, #48	; 0x30
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fc fe58 	bl	80038b8 <ld_word>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d136      	bne.n	8006c7c <find_volume+0x654>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c10:	3301      	adds	r3, #1
 8006c12:	4619      	mov	r1, r3
 8006c14:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c16:	f7fd fa63 	bl	80040e0 <move_window>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d12d      	bne.n	8006c7c <find_volume+0x654>
		{
			fs->fsi_flag = 0;
 8006c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c22:	2200      	movs	r2, #0
 8006c24:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c28:	3338      	adds	r3, #56	; 0x38
 8006c2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fc fe42 	bl	80038b8 <ld_word>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d11d      	bne.n	8006c7c <find_volume+0x654>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c42:	3338      	adds	r3, #56	; 0x38
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fc fe4f 	bl	80038e8 <ld_dword>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	; (8006cb8 <find_volume+0x690>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d114      	bne.n	8006c7c <find_volume+0x654>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c54:	3338      	adds	r3, #56	; 0x38
 8006c56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fc fe44 	bl	80038e8 <ld_dword>
 8006c60:	4603      	mov	r3, r0
 8006c62:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <find_volume+0x694>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d109      	bne.n	8006c7c <find_volume+0x654>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6a:	3338      	adds	r3, #56	; 0x38
 8006c6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fc fe39 	bl	80038e8 <ld_dword>
 8006c76:	4602      	mov	r2, r0
 8006c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8006c82:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006c84:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <find_volume+0x698>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <find_volume+0x698>)
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <find_volume+0x698>)
 8006c92:	881a      	ldrh	r2, [r3, #0]
 8006c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c96:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c9a:	4a0a      	ldr	r2, [pc, #40]	; (8006cc4 <find_volume+0x69c>)
 8006c9c:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca0:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <find_volume+0x6a0>)
 8006ca2:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ca4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ca6:	f7fd f9b3 	bl	8004010 <clear_lock>
#endif
	return FR_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3770      	adds	r7, #112	; 0x70
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb6:	bf00      	nop
 8006cb8:	41615252 	.word	0x41615252
 8006cbc:	61417272 	.word	0x61417272
 8006cc0:	200025fc 	.word	0x200025fc
 8006cc4:	20002880 	.word	0x20002880
 8006cc8:	20002620 	.word	0x20002620

08006ccc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006cd6:	2309      	movs	r3, #9
 8006cd8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01c      	beq.n	8006d1a <validate+0x4e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d018      	beq.n	8006d1a <validate+0x4e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d013      	beq.n	8006d1a <validate+0x4e>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	889a      	ldrh	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	88db      	ldrh	r3, [r3, #6]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d10c      	bne.n	8006d1a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fc fd38 	bl	800377c <disk_status>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <validate+0x4e>
			res = FR_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <validate+0x5a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	e000      	b.n	8006d28 <validate+0x5c>
 8006d26:	2300      	movs	r3, #0
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	6013      	str	r3, [r2, #0]
	return res;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d4a:	f107 0310 	add.w	r3, r7, #16
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff fbc1 	bl	80064d6 <get_ldnumber>
 8006d54:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da01      	bge.n	8006d60 <f_mount+0x28>
 8006d5c:	230b      	movs	r3, #11
 8006d5e:	e02b      	b.n	8006db8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d60:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <f_mount+0x88>)
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d68:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006d70:	69b8      	ldr	r0, [r7, #24]
 8006d72:	f7fd f94d 	bl	8004010 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	490d      	ldr	r1, [pc, #52]	; (8006dc0 <f_mount+0x88>)
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <f_mount+0x66>
 8006d98:	79fb      	ldrb	r3, [r7, #7]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d001      	beq.n	8006da2 <f_mount+0x6a>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e00a      	b.n	8006db8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006da2:	f107 010c 	add.w	r1, r7, #12
 8006da6:	f107 0308 	add.w	r3, r7, #8
 8006daa:	2200      	movs	r2, #0
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff fc3b 	bl	8006628 <find_volume>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	200025f8 	.word	0x200025f8

08006dc4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc8:	b0a6      	sub	sp, #152	; 0x98
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	61f8      	str	r0, [r7, #28]
 8006dce:	61b9      	str	r1, [r7, #24]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <f_open+0x1a>
 8006dda:	2309      	movs	r3, #9
 8006ddc:	e2ae      	b.n	800733c <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de4:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8006de6:	7dfa      	ldrb	r2, [r7, #23]
 8006de8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006dec:	f107 0318 	add.w	r3, r7, #24
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fc19 	bl	8006628 <find_volume>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 8006dfc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 8292 	bne.w	800732a <f_open+0x566>
		dj.obj.fs = fs;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fab6 	bl	8006384 <follow_path>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e1e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d11a      	bne.n	8006e5c <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e26:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da03      	bge.n	8006e38 <f_open+0x74>
				res = FR_INVALID_NAME;
 8006e30:	2306      	movs	r3, #6
 8006e32:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006e36:	e011      	b.n	8006e5c <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bf14      	ite	ne
 8006e42:	2301      	movne	r3, #1
 8006e44:	2300      	moveq	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fc ff95 	bl	8003d80 <chk_lock>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	f003 031c 	and.w	r3, r3, #28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8115 	beq.w	8007092 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 8006e68:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d017      	beq.n	8006ea0 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006e70:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d10e      	bne.n	8006e96 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006e78:	f7fc ffde 	bl	8003e38 <enq_lock>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d006      	beq.n	8006e90 <f_open+0xcc>
 8006e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe ff1e 	bl	8005cc8 <dir_register>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	e000      	b.n	8006e92 <f_open+0xce>
 8006e90:	2312      	movs	r3, #18
 8006e92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	f043 0308 	orr.w	r3, r3, #8
 8006e9c:	75fb      	strb	r3, [r7, #23]
 8006e9e:	e011      	b.n	8006ec4 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ea0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ea4:	f003 0311 	and.w	r3, r3, #17
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <f_open+0xf0>
					res = FR_DENIED;
 8006eac:	2307      	movs	r3, #7
 8006eae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006eb2:	e007      	b.n	8006ec4 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <f_open+0x100>
 8006ebe:	2308      	movs	r3, #8
 8006ec0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ec4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 80fe 	bne.w	80070ca <f_open+0x306>
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80f8 	beq.w	80070ca <f_open+0x306>
				dw = GET_FATTIME();
 8006eda:	f7fb ff19 	bl	8002d10 <get_fattime>
 8006ede:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	f040 8084 	bne.w	8006ff4 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8006eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	3334      	adds	r3, #52	; 0x34
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fc fcf5 	bl	80038e8 <ld_dword>
 8006efe:	4602      	mov	r2, r0
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	3338      	adds	r3, #56	; 0x38
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fc fd0f 	bl	800392e <ld_qword>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	3321      	adds	r3, #33	; 0x21
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	3308      	adds	r3, #8
 8006f38:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fc fdec 	bl	8003b1a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	3314      	adds	r3, #20
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	330c      	adds	r3, #12
 8006f52:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fc fddf 	bl	8003b1a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	3315      	adds	r3, #21
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	3334      	adds	r3, #52	; 0x34
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fc fdce 	bl	8003b1a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	4608      	mov	r0, r1
 8006f90:	f7fc fdef 	bl	8003b72 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	f7fc fde4 	bl	8003b72 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	3321      	adds	r3, #33	; 0x21
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8006fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe fbd3 	bl	8005764 <store_xdir>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8006fc4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d17e      	bne.n	80070ca <f_open+0x306>
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d07a      	beq.n	80070ca <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8006fd4:	69f8      	ldr	r0, [r7, #28]
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f7fd fc8b 	bl	80048f8 <remove_chain>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	3a01      	subs	r2, #1
 8006ff0:	615a      	str	r2, [r3, #20]
 8006ff2:	e06a      	b.n	80070ca <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff6:	330e      	adds	r3, #14
 8006ff8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fc fd8c 	bl	8003b1a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007004:	3316      	adds	r3, #22
 8007006:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800700a:	4618      	mov	r0, r3
 800700c:	f7fc fd85 	bl	8003b1a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007012:	330b      	adds	r3, #11
 8007014:	2220      	movs	r2, #32
 8007016:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe f81a 	bl	8005058 <ld_clust>
 8007024:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800702c:	2200      	movs	r2, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe f831 	bl	8005096 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007036:	331c      	adds	r3, #28
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f7fc fd6d 	bl	8003b1a <st_dword>
					fs->wflag = 1;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	2201      	movs	r2, #1
 8007044:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007046:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800704a:	2b00      	cmp	r3, #0
 800704c:	d03d      	beq.n	80070ca <f_open+0x306>
						dw = fs->winsect;
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8007056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800705a:	2200      	movs	r2, #0
 800705c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007060:	4618      	mov	r0, r3
 8007062:	f7fd fc49 	bl	80048f8 <remove_chain>
 8007066:	4603      	mov	r3, r0
 8007068:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800706c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007070:	2b00      	cmp	r3, #0
 8007072:	d12a      	bne.n	80070ca <f_open+0x306>
							res = move_window(fs, dw);
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800707a:	4618      	mov	r0, r3
 800707c:	f7fd f830 	bl	80040e0 <move_window>
 8007080:	4603      	mov	r3, r0
 8007082:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800708c:	3a01      	subs	r2, #1
 800708e:	615a      	str	r2, [r3, #20]
 8007090:	e01b      	b.n	80070ca <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007092:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007096:	2b00      	cmp	r3, #0
 8007098:	d117      	bne.n	80070ca <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800709a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <f_open+0x2ea>
					res = FR_NO_FILE;
 80070a6:	2304      	movs	r3, #4
 80070a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80070ac:	e00d      	b.n	80070ca <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <f_open+0x306>
 80070b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <f_open+0x306>
						res = FR_DENIED;
 80070c4:	2307      	movs	r3, #7
 80070c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 80070ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d128      	bne.n	8007124 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <f_open+0x320>
				mode |= FA_MODIFIED;
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
 80070de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e2:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 80070ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	f023 0301 	bic.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fc feb6 	bl	8003e7c <inc_lock>
 8007110:	4602      	mov	r2, r0
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <f_open+0x360>
 800711e:	2302      	movs	r3, #2
 8007120:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007124:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007128:	2b00      	cmp	r3, #0
 800712a:	f040 80fe 	bne.w	800732a <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b04      	cmp	r3, #4
 8007134:	d12d      	bne.n	8007192 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8007136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800713c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007140:	4613      	mov	r3, r2
 8007142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007146:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800714a:	431a      	orrs	r2, r3
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8007150:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	3334      	adds	r3, #52	; 0x34
 800715c:	4618      	mov	r0, r3
 800715e:	f7fc fbc3 	bl	80038e8 <ld_dword>
 8007162:	4602      	mov	r2, r0
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	3338      	adds	r3, #56	; 0x38
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fbdd 	bl	800392e <ld_qword>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	69f9      	ldr	r1, [r7, #28]
 800717a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	3321      	adds	r3, #33	; 0x21
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	b2da      	uxtb	r2, r3
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	71da      	strb	r2, [r3, #7]
 8007190:	e016      	b.n	80071c0 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007196:	4611      	mov	r1, r2
 8007198:	4618      	mov	r0, r3
 800719a:	f7fd ff5d 	bl	8005058 <ld_clust>
 800719e:	4602      	mov	r2, r0
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80071a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071a6:	331c      	adds	r3, #28
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fc fb9d 	bl	80038e8 <ld_dword>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2200      	movs	r2, #0
 80071b2:	60bb      	str	r3, [r7, #8]
 80071b4:	60fa      	str	r2, [r7, #12]
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071bc:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	2200      	movs	r2, #0
 80071c4:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80071c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	88da      	ldrh	r2, [r3, #6]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	7dfa      	ldrb	r2, [r7, #23]
 80071d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2200      	movs	r2, #0
 80071e8:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80071ea:	69f9      	ldr	r1, [r7, #28]
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	3354      	adds	r3, #84	; 0x54
 80071fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007200:	2100      	movs	r1, #0
 8007202:	4618      	mov	r0, r3
 8007204:	f7fc fd5e 	bl	8003cc4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 808b 	beq.w	800732a <f_open+0x566>
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	f000 8085 	beq.w	800732a <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007226:	69f9      	ldr	r1, [r7, #28]
 8007228:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	895b      	ldrh	r3, [r3, #10]
 8007230:	025b      	lsls	r3, r3, #9
 8007232:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007242:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8007246:	e026      	b.n	8007296 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800724e:	4618      	mov	r0, r3
 8007250:	f7fd f802 	bl	8004258 <get_fat>
 8007254:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 8007258:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800725c:	2b01      	cmp	r3, #1
 800725e:	d802      	bhi.n	8007266 <f_open+0x4a2>
 8007260:	2302      	movs	r3, #2
 8007262:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007266:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d102      	bne.n	8007276 <f_open+0x4b2>
 8007270:	2301      	movs	r3, #1
 8007272:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007278:	2200      	movs	r2, #0
 800727a:	469a      	mov	sl, r3
 800727c:	4693      	mov	fp, r2
 800727e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007282:	ebb2 010a 	subs.w	r1, r2, sl
 8007286:	6039      	str	r1, [r7, #0]
 8007288:	eb63 030b 	sbc.w	r3, r3, fp
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007292:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8007296:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800729a:	2b00      	cmp	r3, #0
 800729c:	d109      	bne.n	80072b2 <f_open+0x4ee>
 800729e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072a0:	2200      	movs	r2, #0
 80072a2:	4698      	mov	r8, r3
 80072a4:	4691      	mov	r9, r2
 80072a6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80072aa:	4590      	cmp	r8, r2
 80072ac:	eb79 0303 	sbcs.w	r3, r9, r3
 80072b0:	d3ca      	bcc.n	8007248 <f_open+0x484>
				}
				fp->clust = clst;
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80072ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d133      	bne.n	800732a <f_open+0x566>
 80072c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80072c6:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80072ca:	2500      	movs	r5, #0
 80072cc:	ea54 0305 	orrs.w	r3, r4, r5
 80072d0:	d02b      	beq.n	800732a <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fc ff9d 	bl	8004218 <clust2sect>
 80072de:	67b8      	str	r0, [r7, #120]	; 0x78
 80072e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <f_open+0x52a>
						res = FR_INT_ERR;
 80072e6:	2302      	movs	r3, #2
 80072e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80072ec:	e01d      	b.n	800732a <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80072ee:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	f04f 0300 	mov.w	r3, #0
 80072fa:	0a42      	lsrs	r2, r0, #9
 80072fc:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007300:	0a4b      	lsrs	r3, r1, #9
 8007302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007304:	441a      	add	r2, r3
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	7858      	ldrb	r0, [r3, #1]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007318:	2301      	movs	r3, #1
 800731a:	f7fc fa6f 	bl	80037fc <disk_read>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <f_open+0x566>
 8007324:	2301      	movs	r3, #1
 8007326:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800732a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <f_open+0x574>
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007338:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800733c:	4618      	mov	r0, r3
 800733e:	3798      	adds	r7, #152	; 0x98
 8007340:	46bd      	mov	sp, r7
 8007342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007346 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007346:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800734a:	b08c      	sub	sp, #48	; 0x30
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f107 0210 	add.w	r2, r7, #16
 8007366:	4611      	mov	r1, r2
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff fcaf 	bl	8006ccc <validate>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007378:	2b00      	cmp	r3, #0
 800737a:	d108      	bne.n	800738e <f_write+0x48>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <f_write+0x4e>
 800738e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007392:	e187      	b.n	80076a4 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <f_write+0x60>
 80073a2:	2307      	movs	r3, #7
 80073a4:	e17e      	b.n	80076a4 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	f000 816a 	beq.w	8007684 <f_write+0x33e>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	18d1      	adds	r1, r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80073c0:	4613      	mov	r3, r2
 80073c2:	4299      	cmp	r1, r3
 80073c4:	f080 815e 	bcs.w	8007684 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80073ce:	4613      	mov	r3, r2
 80073d0:	43db      	mvns	r3, r3
 80073d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80073d4:	e156      	b.n	8007684 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80073dc:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80073e0:	2500      	movs	r5, #0
 80073e2:	ea54 0305 	orrs.w	r3, r4, r5
 80073e6:	f040 80fb 	bne.w	80075e0 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	0a42      	lsrs	r2, r0, #9
 80073fa:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80073fe:	0a4b      	lsrs	r3, r1, #9
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	895b      	ldrh	r3, [r3, #10]
 8007404:	3b01      	subs	r3, #1
 8007406:	4013      	ands	r3, r2
 8007408:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d146      	bne.n	800749e <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007416:	4313      	orrs	r3, r2
 8007418:	d10c      	bne.n	8007434 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11a      	bne.n	800745c <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f7fd fb18 	bl	8004a60 <create_chain>
 8007430:	62b8      	str	r0, [r7, #40]	; 0x28
 8007432:	e013      	b.n	800745c <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	2b00      	cmp	r3, #0
 800743a:	d007      	beq.n	800744c <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f7fd fc0d 	bl	8004c62 <clmt_clust>
 8007448:	62b8      	str	r0, [r7, #40]	; 0x28
 800744a:	e007      	b.n	800745c <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f7fd fb03 	bl	8004a60 <create_chain>
 800745a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8115 	beq.w	800768e <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	2b01      	cmp	r3, #1
 8007468:	d105      	bne.n	8007476 <f_write+0x130>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2202      	movs	r2, #2
 800746e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007472:	2302      	movs	r3, #2
 8007474:	e116      	b.n	80076a4 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d105      	bne.n	800748a <f_write+0x144>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007486:	2301      	movs	r3, #1
 8007488:	e10c      	b.n	80076a4 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800748e:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <f_write+0x158>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800749c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da1b      	bge.n	80074e2 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	7858      	ldrb	r0, [r3, #1]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074b8:	2301      	movs	r3, #1
 80074ba:	f7fc f9bf 	bl	800383c <disk_write>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <f_write+0x18a>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0e9      	b.n	80076a4 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fc fe94 	bl	8004218 <clust2sect>
 80074f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d105      	bne.n	8007504 <f_write+0x1be>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007500:	2302      	movs	r3, #2
 8007502:	e0cf      	b.n	80076a4 <f_write+0x35e>
			sect += csect;
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	4413      	add	r3, r2
 800750a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	0a5b      	lsrs	r3, r3, #9
 8007510:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d03f      	beq.n	8007598 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	4413      	add	r3, r2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	8952      	ldrh	r2, [r2, #10]
 8007522:	4293      	cmp	r3, r2
 8007524:	d905      	bls.n	8007532 <f_write+0x1ec>
					cc = fs->csize - csect;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	895b      	ldrh	r3, [r3, #10]
 800752a:	461a      	mov	r2, r3
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	7858      	ldrb	r0, [r3, #1]
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	69f9      	ldr	r1, [r7, #28]
 800753c:	f7fc f97e 	bl	800383c <disk_write>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <f_write+0x20c>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800754e:	2301      	movs	r3, #1
 8007550:	e0a8      	b.n	80076a4 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	6a3a      	ldr	r2, [r7, #32]
 800755c:	429a      	cmp	r2, r3
 800755e:	d917      	bls.n	8007590 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	025b      	lsls	r3, r3, #9
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007578:	4619      	mov	r1, r3
 800757a:	f7fc fb82 	bl	8003c82 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007588:	b2da      	uxtb	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	025b      	lsls	r3, r3, #9
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007596:	e04a      	b.n	800762e <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d01b      	beq.n	80075da <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80075ae:	4290      	cmp	r0, r2
 80075b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80075b4:	d211      	bcs.n	80075da <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	7858      	ldrb	r0, [r3, #1]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80075c0:	2301      	movs	r3, #1
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	f7fc f91a 	bl	80037fc <disk_read>
 80075c8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80075d6:	2301      	movs	r3, #1
 80075d8:	e064      	b.n	80076a4 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80075e6:	4613      	mov	r3, r2
 80075e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80075f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d901      	bls.n	80075fe <f_write+0x2b8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800760a:	4613      	mov	r3, r2
 800760c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007610:	440b      	add	r3, r1
 8007612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007614:	69f9      	ldr	r1, [r7, #28]
 8007616:	4618      	mov	r0, r3
 8007618:	f7fc fb33 	bl	8003c82 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007626:	b2da      	uxtb	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	4413      	add	r3, r2
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800763c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800763e:	2000      	movs	r0, #0
 8007640:	4688      	mov	r8, r1
 8007642:	4681      	mov	r9, r0
 8007644:	eb12 0a08 	adds.w	sl, r2, r8
 8007648:	eb43 0b09 	adc.w	fp, r3, r9
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007658:	68f9      	ldr	r1, [r7, #12]
 800765a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800765e:	4282      	cmp	r2, r0
 8007660:	eb73 0c01 	sbcs.w	ip, r3, r1
 8007664:	d201      	bcs.n	800766a <f_write+0x324>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	68f9      	ldr	r1, [r7, #12]
 800766c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	441a      	add	r2, r3
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f47f aea5 	bne.w	80073d6 <f_write+0x90>
 800768c:	e000      	b.n	8007690 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800768e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769a:	b2da      	uxtb	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3730      	adds	r7, #48	; 0x30
 80076a8:	46bd      	mov	sp, r7
 80076aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080076ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b09a      	sub	sp, #104	; 0x68
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80076bc:	4611      	mov	r1, r2
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff fb04 	bl	8006ccc <validate>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80076ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 8105 	bne.w	80078de <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 80fd 	beq.w	80078de <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da17      	bge.n	8007720 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80076f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076f2:	7858      	ldrb	r0, [r3, #1]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076fe:	2301      	movs	r3, #1
 8007700:	f7fc f89c 	bl	800383c <disk_write>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <f_sync+0x60>
 800770a:	2301      	movs	r3, #1
 800770c:	e0e9      	b.n	80078e2 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007718:	b2da      	uxtb	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007720:	f7fb faf6 	bl	8002d10 <get_fattime>
 8007724:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8007726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b04      	cmp	r3, #4
 800772c:	f040 808c 	bne.w	8007848 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4618      	mov	r0, r3
 8007734:	f7fd f880 	bl	8004838 <fill_first_frag>
 8007738:	4603      	mov	r3, r0
 800773a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800773e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	f04f 32ff 	mov.w	r2, #4294967295
 8007750:	4619      	mov	r1, r3
 8007752:	f7fd f8a0 	bl	8004896 <fill_last_frag>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800775c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 80bc 	bne.w	80078de <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	f107 0308 	add.w	r3, r7, #8
 800776c:	4611      	mov	r1, r2
 800776e:	4618      	mov	r0, r3
 8007770:	f7fd ffc2 	bl	80056f8 <load_obj_dir>
 8007774:	4603      	mov	r3, r0
 8007776:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800777a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800777e:	2b00      	cmp	r3, #0
 8007780:	f040 80ad 	bne.w	80078de <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8007784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	3304      	adds	r3, #4
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	3304      	adds	r3, #4
 8007792:	f042 0220 	orr.w	r2, r2, #32
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	79da      	ldrb	r2, [r3, #7]
 800779e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	3321      	adds	r3, #33	; 0x21
 80077a4:	f042 0201 	orr.w	r2, r2, #1
 80077a8:	b2d2      	uxtb	r2, r2
 80077aa:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80077ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fc f9ad 	bl	8003b1a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80077c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80077ce:	4608      	mov	r0, r1
 80077d0:	f7fc f9cf 	bl	8003b72 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80077d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80077e2:	4608      	mov	r0, r1
 80077e4:	f7fc f9c5 	bl	8003b72 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80077e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	330c      	adds	r3, #12
 80077ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fc f992 	bl	8003b1a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80077f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	3315      	adds	r3, #21
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8007800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	3310      	adds	r3, #16
 8007806:	2100      	movs	r1, #0
 8007808:	4618      	mov	r0, r3
 800780a:	f7fc f986 	bl	8003b1a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd ffa6 	bl	8005764 <store_xdir>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800781e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007822:	2b00      	cmp	r3, #0
 8007824:	d15b      	bne.n	80078de <f_sync+0x230>
							res = sync_fs(fs);
 8007826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007828:	4618      	mov	r0, r3
 800782a:	f7fc fc87 	bl	800413c <sync_fs>
 800782e:	4603      	mov	r3, r0
 8007830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800783a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783e:	b2da      	uxtb	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007846:	e04a      	b.n	80078de <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f7fc fc45 	bl	80040e0 <move_window>
 8007856:	4603      	mov	r3, r0
 8007858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800785c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007860:	2b00      	cmp	r3, #0
 8007862:	d13c      	bne.n	80078de <f_sync+0x230>
					dir = fp->dir_ptr;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007868:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800786a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800786c:	330b      	adds	r3, #11
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007872:	330b      	adds	r3, #11
 8007874:	f042 0220 	orr.w	r2, r2, #32
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	461a      	mov	r2, r3
 8007886:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007888:	f7fd fc05 	bl	8005096 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800788c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800788e:	f103 001c 	add.w	r0, r3, #28
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007898:	4613      	mov	r3, r2
 800789a:	4619      	mov	r1, r3
 800789c:	f7fc f93d 	bl	8003b1a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80078a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a2:	3316      	adds	r3, #22
 80078a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fc f937 	bl	8003b1a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80078ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ae:	3312      	adds	r3, #18
 80078b0:	2100      	movs	r1, #0
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fc f916 	bl	8003ae4 <st_word>
					fs->wflag = 1;
 80078b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078ba:	2201      	movs	r2, #1
 80078bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80078be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fc fc3b 	bl	800413c <sync_fs>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80078de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3768      	adds	r7, #104	; 0x68
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff fedb 	bl	80076ae <f_sync>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d118      	bne.n	8007934 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f107 0208 	add.w	r2, r7, #8
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7ff f9de 	bl	8006ccc <validate>
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10c      	bne.n	8007934 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	4618      	mov	r0, r3
 8007920:	f7fc fb3a 	bl	8003f98 <dec_lock>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d102      	bne.n	8007934 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800793e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007942:	b0b6      	sub	sp, #216	; 0xd8
 8007944:	af00      	add	r7, sp, #0
 8007946:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800794a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800794e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007952:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f7ff f9b7 	bl	8006ccc <validate>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007964:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007968:	2b00      	cmp	r3, #0
 800796a:	d105      	bne.n	8007978 <f_lseek+0x3a>
 800796c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007970:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007974:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8007978:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800797c:	2b00      	cmp	r3, #0
 800797e:	d111      	bne.n	80079a4 <f_lseek+0x66>
 8007980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b04      	cmp	r3, #4
 8007988:	d10c      	bne.n	80079a4 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800798a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800798e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	f04f 32ff 	mov.w	r2, #4294967295
 8007998:	4619      	mov	r1, r3
 800799a:	f7fc ff7c 	bl	8004896 <fill_last_frag>
 800799e:	4603      	mov	r3, r0
 80079a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80079a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <f_lseek+0x74>
 80079ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80079b0:	e38c      	b.n	80080cc <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80079b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8141 	beq.w	8007c40 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80079be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	bf08      	it	eq
 80079c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80079cc:	f040 8087 	bne.w	8007ade <f_lseek+0x1a0>
			tbl = fp->cltbl;
 80079d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80079da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079de:	1d1a      	adds	r2, r3, #4
 80079e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079ea:	2302      	movs	r3, #2
 80079ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 80079f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 80079fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d058      	beq.n	8007ab4 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a14:	3302      	adds	r3, #2
 8007a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 8007a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a26:	3301      	adds	r3, #1
 8007a28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 8007a2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a30:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fc fc0f 	bl	8004258 <get_fat>
 8007a3a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d806      	bhi.n	8007a54 <f_lseek+0x116>
 8007a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007a50:	2302      	movs	r3, #2
 8007a52:	e33b      	b.n	80080cc <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d106      	bne.n	8007a6c <f_lseek+0x12e>
 8007a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e32f      	b.n	80080cc <f_lseek+0x78e>
					} while (cl == pcl + 1);
 8007a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a70:	3301      	adds	r3, #1
 8007a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d0cf      	beq.n	8007a1a <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007a7a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d80f      	bhi.n	8007aa6 <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 8007a86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a8a:	1d1a      	adds	r2, r3, #4
 8007a8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007aa0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007aa4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d3a6      	bcc.n	8007a02 <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007abe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ac4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d804      	bhi.n	8007ad6 <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8007acc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e2f8      	b.n	80080c8 <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007ad6:	2311      	movs	r3, #17
 8007ad8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007adc:	e2f4      	b.n	80080c8 <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ae2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007ae6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007aea:	4290      	cmp	r0, r2
 8007aec:	eb71 0303 	sbcs.w	r3, r1, r3
 8007af0:	d205      	bcs.n	8007afe <f_lseek+0x1c0>
 8007af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007af6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007afa:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 8007afe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007b02:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b06:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8007b0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f000 82da 	beq.w	80080c8 <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007b14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b18:	f112 3aff 	adds.w	sl, r2, #4294967295
 8007b1c:	f143 3bff 	adc.w	fp, r3, #4294967295
 8007b20:	4652      	mov	r2, sl
 8007b22:	465b      	mov	r3, fp
 8007b24:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007b28:	f7fd f89b 	bl	8004c62 <clmt_clust>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8007b34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007b38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7fc fb69 	bl	8004218 <clust2sect>
 8007b46:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <f_lseek+0x222>
 8007b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e2b5      	b.n	80080cc <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007b60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b64:	1e54      	subs	r4, r2, #1
 8007b66:	f143 35ff 	adc.w	r5, r3, #4294967295
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	0a62      	lsrs	r2, r4, #9
 8007b74:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 8007b78:	0a6b      	lsrs	r3, r5, #9
 8007b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b7e:	895b      	ldrh	r3, [r3, #10]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	4013      	ands	r3, r2
 8007b84:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b88:	4413      	add	r3, r2
 8007b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007b8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007b96:	f3c2 0808 	ubfx	r8, r2, #0, #9
 8007b9a:	f04f 0900 	mov.w	r9, #0
 8007b9e:	ea58 0309 	orrs.w	r3, r8, r9
 8007ba2:	f000 8291 	beq.w	80080c8 <f_lseek+0x78a>
 8007ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	f000 8289 	beq.w	80080c8 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007bb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bbe:	b25b      	sxtb	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	da21      	bge.n	8007c08 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bc8:	7858      	ldrb	r0, [r3, #1]
 8007bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bce:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f7fb fe2f 	bl	800383c <disk_write>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <f_lseek+0x2b4>
 8007be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e26c      	b.n	80080cc <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c0c:	7858      	ldrb	r0, [r3, #1]
 8007c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c12:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007c16:	2301      	movs	r3, #1
 8007c18:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c1c:	f7fb fdee 	bl	80037fc <disk_read>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d006      	beq.n	8007c34 <f_lseek+0x2f6>
 8007c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007c30:	2301      	movs	r3, #1
 8007c32:	e24b      	b.n	80080cc <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 8007c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c38:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c3c:	645a      	str	r2, [r3, #68]	; 0x44
 8007c3e:	e243      	b.n	80080c8 <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 8007c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d009      	beq.n	8007c5e <f_lseek+0x320>
 8007c4a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d305      	bcc.n	8007c5e <f_lseek+0x320>
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007c5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007c66:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007c6a:	4290      	cmp	r0, r2
 8007c6c:	eb71 0303 	sbcs.w	r3, r1, r3
 8007c70:	d20d      	bcs.n	8007c8e <f_lseek+0x350>
 8007c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <f_lseek+0x350>
			ofs = fp->obj.objsize;
 8007c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c8a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 8007c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007c96:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ca0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 8007cb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f000 818f 	beq.w	8007fd8 <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cbe:	895b      	ldrh	r3, [r3, #10]
 8007cc0:	025b      	lsls	r3, r3, #9
 8007cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 8007cc6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	d06b      	beq.n	8007da6 <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007cce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007cd2:	1e51      	subs	r1, r2, #1
 8007cd4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007cd8:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ce8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007cf2:	f7f8 fabd 	bl	8000270 <__aeabi_uldivmod>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	461d      	mov	r5, r3
 8007cfe:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007d02:	1e51      	subs	r1, r2, #1
 8007d04:	6739      	str	r1, [r7, #112]	; 0x70
 8007d06:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007d0a:	677b      	str	r3, [r7, #116]	; 0x74
 8007d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d10:	2200      	movs	r2, #0
 8007d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d16:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007d1a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007d1e:	f7f8 faa7 	bl	8000270 <__aeabi_uldivmod>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 8007d26:	4294      	cmp	r4, r2
 8007d28:	eb75 0303 	sbcs.w	r3, r5, r3
 8007d2c:	d33b      	bcc.n	8007da6 <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007d2e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007d32:	1e51      	subs	r1, r2, #1
 8007d34:	6639      	str	r1, [r7, #96]	; 0x60
 8007d36:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007d3a:	667b      	str	r3, [r7, #100]	; 0x64
 8007d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d40:	3b01      	subs	r3, #1
 8007d42:	2200      	movs	r2, #0
 8007d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007d48:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	43db      	mvns	r3, r3
 8007d50:	653b      	str	r3, [r7, #80]	; 0x50
 8007d52:	4613      	mov	r3, r2
 8007d54:	43db      	mvns	r3, r3
 8007d56:	657b      	str	r3, [r7, #84]	; 0x54
 8007d58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d62:	4602      	mov	r2, r0
 8007d64:	4013      	ands	r3, r2
 8007d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d68:	462b      	mov	r3, r5
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007d78:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 8007d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d80:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007d88:	1a14      	subs	r4, r2, r0
 8007d8a:	60bc      	str	r4, [r7, #8]
 8007d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007d96:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 8007d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007da4:	e031      	b.n	8007e0a <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007da6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007db0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d123      	bne.n	8007e00 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8007db8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fc fe4e 	bl	8004a60 <create_chain>
 8007dc4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007dc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d106      	bne.n	8007dde <f_lseek+0x4a0>
 8007dd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e176      	b.n	80080cc <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007dde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d106      	bne.n	8007df6 <f_lseek+0x4b8>
 8007de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007df2:	2301      	movs	r3, #1
 8007df4:	e16a      	b.n	80080cc <f_lseek+0x78e>
					fp->obj.sclust = clst;
 8007df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dfe:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 8007e00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e08:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 8007e0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80e2 	beq.w	8007fd8 <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007e14:	e090      	b.n	8007f38 <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 8007e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e1e:	647a      	str	r2, [r7, #68]	; 0x44
 8007e20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007e24:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8007e28:	4621      	mov	r1, r4
 8007e2a:	1a51      	subs	r1, r2, r1
 8007e2c:	6039      	str	r1, [r7, #0]
 8007e2e:	4629      	mov	r1, r5
 8007e30:	eb63 0301 	sbc.w	r3, r3, r1
 8007e34:	607b      	str	r3, [r7, #4]
 8007e36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007e3a:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 8007e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007e46:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007e50:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007e54:	4621      	mov	r1, r4
 8007e56:	1851      	adds	r1, r2, r1
 8007e58:	6339      	str	r1, [r7, #48]	; 0x30
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	414b      	adcs	r3, r1
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007e68:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007e6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d031      	beq.n	8007ee0 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8007e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e80:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007e8c:	4282      	cmp	r2, r0
 8007e8e:	418b      	sbcs	r3, r1
 8007e90:	d212      	bcs.n	8007eb8 <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 8007e92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007e9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e9e:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 8007ea2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007eb4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ebc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fc fdcd 	bl	8004a60 <create_chain>
 8007ec6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007eca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10f      	bne.n	8007ef2 <f_lseek+0x5b4>
							ofs = 0; break;
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8007ede:	e03b      	b.n	8007f58 <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ee4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fc f9b5 	bl	8004258 <get_fat>
 8007eee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ef2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d106      	bne.n	8007f0a <f_lseek+0x5cc>
 8007efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007f06:	2301      	movs	r3, #1
 8007f08:	e0e0      	b.n	80080cc <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007f0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d906      	bls.n	8007f20 <f_lseek+0x5e2>
 8007f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d306      	bcc.n	8007f2e <f_lseek+0x5f0>
 8007f20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f24:	2202      	movs	r2, #2
 8007f26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e0ce      	b.n	80080cc <f_lseek+0x78e>
					fp->clust = clst;
 8007f2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f36:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8007f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f46:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4291      	cmp	r1, r2
 8007f4e:	4629      	mov	r1, r5
 8007f50:	eb71 0303 	sbcs.w	r3, r1, r3
 8007f54:	f4ff af5f 	bcc.w	8007e16 <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 8007f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f5c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007f60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f64:	1884      	adds	r4, r0, r2
 8007f66:	623c      	str	r4, [r7, #32]
 8007f68:	eb41 0303 	adc.w	r3, r1, r3
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f76:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 8007f7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f7e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	2300      	movs	r3, #0
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	d022      	beq.n	8007fd8 <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f96:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fc f93c 	bl	8004218 <clust2sect>
 8007fa0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <f_lseek+0x67c>
 8007fac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e088      	b.n	80080cc <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 8007fba:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	0a42      	lsrs	r2, r0, #9
 8007fc8:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007fcc:	0a4b      	lsrs	r3, r1, #9
 8007fce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fdc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007fe0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007fe4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8007fe8:	4290      	cmp	r0, r2
 8007fea:	eb71 0303 	sbcs.w	r3, r1, r3
 8007fee:	d212      	bcs.n	8008016 <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 8007ff0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ff4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007ff8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007ffc:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 8008000:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008004:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800c:	b2da      	uxtb	r2, r3
 800800e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008016:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800801a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800801e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800802c:	460b      	mov	r3, r1
 800802e:	4313      	orrs	r3, r2
 8008030:	d04a      	beq.n	80080c8 <f_lseek+0x78a>
 8008032:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008038:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800803c:	429a      	cmp	r2, r3
 800803e:	d043      	beq.n	80080c8 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008040:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008044:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008048:	b25b      	sxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	da21      	bge.n	8008092 <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800804e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008052:	7858      	ldrb	r0, [r3, #1]
 8008054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008058:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800805c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008062:	2301      	movs	r3, #1
 8008064:	f7fb fbea 	bl	800383c <disk_write>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d006      	beq.n	800807c <f_lseek+0x73e>
 800806e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008078:	2301      	movs	r3, #1
 800807a:	e027      	b.n	80080cc <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800807c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008088:	b2da      	uxtb	r2, r3
 800808a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800808e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008092:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008096:	7858      	ldrb	r0, [r3, #1]
 8008098:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800809c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80080a0:	2301      	movs	r3, #1
 80080a2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80080a6:	f7fb fba9 	bl	80037fc <disk_read>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d006      	beq.n	80080be <f_lseek+0x780>
 80080b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80080ba:	2301      	movs	r3, #1
 80080bc:	e006      	b.n	80080cc <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 80080be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080c2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80080c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 80080c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	37d8      	adds	r7, #216	; 0xd8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080080d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	4613      	mov	r3, r2
 80080e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80080e6:	2301      	movs	r3, #1
 80080e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80080ee:	4b1f      	ldr	r3, [pc, #124]	; (800816c <FATFS_LinkDriverEx+0x94>)
 80080f0:	7a5b      	ldrb	r3, [r3, #9]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d131      	bne.n	800815c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80080f8:	4b1c      	ldr	r3, [pc, #112]	; (800816c <FATFS_LinkDriverEx+0x94>)
 80080fa:	7a5b      	ldrb	r3, [r3, #9]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	461a      	mov	r2, r3
 8008100:	4b1a      	ldr	r3, [pc, #104]	; (800816c <FATFS_LinkDriverEx+0x94>)
 8008102:	2100      	movs	r1, #0
 8008104:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008106:	4b19      	ldr	r3, [pc, #100]	; (800816c <FATFS_LinkDriverEx+0x94>)
 8008108:	7a5b      	ldrb	r3, [r3, #9]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	4a17      	ldr	r2, [pc, #92]	; (800816c <FATFS_LinkDriverEx+0x94>)
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008116:	4b15      	ldr	r3, [pc, #84]	; (800816c <FATFS_LinkDriverEx+0x94>)
 8008118:	7a5b      	ldrb	r3, [r3, #9]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	4b13      	ldr	r3, [pc, #76]	; (800816c <FATFS_LinkDriverEx+0x94>)
 8008120:	4413      	add	r3, r2
 8008122:	79fa      	ldrb	r2, [r7, #7]
 8008124:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008126:	4b11      	ldr	r3, [pc, #68]	; (800816c <FATFS_LinkDriverEx+0x94>)
 8008128:	7a5b      	ldrb	r3, [r3, #9]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	b2d1      	uxtb	r1, r2
 8008130:	4a0e      	ldr	r2, [pc, #56]	; (800816c <FATFS_LinkDriverEx+0x94>)
 8008132:	7251      	strb	r1, [r2, #9]
 8008134:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008136:	7dbb      	ldrb	r3, [r7, #22]
 8008138:	3330      	adds	r3, #48	; 0x30
 800813a:	b2da      	uxtb	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	3301      	adds	r3, #1
 8008144:	223a      	movs	r2, #58	; 0x3a
 8008146:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	3302      	adds	r3, #2
 800814c:	222f      	movs	r2, #47	; 0x2f
 800814e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	3303      	adds	r3, #3
 8008154:	2200      	movs	r2, #0
 8008156:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
}
 800815e:	4618      	mov	r0, r3
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	20002a80 	.word	0x20002a80

08008170 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800817a:	2200      	movs	r2, #0
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff ffaa 	bl	80080d8 <FATFS_LinkDriverEx>
 8008184:	4603      	mov	r3, r0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	2b7f      	cmp	r3, #127	; 0x7f
 80081a0:	d802      	bhi.n	80081a8 <ff_convert+0x18>
		c = chr;
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	81fb      	strh	r3, [r7, #14]
 80081a6:	e025      	b.n	80081f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80081ae:	88fb      	ldrh	r3, [r7, #6]
 80081b0:	2bff      	cmp	r3, #255	; 0xff
 80081b2:	d805      	bhi.n	80081c0 <ff_convert+0x30>
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	3b80      	subs	r3, #128	; 0x80
 80081b8:	4a12      	ldr	r2, [pc, #72]	; (8008204 <ff_convert+0x74>)
 80081ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081be:	e000      	b.n	80081c2 <ff_convert+0x32>
 80081c0:	2300      	movs	r3, #0
 80081c2:	81fb      	strh	r3, [r7, #14]
 80081c4:	e016      	b.n	80081f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80081c6:	2300      	movs	r3, #0
 80081c8:	81fb      	strh	r3, [r7, #14]
 80081ca:	e009      	b.n	80081e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	4a0d      	ldr	r2, [pc, #52]	; (8008204 <ff_convert+0x74>)
 80081d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d006      	beq.n	80081e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80081da:	89fb      	ldrh	r3, [r7, #14]
 80081dc:	3301      	adds	r3, #1
 80081de:	81fb      	strh	r3, [r7, #14]
 80081e0:	89fb      	ldrh	r3, [r7, #14]
 80081e2:	2b7f      	cmp	r3, #127	; 0x7f
 80081e4:	d9f2      	bls.n	80081cc <ff_convert+0x3c>
 80081e6:	e000      	b.n	80081ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80081e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80081ea:	89fb      	ldrh	r3, [r7, #14]
 80081ec:	3380      	adds	r3, #128	; 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80081f4:	89fb      	ldrh	r3, [r7, #14]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	0800a198 	.word	0x0800a198

08008208 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008218:	d201      	bcs.n	800821e <ff_wtoupper+0x16>
 800821a:	4b3e      	ldr	r3, [pc, #248]	; (8008314 <ff_wtoupper+0x10c>)
 800821c:	e000      	b.n	8008220 <ff_wtoupper+0x18>
 800821e:	4b3e      	ldr	r3, [pc, #248]	; (8008318 <ff_wtoupper+0x110>)
 8008220:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	1c9a      	adds	r2, r3, #2
 8008226:	617a      	str	r2, [r7, #20]
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800822c:	8a7b      	ldrh	r3, [r7, #18]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d068      	beq.n	8008304 <ff_wtoupper+0xfc>
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	8a7b      	ldrh	r3, [r7, #18]
 8008236:	429a      	cmp	r2, r3
 8008238:	d364      	bcc.n	8008304 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	1c9a      	adds	r2, r3, #2
 800823e:	617a      	str	r2, [r7, #20]
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	823b      	strh	r3, [r7, #16]
 8008244:	8a3b      	ldrh	r3, [r7, #16]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	81fb      	strh	r3, [r7, #14]
 800824a:	8a3b      	ldrh	r3, [r7, #16]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008250:	88fa      	ldrh	r2, [r7, #6]
 8008252:	8a79      	ldrh	r1, [r7, #18]
 8008254:	8a3b      	ldrh	r3, [r7, #16]
 8008256:	440b      	add	r3, r1
 8008258:	429a      	cmp	r2, r3
 800825a:	da49      	bge.n	80082f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800825c:	89fb      	ldrh	r3, [r7, #14]
 800825e:	2b08      	cmp	r3, #8
 8008260:	d84f      	bhi.n	8008302 <ff_wtoupper+0xfa>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <ff_wtoupper+0x60>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	0800828d 	.word	0x0800828d
 800826c:	0800829f 	.word	0x0800829f
 8008270:	080082b5 	.word	0x080082b5
 8008274:	080082bd 	.word	0x080082bd
 8008278:	080082c5 	.word	0x080082c5
 800827c:	080082cd 	.word	0x080082cd
 8008280:	080082d5 	.word	0x080082d5
 8008284:	080082dd 	.word	0x080082dd
 8008288:	080082e5 	.word	0x080082e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800828c:	88fa      	ldrh	r2, [r7, #6]
 800828e:	8a7b      	ldrh	r3, [r7, #18]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4413      	add	r3, r2
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	80fb      	strh	r3, [r7, #6]
 800829c:	e027      	b.n	80082ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800829e:	88fa      	ldrh	r2, [r7, #6]
 80082a0:	8a7b      	ldrh	r3, [r7, #18]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	80fb      	strh	r3, [r7, #6]
 80082b2:	e01c      	b.n	80082ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80082b4:	88fb      	ldrh	r3, [r7, #6]
 80082b6:	3b10      	subs	r3, #16
 80082b8:	80fb      	strh	r3, [r7, #6]
 80082ba:	e018      	b.n	80082ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80082bc:	88fb      	ldrh	r3, [r7, #6]
 80082be:	3b20      	subs	r3, #32
 80082c0:	80fb      	strh	r3, [r7, #6]
 80082c2:	e014      	b.n	80082ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	3b30      	subs	r3, #48	; 0x30
 80082c8:	80fb      	strh	r3, [r7, #6]
 80082ca:	e010      	b.n	80082ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80082cc:	88fb      	ldrh	r3, [r7, #6]
 80082ce:	3b1a      	subs	r3, #26
 80082d0:	80fb      	strh	r3, [r7, #6]
 80082d2:	e00c      	b.n	80082ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	3308      	adds	r3, #8
 80082d8:	80fb      	strh	r3, [r7, #6]
 80082da:	e008      	b.n	80082ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	3b50      	subs	r3, #80	; 0x50
 80082e0:	80fb      	strh	r3, [r7, #6]
 80082e2:	e004      	b.n	80082ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80082ea:	80fb      	strh	r3, [r7, #6]
 80082ec:	bf00      	nop
			}
			break;
 80082ee:	e008      	b.n	8008302 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80082f0:	89fb      	ldrh	r3, [r7, #14]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d195      	bne.n	8008222 <ff_wtoupper+0x1a>
 80082f6:	8a3b      	ldrh	r3, [r7, #16]
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4413      	add	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008300:	e78f      	b.n	8008222 <ff_wtoupper+0x1a>
			break;
 8008302:	bf00      	nop
	}

	return chr;
 8008304:	88fb      	ldrh	r3, [r7, #6]
}
 8008306:	4618      	mov	r0, r3
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	0800a298 	.word	0x0800a298
 8008318:	0800a48c 	.word	0x0800a48c

0800831c <__NVIC_EnableIRQ>:
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800832a:	2b00      	cmp	r3, #0
 800832c:	db0b      	blt.n	8008346 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	f003 021f 	and.w	r2, r3, #31
 8008334:	4907      	ldr	r1, [pc, #28]	; (8008354 <__NVIC_EnableIRQ+0x38>)
 8008336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	2001      	movs	r0, #1
 800833e:	fa00 f202 	lsl.w	r2, r0, r2
 8008342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	e000e100 	.word	0xe000e100

08008358 <__NVIC_SetPriority>:
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	6039      	str	r1, [r7, #0]
 8008362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008368:	2b00      	cmp	r3, #0
 800836a:	db0a      	blt.n	8008382 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	490c      	ldr	r1, [pc, #48]	; (80083a4 <__NVIC_SetPriority+0x4c>)
 8008372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008376:	0112      	lsls	r2, r2, #4
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	440b      	add	r3, r1
 800837c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008380:	e00a      	b.n	8008398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	b2da      	uxtb	r2, r3
 8008386:	4908      	ldr	r1, [pc, #32]	; (80083a8 <__NVIC_SetPriority+0x50>)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	3b04      	subs	r3, #4
 8008390:	0112      	lsls	r2, r2, #4
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	440b      	add	r3, r1
 8008396:	761a      	strb	r2, [r3, #24]
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	e000e100 	.word	0xe000e100
 80083a8:	e000ed00 	.word	0xe000ed00

080083ac <adc_ADCVREG_STUP_delay>:
/*
 * @brief delay for ADC voltage regulator start-up time(20us)
 * A 80Mhz->CM=12.5ns->CM x 2000=25us>20us
 */
void adc_ADCVREG_STUP_delay(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	volatile uint32_t i;
	for (i=0;i<2000;i++) {}
 80083b2:	2300      	movs	r3, #0
 80083b4:	607b      	str	r3, [r7, #4]
 80083b6:	e002      	b.n	80083be <adc_ADCVREG_STUP_delay+0x12>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3301      	adds	r3, #1
 80083bc:	607b      	str	r3, [r7, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80083c4:	d3f8      	bcc.n	80083b8 <adc_ADCVREG_STUP_delay+0xc>
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <adc_MIC_config>:
/**
 * @Brief ADC MIC(with OPAMP output as input) configuration
 * PA3(A2)->ADC12_IN8 is the OPAMP output
 */
void adc_MIC_config(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
	//Enable ADC clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN);
 80083d8:	4b4f      	ldr	r3, [pc, #316]	; (8008518 <adc_MIC_config+0x144>)
 80083da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083dc:	4a4e      	ldr	r2, [pc, #312]	; (8008518 <adc_MIC_config+0x144>)
 80083de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083e2:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Select HCLK/1 as ADC clock source
	ADC1_COMMON->CCR &=~(ADC_CCR_CKMODE);
 80083e4:	4b4d      	ldr	r3, [pc, #308]	; (800851c <adc_MIC_config+0x148>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	4a4c      	ldr	r2, [pc, #304]	; (800851c <adc_MIC_config+0x148>)
 80083ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80083ee:	6093      	str	r3, [r2, #8]
	ADC1_COMMON->CCR |= (ADC_CCR_CKMODE_0);
 80083f0:	4b4a      	ldr	r3, [pc, #296]	; (800851c <adc_MIC_config+0x148>)
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	4a49      	ldr	r2, [pc, #292]	; (800851c <adc_MIC_config+0x148>)
 80083f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083fa:	6093      	str	r3, [r2, #8]
	//Exit the Deep-power-down mode
	ADC1->CR &=~ (ADC_CR_DEEPPWD);
 80083fc:	4b48      	ldr	r3, [pc, #288]	; (8008520 <adc_MIC_config+0x14c>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	4a47      	ldr	r2, [pc, #284]	; (8008520 <adc_MIC_config+0x14c>)
 8008402:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008406:	6093      	str	r3, [r2, #8]
	//Enable the ADC internal voltage regulator
	ADC1->CR |= (ADC_CR_ADVREGEN);
 8008408:	4b45      	ldr	r3, [pc, #276]	; (8008520 <adc_MIC_config+0x14c>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	4a44      	ldr	r2, [pc, #272]	; (8008520 <adc_MIC_config+0x14c>)
 800840e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008412:	6093      	str	r3, [r2, #8]
	//Wait for the startup time of the ADC voltage regulator
	adc_ADCVREG_STUP_delay();
 8008414:	f7ff ffca 	bl	80083ac <adc_ADCVREG_STUP_delay>
	////ADC Calibration
	//Single-Ended Input mode calibration
	ADC1->CR &=~ (ADC_CR_ADCALDIF);
 8008418:	4b41      	ldr	r3, [pc, #260]	; (8008520 <adc_MIC_config+0x14c>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	4a40      	ldr	r2, [pc, #256]	; (8008520 <adc_MIC_config+0x14c>)
 800841e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008422:	6093      	str	r3, [r2, #8]
	//Calibration start
	ADC1->CR |= (ADC_CR_ADCAL);
 8008424:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <adc_MIC_config+0x14c>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4a3d      	ldr	r2, [pc, #244]	; (8008520 <adc_MIC_config+0x14c>)
 800842a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800842e:	6093      	str	r3, [r2, #8]
	//Wait until calibration is stopped
	while (ADC1->CR & ADC_CR_ADCAL);
 8008430:	bf00      	nop
 8008432:	4b3b      	ldr	r3, [pc, #236]	; (8008520 <adc_MIC_config+0x14c>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	dbfb      	blt.n	8008432 <adc_MIC_config+0x5e>
	//Right Align Mode
	ADC1->CFGR &=~ (ADC_CFGR_ALIGN);
 800843a:	4b39      	ldr	r3, [pc, #228]	; (8008520 <adc_MIC_config+0x14c>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	4a38      	ldr	r2, [pc, #224]	; (8008520 <adc_MIC_config+0x14c>)
 8008440:	f023 0320 	bic.w	r3, r3, #32
 8008444:	60d3      	str	r3, [r2, #12]
	//Single Conversion Mode
	ADC1->CFGR &=~ (ADC_CFGR_CONT);
 8008446:	4b36      	ldr	r3, [pc, #216]	; (8008520 <adc_MIC_config+0x14c>)
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	4a35      	ldr	r2, [pc, #212]	; (8008520 <adc_MIC_config+0x14c>)
 800844c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008450:	60d3      	str	r3, [r2, #12]
	//Sample time to 24.5 ADC CLK Cycles
	//Tconv= (24.5+12.5) ADC CLK Cycles = 37 ADC clock cycles = 2.3125us
	//Max Sample Frequency = 432kHz
	ADC1->SMPR1 &=~ (ADC_SMPR1_SMP8);
 8008452:	4b33      	ldr	r3, [pc, #204]	; (8008520 <adc_MIC_config+0x14c>)
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	4a32      	ldr	r2, [pc, #200]	; (8008520 <adc_MIC_config+0x14c>)
 8008458:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800845c:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |= (0x3UL << ADC_SMPR1_SMP8_Pos);
 800845e:	4b30      	ldr	r3, [pc, #192]	; (8008520 <adc_MIC_config+0x14c>)
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	4a2f      	ldr	r2, [pc, #188]	; (8008520 <adc_MIC_config+0x14c>)
 8008464:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8008468:	6153      	str	r3, [r2, #20]
	//Single-channel mode
	ADC1->SQR1 &=~(ADC_SQR1_L);
 800846a:	4b2d      	ldr	r3, [pc, #180]	; (8008520 <adc_MIC_config+0x14c>)
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	4a2c      	ldr	r2, [pc, #176]	; (8008520 <adc_MIC_config+0x14c>)
 8008470:	f023 030f 	bic.w	r3, r3, #15
 8008474:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1  &=~ (ADC_SQR1_SQ1);
 8008476:	4b2a      	ldr	r3, [pc, #168]	; (8008520 <adc_MIC_config+0x14c>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	4a29      	ldr	r2, [pc, #164]	; (8008520 <adc_MIC_config+0x14c>)
 800847c:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8008480:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1  |= (0x8UL << (6U));
 8008482:	4b27      	ldr	r3, [pc, #156]	; (8008520 <adc_MIC_config+0x14c>)
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	4a26      	ldr	r2, [pc, #152]	; (8008520 <adc_MIC_config+0x14c>)
 8008488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800848c:	6313      	str	r3, [r2, #48]	; 0x30
	//TIM6 TRGO Trigger
	ADC1->CFGR &=~ (ADC_CFGR_EXTEN);
 800848e:	4b24      	ldr	r3, [pc, #144]	; (8008520 <adc_MIC_config+0x14c>)
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	4a23      	ldr	r2, [pc, #140]	; (8008520 <adc_MIC_config+0x14c>)
 8008494:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008498:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (ADC_CFGR_EXTEN_0);
 800849a:	4b21      	ldr	r3, [pc, #132]	; (8008520 <adc_MIC_config+0x14c>)
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	4a20      	ldr	r2, [pc, #128]	; (8008520 <adc_MIC_config+0x14c>)
 80084a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084a4:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR &=~ (ADC_CFGR_EXTSEL);
 80084a6:	4b1e      	ldr	r3, [pc, #120]	; (8008520 <adc_MIC_config+0x14c>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	4a1d      	ldr	r2, [pc, #116]	; (8008520 <adc_MIC_config+0x14c>)
 80084ac:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 80084b0:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (0xDUL << ADC_CFGR_EXTSEL_Pos);//Event 13->TIM6_TRGO selected
 80084b2:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <adc_MIC_config+0x14c>)
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	4a1a      	ldr	r2, [pc, #104]	; (8008520 <adc_MIC_config+0x14c>)
 80084b8:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 80084bc:	60d3      	str	r3, [r2, #12]
	//DMA Circular Mode
	ADC1->CFGR |= (ADC_CFGR_DMACFG);
 80084be:	4b18      	ldr	r3, [pc, #96]	; (8008520 <adc_MIC_config+0x14c>)
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	4a17      	ldr	r2, [pc, #92]	; (8008520 <adc_MIC_config+0x14c>)
 80084c4:	f043 0302 	orr.w	r3, r3, #2
 80084c8:	60d3      	str	r3, [r2, #12]
	//Enable DMA-ADC registers
	ADC1->CFGR |= (ADC_CFGR_DMAEN);
 80084ca:	4b15      	ldr	r3, [pc, #84]	; (8008520 <adc_MIC_config+0x14c>)
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	4a14      	ldr	r2, [pc, #80]	; (8008520 <adc_MIC_config+0x14c>)
 80084d0:	f043 0301 	orr.w	r3, r3, #1
 80084d4:	60d3      	str	r3, [r2, #12]
	//Clear the ADC ready flag(It is cleared by writing 1 to it.)
	ADC1->ISR |=(ADC_ISR_ADRDY);
 80084d6:	4b12      	ldr	r3, [pc, #72]	; (8008520 <adc_MIC_config+0x14c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a11      	ldr	r2, [pc, #68]	; (8008520 <adc_MIC_config+0x14c>)
 80084dc:	f043 0301 	orr.w	r3, r3, #1
 80084e0:	6013      	str	r3, [r2, #0]
	//Enable ADC
	ADC1->CR |=(ADC_CR_ADEN);
 80084e2:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <adc_MIC_config+0x14c>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	4a0e      	ldr	r2, [pc, #56]	; (8008520 <adc_MIC_config+0x14c>)
 80084e8:	f043 0301 	orr.w	r3, r3, #1
 80084ec:	6093      	str	r3, [r2, #8]
	//Wait until ADC is ready
	while (!(ADC1->CR & ADC_CR_ADEN));
 80084ee:	bf00      	nop
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <adc_MIC_config+0x14c>)
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d0f9      	beq.n	80084f0 <adc_MIC_config+0x11c>
	//Clear the ADC ready flag again
	ADC1->ISR |=(ADC_ISR_ADRDY);
 80084fc:	4b08      	ldr	r3, [pc, #32]	; (8008520 <adc_MIC_config+0x14c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a07      	ldr	r2, [pc, #28]	; (8008520 <adc_MIC_config+0x14c>)
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	6013      	str	r3, [r2, #0]
	//ADC begin
	ADC1->CR |=(ADC_CR_ADSTART);
 8008508:	4b05      	ldr	r3, [pc, #20]	; (8008520 <adc_MIC_config+0x14c>)
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	4a04      	ldr	r2, [pc, #16]	; (8008520 <adc_MIC_config+0x14c>)
 800850e:	f043 0304 	orr.w	r3, r3, #4
 8008512:	6093      	str	r3, [r2, #8]
}
 8008514:	bf00      	nop
 8008516:	bd80      	pop	{r7, pc}
 8008518:	40021000 	.word	0x40021000
 800851c:	50040300 	.word	0x50040300
 8008520:	50040000 	.word	0x50040000

08008524 <adc_MIC_DMA_config>:

/**
 * @Brief ADC MIC DMA configuration
 */
void adc_MIC_DMA_config(uint16_t * pADC_Buffer,uint16_t size)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	807b      	strh	r3, [r7, #2]
	//DMA1->Channel1-->ADC1
	//Enable DMA1 clock
	RCC->AHB1ENR |=(RCC_AHB1ENR_DMA1EN);
 8008530:	4b31      	ldr	r3, [pc, #196]	; (80085f8 <adc_MIC_DMA_config+0xd4>)
 8008532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008534:	4a30      	ldr	r2, [pc, #192]	; (80085f8 <adc_MIC_DMA_config+0xd4>)
 8008536:	f043 0301 	orr.w	r3, r3, #1
 800853a:	6493      	str	r3, [r2, #72]	; 0x48
	//Clear DMA1-CH1 status flags
	DMA1->IFCR |=(DMA_IFCR_CGIF1);
 800853c:	4b2f      	ldr	r3, [pc, #188]	; (80085fc <adc_MIC_DMA_config+0xd8>)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4a2e      	ldr	r2, [pc, #184]	; (80085fc <adc_MIC_DMA_config+0xd8>)
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	6053      	str	r3, [r2, #4]
	//Peripheral address (Source is ADC_DR)
	DMA1_Channel1->CPAR =(uint32_t)(&(ADC1->DR));
 8008548:	4b2d      	ldr	r3, [pc, #180]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 800854a:	4a2e      	ldr	r2, [pc, #184]	; (8008604 <adc_MIC_DMA_config+0xe0>)
 800854c:	609a      	str	r2, [r3, #8]
	//Memory address (Destination is uint16_t adc_samples[3])
	DMA1_Channel1->CMAR =(uint32_t)(pADC_Buffer);
 800854e:	4a2c      	ldr	r2, [pc, #176]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60d3      	str	r3, [r2, #12]
	//Set No. of transfers to 4096
	DMA1_Channel1->CNDTR=4096;
 8008554:	4b2a      	ldr	r3, [pc, #168]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 8008556:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800855a:	605a      	str	r2, [r3, #4]
	//Normal/Circular DMA operation
	DMA1_Channel1->CCR |= (DMA_CCR_CIRC);
 800855c:	4b28      	ldr	r3, [pc, #160]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a27      	ldr	r2, [pc, #156]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 8008562:	f043 0320 	orr.w	r3, r3, #32
 8008566:	6013      	str	r3, [r2, #0]
	//Enable memory increment
	DMA1_Channel1->CCR |= (DMA_CCR_MINC);
 8008568:	4b25      	ldr	r3, [pc, #148]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a24      	ldr	r2, [pc, #144]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 800856e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008572:	6013      	str	r3, [r2, #0]
	//Disable peripheral increment
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC);
 8008574:	4b22      	ldr	r3, [pc, #136]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a21      	ldr	r2, [pc, #132]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 800857a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857e:	6013      	str	r3, [r2, #0]
	//ADC data->12bits, therefore Peripheral->16bits
	DMA1_Channel1->CCR &= ~(DMA_CCR_PSIZE);
 8008580:	4b1f      	ldr	r3, [pc, #124]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1e      	ldr	r2, [pc, #120]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 8008586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800858a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_PSIZE_0);
 800858c:	4b1c      	ldr	r3, [pc, #112]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 8008592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008596:	6013      	str	r3, [r2, #0]
	//Memory 16 bits(src and dst have to match in data size)
	DMA1_Channel1->CCR &= ~(DMA_CCR_MSIZE);
 8008598:	4b19      	ldr	r3, [pc, #100]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a18      	ldr	r2, [pc, #96]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 800859e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80085a2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_MSIZE_0);
 80085a4:	4b16      	ldr	r3, [pc, #88]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a15      	ldr	r2, [pc, #84]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085ae:	6013      	str	r3, [r2, #0]
	//Direction is Peripheral to memory
	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);
 80085b0:	4b13      	ldr	r3, [pc, #76]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a12      	ldr	r2, [pc, #72]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085b6:	f023 0310 	bic.w	r3, r3, #16
 80085ba:	6013      	str	r3, [r2, #0]
	//Enable DMA
	DMA1_Channel1->CCR |= (DMA_CCR_EN);
 80085bc:	4b10      	ldr	r3, [pc, #64]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a0f      	ldr	r2, [pc, #60]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085c2:	f043 0301 	orr.w	r3, r3, #1
 80085c6:	6013      	str	r3, [r2, #0]
	//Enable Transfer complete interrupt - DMA
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE);
 80085c8:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a0c      	ldr	r2, [pc, #48]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085ce:	f043 0302 	orr.w	r3, r3, #2
 80085d2:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(DMA1_Channel1_IRQn,0);
 80085d4:	2100      	movs	r1, #0
 80085d6:	200b      	movs	r0, #11
 80085d8:	f7ff febe 	bl	8008358 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80085dc:	200b      	movs	r0, #11
 80085de:	f7ff fe9d 	bl	800831c <__NVIC_EnableIRQ>
	//Enable Half-Transfer complete interrupt - DMA
	DMA1_Channel1->CCR |= (DMA_CCR_HTIE);
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a06      	ldr	r2, [pc, #24]	; (8008600 <adc_MIC_DMA_config+0xdc>)
 80085e8:	f043 0304 	orr.w	r3, r3, #4
 80085ec:	6013      	str	r3, [r2, #0]


}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	40021000 	.word	0x40021000
 80085fc:	40020000 	.word	0x40020000
 8008600:	40020008 	.word	0x40020008
 8008604:	50040040 	.word	0x50040040

08008608 <__NVIC_EnableIRQ>:
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008616:	2b00      	cmp	r3, #0
 8008618:	db0b      	blt.n	8008632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	f003 021f 	and.w	r2, r3, #31
 8008620:	4907      	ldr	r1, [pc, #28]	; (8008640 <__NVIC_EnableIRQ+0x38>)
 8008622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	2001      	movs	r0, #1
 800862a:	fa00 f202 	lsl.w	r2, r0, r2
 800862e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	e000e100 	.word	0xe000e100

08008644 <__NVIC_SetPriority>:
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008654:	2b00      	cmp	r3, #0
 8008656:	db0a      	blt.n	800866e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	490c      	ldr	r1, [pc, #48]	; (8008690 <__NVIC_SetPriority+0x4c>)
 800865e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008662:	0112      	lsls	r2, r2, #4
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	440b      	add	r3, r1
 8008668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800866c:	e00a      	b.n	8008684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	b2da      	uxtb	r2, r3
 8008672:	4908      	ldr	r1, [pc, #32]	; (8008694 <__NVIC_SetPriority+0x50>)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	3b04      	subs	r3, #4
 800867c:	0112      	lsls	r2, r2, #4
 800867e:	b2d2      	uxtb	r2, r2
 8008680:	440b      	add	r3, r1
 8008682:	761a      	strb	r2, [r3, #24]
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	e000e100 	.word	0xe000e100
 8008694:	e000ed00 	.word	0xe000ed00

08008698 <exti_buttonConfig>:

/*
 * @brief Push Button EXTI configuration (PA12->D2)
 */
void exti_buttonConfig(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  //Enable GPIO port A clock
  RCC->AHB2ENR |=(RCC_AHB2ENR_GPIOAEN);
 800869c:	4b22      	ldr	r3, [pc, #136]	; (8008728 <exti_buttonConfig+0x90>)
 800869e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a0:	4a21      	ldr	r2, [pc, #132]	; (8008728 <exti_buttonConfig+0x90>)
 80086a2:	f043 0301 	orr.w	r3, r3, #1
 80086a6:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Enable mode Input with Internal Pull-Up
  GPIOA->MODER &= ~(GPIO_MODER_MODE12);
 80086a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80086b2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80086b6:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD12);
 80086b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80086c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80086c6:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR |= (GPIO_PUPDR_PUPD12_0);
 80086c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80086d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086d6:	60d3      	str	r3, [r2, #12]
  //System configuration controller clock enable
  RCC->APB2ENR |= (RCC_APB2ENR_SYSCFGEN);
 80086d8:	4b13      	ldr	r3, [pc, #76]	; (8008728 <exti_buttonConfig+0x90>)
 80086da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086dc:	4a12      	ldr	r2, [pc, #72]	; (8008728 <exti_buttonConfig+0x90>)
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	6613      	str	r3, [r2, #96]	; 0x60
  //PA12 maps EXTI12
  SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI12);
 80086e4:	4b11      	ldr	r3, [pc, #68]	; (800872c <exti_buttonConfig+0x94>)
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	4a10      	ldr	r2, [pc, #64]	; (800872c <exti_buttonConfig+0x94>)
 80086ea:	f023 0307 	bic.w	r3, r3, #7
 80086ee:	6153      	str	r3, [r2, #20]
  //Unblock EXTI0 interrupt
  EXTI->IMR1 |= (EXTI_IMR1_IM12);
 80086f0:	4b0f      	ldr	r3, [pc, #60]	; (8008730 <exti_buttonConfig+0x98>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a0e      	ldr	r2, [pc, #56]	; (8008730 <exti_buttonConfig+0x98>)
 80086f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086fa:	6013      	str	r3, [r2, #0]
  //Enable Rising Edge Only
  EXTI->RTSR1 |= (EXTI_RTSR1_RT12);
 80086fc:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <exti_buttonConfig+0x98>)
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	4a0b      	ldr	r2, [pc, #44]	; (8008730 <exti_buttonConfig+0x98>)
 8008702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008706:	6093      	str	r3, [r2, #8]
  EXTI->FTSR1 &= ~(EXTI_FTSR1_FT12);
 8008708:	4b09      	ldr	r3, [pc, #36]	; (8008730 <exti_buttonConfig+0x98>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	4a08      	ldr	r2, [pc, #32]	; (8008730 <exti_buttonConfig+0x98>)
 800870e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008712:	60d3      	str	r3, [r2, #12]
  //Minimum Priority Level
  NVIC_SetPriority(EXTI15_10_IRQn,15);
 8008714:	210f      	movs	r1, #15
 8008716:	2028      	movs	r0, #40	; 0x28
 8008718:	f7ff ff94 	bl	8008644 <__NVIC_SetPriority>
  //Enable interrupt
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800871c:	2028      	movs	r0, #40	; 0x28
 800871e:	f7ff ff73 	bl	8008608 <__NVIC_EnableIRQ>


}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40021000 	.word	0x40021000
 800872c:	40010000 	.word	0x40010000
 8008730:	40010400 	.word	0x40010400

08008734 <gpioPeriphClockControl>:
 */

#include <gpio.h>

// clock control api for GPIO
void gpioPeriphClockControl(GPIO_TypeDef *pGPIOx , uint8_t EnorDi) {
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d12b      	bne.n	800879e <gpioPeriphClockControl+0x6a>

		if (pGPIOx == GPIOA) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800874c:	d106      	bne.n	800875c <gpioPeriphClockControl+0x28>
			GPIOA_CLOCK_ENABLE();
 800874e:	4b2c      	ldr	r3, [pc, #176]	; (8008800 <gpioPeriphClockControl+0xcc>)
 8008750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008752:	4a2b      	ldr	r2, [pc, #172]	; (8008800 <gpioPeriphClockControl+0xcc>)
 8008754:	f043 0301 	orr.w	r3, r3, #1
 8008758:	64d3      	str	r3, [r2, #76]	; 0x4c
			GPIOC_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_CLOCK_DISABLE();
		}
	}
}
 800875a:	e04b      	b.n	80087f4 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOB) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a29      	ldr	r2, [pc, #164]	; (8008804 <gpioPeriphClockControl+0xd0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d106      	bne.n	8008772 <gpioPeriphClockControl+0x3e>
			GPIOB_CLOCK_ENABLE();
 8008764:	4b26      	ldr	r3, [pc, #152]	; (8008800 <gpioPeriphClockControl+0xcc>)
 8008766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008768:	4a25      	ldr	r2, [pc, #148]	; (8008800 <gpioPeriphClockControl+0xcc>)
 800876a:	f043 0302 	orr.w	r3, r3, #2
 800876e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8008770:	e040      	b.n	80087f4 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOC){
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a24      	ldr	r2, [pc, #144]	; (8008808 <gpioPeriphClockControl+0xd4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d106      	bne.n	8008788 <gpioPeriphClockControl+0x54>
			GPIOC_CLOCK_ENABLE();
 800877a:	4b21      	ldr	r3, [pc, #132]	; (8008800 <gpioPeriphClockControl+0xcc>)
 800877c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877e:	4a20      	ldr	r2, [pc, #128]	; (8008800 <gpioPeriphClockControl+0xcc>)
 8008780:	f043 0304 	orr.w	r3, r3, #4
 8008784:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8008786:	e035      	b.n	80087f4 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOH){
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a20      	ldr	r2, [pc, #128]	; (800880c <gpioPeriphClockControl+0xd8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d131      	bne.n	80087f4 <gpioPeriphClockControl+0xc0>
			GPIOH_CLOCK_ENABLE();
 8008790:	4b1b      	ldr	r3, [pc, #108]	; (8008800 <gpioPeriphClockControl+0xcc>)
 8008792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008794:	4a1a      	ldr	r2, [pc, #104]	; (8008800 <gpioPeriphClockControl+0xcc>)
 8008796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800879c:	e02a      	b.n	80087f4 <gpioPeriphClockControl+0xc0>
		if (pGPIOx == GPIOA) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80087a4:	d106      	bne.n	80087b4 <gpioPeriphClockControl+0x80>
			GPIOA_CLOCK_DISABLE();
 80087a6:	4b16      	ldr	r3, [pc, #88]	; (8008800 <gpioPeriphClockControl+0xcc>)
 80087a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087aa:	4a15      	ldr	r2, [pc, #84]	; (8008800 <gpioPeriphClockControl+0xcc>)
 80087ac:	f023 0301 	bic.w	r3, r3, #1
 80087b0:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80087b2:	e01f      	b.n	80087f4 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOB) {
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a13      	ldr	r2, [pc, #76]	; (8008804 <gpioPeriphClockControl+0xd0>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d106      	bne.n	80087ca <gpioPeriphClockControl+0x96>
			GPIOB_CLOCK_DISABLE();
 80087bc:	4b10      	ldr	r3, [pc, #64]	; (8008800 <gpioPeriphClockControl+0xcc>)
 80087be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c0:	4a0f      	ldr	r2, [pc, #60]	; (8008800 <gpioPeriphClockControl+0xcc>)
 80087c2:	f023 0302 	bic.w	r3, r3, #2
 80087c6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80087c8:	e014      	b.n	80087f4 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOC){
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a0e      	ldr	r2, [pc, #56]	; (8008808 <gpioPeriphClockControl+0xd4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d106      	bne.n	80087e0 <gpioPeriphClockControl+0xac>
			GPIOC_CLOCK_DISABLE();
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <gpioPeriphClockControl+0xcc>)
 80087d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087d6:	4a0a      	ldr	r2, [pc, #40]	; (8008800 <gpioPeriphClockControl+0xcc>)
 80087d8:	f023 0304 	bic.w	r3, r3, #4
 80087dc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80087de:	e009      	b.n	80087f4 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOH){
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <gpioPeriphClockControl+0xd8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d105      	bne.n	80087f4 <gpioPeriphClockControl+0xc0>
			GPIOH_CLOCK_DISABLE();
 80087e8:	4b05      	ldr	r3, [pc, #20]	; (8008800 <gpioPeriphClockControl+0xcc>)
 80087ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ec:	4a04      	ldr	r2, [pc, #16]	; (8008800 <gpioPeriphClockControl+0xcc>)
 80087ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	40021000 	.word	0x40021000
 8008804:	48000400 	.word	0x48000400
 8008808:	48000800 	.word	0x48000800
 800880c:	48001c00 	.word	0x48001c00

08008810 <gpio_Init>:

// GPIO Initialization
void gpio_Init(GPIO_Handle_t* pNewGPIOPin)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0 ;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]

	//enable the peripheral clock
	gpioPeriphClockControl(pNewGPIOPin->pGPIOx, ENABLE) ;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2101      	movs	r1, #1
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff ff86 	bl	8008734 <gpioPeriphClockControl>
	// configure the modes of a GPIO pin
	temp = (pNewGPIOPin->pinMode << (2 * pNewGPIOPin->pinNumber)) ;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	795b      	ldrb	r3, [r3, #5]
 800882c:	461a      	mov	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	791b      	ldrb	r3, [r3, #4]
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	fa02 f303 	lsl.w	r3, r2, r3
 8008838:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->MODER &= ~(0x3 << (2 * pNewGPIOPin->pinNumber) );
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	791b      	ldrb	r3, [r3, #4]
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	2103      	movs	r1, #3
 8008848:	fa01 f303 	lsl.w	r3, r1, r3
 800884c:	43db      	mvns	r3, r3
 800884e:	4619      	mov	r1, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	400a      	ands	r2, r1
 8008856:	601a      	str	r2, [r3, #0]
	pNewGPIOPin->pGPIOx->MODER |= temp ;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6819      	ldr	r1, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	430a      	orrs	r2, r1
 8008866:	601a      	str	r2, [r3, #0]

	temp = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]

	// configure the speed
	temp = (pNewGPIOPin->pinSpeed << (2 * pNewGPIOPin->pinNumber) ) ;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	799b      	ldrb	r3, [r3, #6]
 8008870:	461a      	mov	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	791b      	ldrb	r3, [r3, #4]
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	fa02 f303 	lsl.w	r3, r2, r3
 800887c:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pNewGPIOPin->pinNumber)) ;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	791b      	ldrb	r3, [r3, #4]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	2103      	movs	r1, #3
 800888c:	fa01 f303 	lsl.w	r3, r1, r3
 8008890:	43db      	mvns	r3, r3
 8008892:	4619      	mov	r1, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	400a      	ands	r2, r1
 800889a:	609a      	str	r2, [r3, #8]
	pNewGPIOPin->pGPIOx->OSPEEDR  |= temp ;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6899      	ldr	r1, [r3, #8]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	609a      	str	r2, [r3, #8]

	temp = 0 ;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]

	// configure the pull up/down control
	temp = (pNewGPIOPin->pinPUPDControl << (2 * pNewGPIOPin->pinNumber) ) ;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	79db      	ldrb	r3, [r3, #7]
 80088b4:	461a      	mov	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	791b      	ldrb	r3, [r3, #4]
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->PUPDR  &= ~(0x3 << (2 * pNewGPIOPin->pinNumber));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	791b      	ldrb	r3, [r3, #4]
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	2103      	movs	r1, #3
 80088d0:	fa01 f303 	lsl.w	r3, r1, r3
 80088d4:	43db      	mvns	r3, r3
 80088d6:	4619      	mov	r1, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	400a      	ands	r2, r1
 80088de:	60da      	str	r2, [r3, #12]
	pNewGPIOPin->pGPIOx->PUPDR  |= temp ;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68d9      	ldr	r1, [r3, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	60da      	str	r2, [r3, #12]

	temp = 0 ;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]

	// configure the output type
	temp = (pNewGPIOPin->pinOutputType << ( pNewGPIOPin->pinNumber) ) ;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7a1b      	ldrb	r3, [r3, #8]
 80088f8:	461a      	mov	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	791b      	ldrb	r3, [r3, #4]
 80088fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008902:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->OTYPER &= ~(0x1 << pNewGPIOPin->pinNumber) ;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	791b      	ldrb	r3, [r3, #4]
 800890e:	4619      	mov	r1, r3
 8008910:	2301      	movs	r3, #1
 8008912:	408b      	lsls	r3, r1
 8008914:	43db      	mvns	r3, r3
 8008916:	4619      	mov	r1, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	400a      	ands	r2, r1
 800891e:	605a      	str	r2, [r3, #4]
	pNewGPIOPin->pGPIOx->OTYPER |= temp ;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6859      	ldr	r1, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	430a      	orrs	r2, r1
 800892e:	605a      	str	r2, [r3, #4]

	temp = 0 ;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]

	// configure the alternate functionality
	if (pNewGPIOPin->pinMode == PIN_MODE_ALTFN)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	795b      	ldrb	r3, [r3, #5]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d131      	bne.n	80089a0 <gpio_Init+0x190>
	{
		// configure the alternate function registers
		uint8_t temp1;
		uint8_t temp2;
		temp1 = pNewGPIOPin->pinNumber  / 8 ;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	791b      	ldrb	r3, [r3, #4]
 8008940:	08db      	lsrs	r3, r3, #3
 8008942:	72fb      	strb	r3, [r7, #11]
		temp2 = pNewGPIOPin->pinNumber % 8 ;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	791b      	ldrb	r3, [r3, #4]
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	72bb      	strb	r3, [r7, #10]
		pNewGPIOPin->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)) ;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	7afa      	ldrb	r2, [r7, #11]
 8008954:	3208      	adds	r2, #8
 8008956:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800895a:	7abb      	ldrb	r3, [r7, #10]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	220f      	movs	r2, #15
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	43db      	mvns	r3, r3
 8008966:	4618      	mov	r0, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	7afa      	ldrb	r2, [r7, #11]
 800896e:	4001      	ands	r1, r0
 8008970:	3208      	adds	r2, #8
 8008972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pNewGPIOPin->pGPIOx->AFR[temp1] |= (pNewGPIOPin->pinAltFunMode << (4 * temp2)) ;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	7afa      	ldrb	r2, [r7, #11]
 800897c:	3208      	adds	r2, #8
 800897e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	7a5b      	ldrb	r3, [r3, #9]
 8008986:	461a      	mov	r2, r3
 8008988:	7abb      	ldrb	r3, [r7, #10]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	fa02 f303 	lsl.w	r3, r2, r3
 8008990:	4618      	mov	r0, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	7afa      	ldrb	r2, [r7, #11]
 8008998:	4301      	orrs	r1, r0
 800899a:	3208      	adds	r2, #8
 800899c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <gpio_LED_config>:

/*
 * Brief LEDs GPIO Configuration PB3(On-board Led 3(Green))
 */
void gpio_LED_config(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  //Enable GPIO port B clock
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80089ac:	4b14      	ldr	r3, [pc, #80]	; (8008a00 <gpio_LED_config+0x58>)
 80089ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b0:	4a13      	ldr	r2, [pc, #76]	; (8008a00 <gpio_LED_config+0x58>)
 80089b2:	f043 0302 	orr.w	r3, r3, #2
 80089b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Pin mode to output
  GPIOB->MODER &= ~(GPIO_MODER_MODE3);
 80089b8:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <gpio_LED_config+0x5c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a11      	ldr	r2, [pc, #68]	; (8008a04 <gpio_LED_config+0x5c>)
 80089be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089c2:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (GPIO_MODER_MODE3_0);
 80089c4:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <gpio_LED_config+0x5c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a0e      	ldr	r2, [pc, #56]	; (8008a04 <gpio_LED_config+0x5c>)
 80089ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ce:	6013      	str	r3, [r2, #0]
  //Seting output as PushPull
  GPIOB->OTYPER &= ~(GPIO_OTYPER_ODR_3);
 80089d0:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <gpio_LED_config+0x5c>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	4a0b      	ldr	r2, [pc, #44]	; (8008a04 <gpio_LED_config+0x5c>)
 80089d6:	f023 0308 	bic.w	r3, r3, #8
 80089da:	6053      	str	r3, [r2, #4]
  //Setting as High Speed Output
  GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR3);
 80089dc:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <gpio_LED_config+0x5c>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <gpio_LED_config+0x5c>)
 80089e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089e6:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR3_1);
 80089e8:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <gpio_LED_config+0x5c>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	4a05      	ldr	r2, [pc, #20]	; (8008a04 <gpio_LED_config+0x5c>)
 80089ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f2:	6093      	str	r3, [r2, #8]
}
 80089f4:	bf00      	nop
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	40021000 	.word	0x40021000
 8008a04:	48000400 	.word	0x48000400

08008a08 <gpio_LED_writeGreen>:
/*
 * Brief Write/Toggle functions
 */

void gpio_LED_writeGreen(bool state)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	71fb      	strb	r3, [r7, #7]
    if(state)
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d006      	beq.n	8008a26 <gpio_LED_writeGreen+0x1e>
    {
      GPIOB->ODR |= (GPIO_ODR_OD3);
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <gpio_LED_writeGreen+0x38>)
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	4a08      	ldr	r2, [pc, #32]	; (8008a40 <gpio_LED_writeGreen+0x38>)
 8008a1e:	f043 0308 	orr.w	r3, r3, #8
 8008a22:	6153      	str	r3, [r2, #20]
    }
    else
    {
      GPIOB->ODR &= ~(GPIO_ODR_OD3);
    }
}
 8008a24:	e005      	b.n	8008a32 <gpio_LED_writeGreen+0x2a>
      GPIOB->ODR &= ~(GPIO_ODR_OD3);
 8008a26:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <gpio_LED_writeGreen+0x38>)
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	4a05      	ldr	r2, [pc, #20]	; (8008a40 <gpio_LED_writeGreen+0x38>)
 8008a2c:	f023 0308 	bic.w	r3, r3, #8
 8008a30:	6153      	str	r3, [r2, #20]
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	48000400 	.word	0x48000400

08008a44 <gpio_LED_toggleGreen>:

void gpio_LED_toggleGreen(void)
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
    GPIOB->ODR ^= (GPIO_ODR_OD3);
 8008a48:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <gpio_LED_toggleGreen+0x1c>)
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	4a04      	ldr	r2, [pc, #16]	; (8008a60 <gpio_LED_toggleGreen+0x1c>)
 8008a4e:	f083 0308 	eor.w	r3, r3, #8
 8008a52:	6153      	str	r3, [r2, #20]
}
 8008a54:	bf00      	nop
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	48000400 	.word	0x48000400

08008a64 <opamp_config>:
#include <opamp.h>
/**
 * @Brief OPAMP configuration
 */
void opamp_config(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
	//Enable GPIO port A clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8008a68:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <opamp_config+0xc0>)
 8008a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a6c:	4a2d      	ldr	r2, [pc, #180]	; (8008b24 <opamp_config+0xc0>)
 8008a6e:	f043 0301 	orr.w	r3, r3, #1
 8008a72:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Pin mode as analog mode
	GPIOA->MODER |= (GPIO_MODER_MODE0);
 8008a74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008a7e:	f043 0303 	orr.w	r3, r3, #3
 8008a82:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE3);
 8008a84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a92:	6013      	str	r3, [r2, #0]
	//Enable OPAMP clock
	RCC->APB1ENR1 |= (RCC_APB1ENR1_OPAMPEN);
 8008a94:	4b23      	ldr	r3, [pc, #140]	; (8008b24 <opamp_config+0xc0>)
 8008a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a98:	4a22      	ldr	r2, [pc, #136]	; (8008b24 <opamp_config+0xc0>)
 8008a9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a9e:	6593      	str	r3, [r2, #88]	; 0x58
	//Setting OPAMP voltage Range (VDDA>2.4V ->1, else 0);
	OPAMP->CSR |=(OPAMP1_CSR_OPARANGE);
 8008aa0:	4b21      	ldr	r3, [pc, #132]	; (8008b28 <opamp_config+0xc4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a20      	ldr	r2, [pc, #128]	; (8008b28 <opamp_config+0xc4>)
 8008aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aaa:	6013      	str	r3, [r2, #0]
	//Setting OPAMP low power mode
	OPAMP->CSR |=(OPAMP1_CSR_OPALPM);
 8008aac:	4b1e      	ldr	r3, [pc, #120]	; (8008b28 <opamp_config+0xc4>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1d      	ldr	r2, [pc, #116]	; (8008b28 <opamp_config+0xc4>)
 8008ab2:	f043 0302 	orr.w	r3, r3, #2
 8008ab6:	6013      	str	r3, [r2, #0]
	//Enable Programmable Gain Amplifier mode
	OPAMP->CSR &=~(OPAMP1_CSR_OPAMODE);
 8008ab8:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <opamp_config+0xc4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1a      	ldr	r2, [pc, #104]	; (8008b28 <opamp_config+0xc4>)
 8008abe:	f023 030c 	bic.w	r3, r3, #12
 8008ac2:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_OPAMODE_1);
 8008ac4:	4b18      	ldr	r3, [pc, #96]	; (8008b28 <opamp_config+0xc4>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a17      	ldr	r2, [pc, #92]	; (8008b28 <opamp_config+0xc4>)
 8008aca:	f043 0308 	orr.w	r3, r3, #8
 8008ace:	6013      	str	r3, [r2, #0]
	//Setting OP Gain of 4
	OPAMP->CSR &=~(OPAMP1_CSR_PGAGAIN);
 8008ad0:	4b15      	ldr	r3, [pc, #84]	; (8008b28 <opamp_config+0xc4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a14      	ldr	r2, [pc, #80]	; (8008b28 <opamp_config+0xc4>)
 8008ad6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008ada:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_PGAGAIN_0);
 8008adc:	4b12      	ldr	r3, [pc, #72]	; (8008b28 <opamp_config+0xc4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a11      	ldr	r2, [pc, #68]	; (8008b28 <opamp_config+0xc4>)
 8008ae2:	f043 0310 	orr.w	r3, r3, #16
 8008ae6:	6013      	str	r3, [r2, #0]
	//Inverting input not externally connected
	OPAMP->CSR &=~(OPAMP1_CSR_VMSEL);
 8008ae8:	4b0f      	ldr	r3, [pc, #60]	; (8008b28 <opamp_config+0xc4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a0e      	ldr	r2, [pc, #56]	; (8008b28 <opamp_config+0xc4>)
 8008aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af2:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_VMSEL_1);
 8008af4:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <opamp_config+0xc4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a0b      	ldr	r2, [pc, #44]	; (8008b28 <opamp_config+0xc4>)
 8008afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008afe:	6013      	str	r3, [r2, #0]
	//GPIO (PA0) connected to Non-Inverting Input
	OPAMP->CSR &=~(OPAMP1_CSR_VPSEL);
 8008b00:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <opamp_config+0xc4>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a08      	ldr	r2, [pc, #32]	; (8008b28 <opamp_config+0xc4>)
 8008b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b0a:	6013      	str	r3, [r2, #0]
	//OPAMP Switch ON
	OPAMP->CSR |=(OPAMP1_CSR_OPAEN);
 8008b0c:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <opamp_config+0xc4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a05      	ldr	r2, [pc, #20]	; (8008b28 <opamp_config+0xc4>)
 8008b12:	f043 0301 	orr.w	r3, r3, #1
 8008b16:	6013      	str	r3, [r2, #0]

}
 8008b18:	bf00      	nop
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40021000 	.word	0x40021000
 8008b28:	40007800 	.word	0x40007800

08008b2c <spi_GPIO_config>:
 * @Brief SPI1 GPIO pins configuration
 * (PA5(A4)->SP1_SCK,PA6(A5)->SP1_MISO,PA7(A6)->SP1_MOSI)
 * (PA4(A3)->CS)
 */
void spi_GPIO_config(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
	//SPI AF GPIO pins configuration
	GPIO_Handle_t spiPins;
	spiPins.pGPIOx=GPIOA;
 8008b32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b36:	607b      	str	r3, [r7, #4]
	spiPins.pinMode=PIN_MODE_ALTFN;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	727b      	strb	r3, [r7, #9]
	spiPins.pinOutputType=PIN_OP_TYPE_PP;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	733b      	strb	r3, [r7, #12]
	spiPins.pinPUPDControl=PIN_NO_PUPD;
 8008b40:	2300      	movs	r3, #0
 8008b42:	72fb      	strb	r3, [r7, #11]
	spiPins.pinSpeed=PIN_SPEED_HIGH;
 8008b44:	2303      	movs	r3, #3
 8008b46:	72bb      	strb	r3, [r7, #10]
	spiPins.pinAltFunMode=AF5;
 8008b48:	2305      	movs	r3, #5
 8008b4a:	737b      	strb	r3, [r7, #13]
	spiPins.pinNumber=PIN_NO_7;//MOSI
 8008b4c:	2307      	movs	r3, #7
 8008b4e:	723b      	strb	r3, [r7, #8]
	gpio_Init(&spiPins);
 8008b50:	1d3b      	adds	r3, r7, #4
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff fe5c 	bl	8008810 <gpio_Init>
	spiPins.pinNumber=PIN_NO_6;//MISO
 8008b58:	2306      	movs	r3, #6
 8008b5a:	723b      	strb	r3, [r7, #8]
	spiPins.pinPUPDControl=PIN_PULL_UP;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	72fb      	strb	r3, [r7, #11]
	gpio_Init(&spiPins);
 8008b60:	1d3b      	adds	r3, r7, #4
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff fe54 	bl	8008810 <gpio_Init>
	spiPins.pinNumber=PIN_NO_5;//SCLK
 8008b68:	2305      	movs	r3, #5
 8008b6a:	723b      	strb	r3, [r7, #8]
	spiPins.pinPUPDControl=PIN_NO_PUPD;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	72fb      	strb	r3, [r7, #11]
	gpio_Init(&spiPins);
 8008b70:	1d3b      	adds	r3, r7, #4
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fe4c 	bl	8008810 <gpio_Init>
	spiPins.pinNumber=PIN_NO_4;//CS
 8008b78:	2304      	movs	r3, #4
 8008b7a:	723b      	strb	r3, [r7, #8]
	spiPins.pinMode=PIN_MODE_OUTPUT;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	727b      	strb	r3, [r7, #9]
	gpio_Init(&spiPins);
 8008b80:	1d3b      	adds	r3, r7, #4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fe44 	bl	8008810 <gpio_Init>
	//Default value of CS is HIGH
	GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8008b88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008b92:	f043 0310 	orr.w	r3, r3, #16
 8008b96:	6193      	str	r3, [r2, #24]
}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <spi_cs_sd_write>:

/**
 * @Brief SD Chip Select Set/Reset
 */
void spi_cs_sd_write(bool state)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	71fb      	strb	r3, [r7, #7]
	if (state)
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d008      	beq.n	8008bc2 <spi_cs_sd_write+0x22>
	{
		GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8008bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008bba:	f043 0310 	orr.w	r3, r3, #16
 8008bbe:	6193      	str	r3, [r2, #24]
	}
	else
	{
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
	}
}
 8008bc0:	e007      	b.n	8008bd2 <spi_cs_sd_write+0x32>
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
 8008bc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bd0:	6193      	str	r3, [r2, #24]
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
	...

08008be0 <tim_TIM6_MIC_config>:
/**
 * @Brief TIM6 as ADC MIC
 * Generate a 44.1kHz Sample Rate
 */
void tim_TIM6_MIC_config(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
	//We are working with a SYSTEM Source of 16MHz
	//Enable TIM6 clock
	RCC->APB1ENR1 |=(RCC_APB1ENR1_TIM6EN);
 8008be4:	4b13      	ldr	r3, [pc, #76]	; (8008c34 <tim_TIM6_MIC_config+0x54>)
 8008be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be8:	4a12      	ldr	r2, [pc, #72]	; (8008c34 <tim_TIM6_MIC_config+0x54>)
 8008bea:	f043 0310 	orr.w	r3, r3, #16
 8008bee:	6593      	str	r3, [r2, #88]	; 0x58
	//Periodic
	TIM6->CR1 &=~ (TIM_CR1_OPM);
 8008bf0:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a10      	ldr	r2, [pc, #64]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008bf6:	f023 0308 	bic.w	r3, r3, #8
 8008bfa:	6013      	str	r3, [r2, #0]
	//Mode-->TRGO
	TIM6->CR2 &=~ (TIM_CR2_MMS);
 8008bfc:	4b0e      	ldr	r3, [pc, #56]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	4a0d      	ldr	r2, [pc, #52]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c06:	6053      	str	r3, [r2, #4]
	TIM6->CR2 |= (TIM_CR2_MMS_1);
 8008c08:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008c0e:	f043 0320 	orr.w	r3, r3, #32
 8008c12:	6053      	str	r3, [r2, #4]
	//f=44.1kHz
	TIM6->PSC = 0;//Keep 16MHz of clock
 8008c14:	4b08      	ldr	r3, [pc, #32]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	629a      	str	r2, [r3, #40]	; 0x28
	//Period
	TIM6->ARR=363-1;//16M/363= 44.077kHz
 8008c1a:	4b07      	ldr	r3, [pc, #28]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008c1c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008c20:	62da      	str	r2, [r3, #44]	; 0x2c
	//Update register on event
	TIM6->EGR=1;
 8008c22:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <tim_TIM6_MIC_config+0x58>)
 8008c24:	2201      	movs	r2, #1
 8008c26:	615a      	str	r2, [r3, #20]
//	//Start timer
//	TIM6->CR1 |= (TIM_CR1_CEN);
}
 8008c28:	bf00      	nop
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	40021000 	.word	0x40021000
 8008c38:	40001000 	.word	0x40001000

08008c3c <__NVIC_SetPriorityGrouping>:
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c4c:	4b0c      	ldr	r3, [pc, #48]	; (8008c80 <__NVIC_SetPriorityGrouping+0x44>)
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c58:	4013      	ands	r3, r2
 8008c5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c6e:	4a04      	ldr	r2, [pc, #16]	; (8008c80 <__NVIC_SetPriorityGrouping+0x44>)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	60d3      	str	r3, [r2, #12]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	e000ed00 	.word	0xe000ed00

08008c84 <__NVIC_EnableIRQ>:
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	db0b      	blt.n	8008cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c96:	79fb      	ldrb	r3, [r7, #7]
 8008c98:	f003 021f 	and.w	r2, r3, #31
 8008c9c:	4907      	ldr	r1, [pc, #28]	; (8008cbc <__NVIC_EnableIRQ+0x38>)
 8008c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ca2:	095b      	lsrs	r3, r3, #5
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8008caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	e000e100 	.word	0xe000e100

08008cc0 <__NVIC_SetPriority>:
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db0a      	blt.n	8008cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	490c      	ldr	r1, [pc, #48]	; (8008d0c <__NVIC_SetPriority+0x4c>)
 8008cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cde:	0112      	lsls	r2, r2, #4
 8008ce0:	b2d2      	uxtb	r2, r2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ce8:	e00a      	b.n	8008d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	4908      	ldr	r1, [pc, #32]	; (8008d10 <__NVIC_SetPriority+0x50>)
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	3b04      	subs	r3, #4
 8008cf8:	0112      	lsls	r2, r2, #4
 8008cfa:	b2d2      	uxtb	r2, r2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	761a      	strb	r2, [r3, #24]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	e000e100 	.word	0xe000e100
 8008d10:	e000ed00 	.word	0xe000ed00

08008d14 <uart_UART2_GPIO_config>:
}
/*
 * @Brief UART2 GPIO Config(PA2(Tx);PA15(Rx))
 */
void uart_UART2_GPIO_config(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0
  // Enable PortA Clock
  RCC->AHB2ENR  |= ( RCC_AHB2ENR_GPIOAEN );
 8008d18:	4b2e      	ldr	r3, [pc, #184]	; (8008dd4 <uart_UART2_GPIO_config+0xc0>)
 8008d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1c:	4a2d      	ldr	r2, [pc, #180]	; (8008dd4 <uart_UART2_GPIO_config+0xc0>)
 8008d1e:	f043 0301 	orr.w	r3, r3, #1
 8008d22:	64d3      	str	r3, [r2, #76]	; 0x4c
  // Configure pins PA2, PA15 for USART2 .
  GPIOA->MODER    &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8008d24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008d32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008d36:	6013      	str	r3, [r2, #0]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->MODER    |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8008d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d46:	f043 0320 	orr.w	r3, r3, #32
 8008d4a:	6013      	str	r3, [r2, #0]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->OTYPER   &= ~( ( 0x1 << 2 ) |
 8008d4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d5a:	f023 0304 	bic.w	r3, r3, #4
 8008d5e:	6053      	str	r3, [r2, #4]
      ( 0x1 << 15 ) );
  GPIOA->OSPEEDR  &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8008d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008d6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008d72:	6093      	str	r3, [r2, #8]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->OSPEEDR  |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8008d74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d82:	f043 0320 	orr.w	r3, r3, #32
 8008d86:	6093      	str	r3, [r2, #8]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->AFR[ 0 ] &= ~( ( 0xF << ( 2 * 4 ) ) );
 8008d88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008d92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d96:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 0 ] |=  ( ( 0x7 << ( 2 * 4 ) ) );
 8008d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008da6:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 1 ] &= ~( ( 0xF << ( ( 15 - 8 ) * 4 ) ) );
 8008da8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008db6:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->AFR[ 1 ] |=  ( ( 0x3 << ( ( 15 - 8 ) * 4 ) ) );
 8008db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008dc2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8008dc6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008dc8:	bf00      	nop
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40021000 	.word	0x40021000

08008dd8 <uart_UART2_config>:
/*
 * @Brief UART2 Peripheral Config
 */
void uart_UART2_config(uint32_t SYSTEM_CLK)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  //// Enable floating-point unit.
  //SCB->CPACR    |=  ( 0xFUL << (20U) );
  // Enable UART2 Clock
  RCC->APB1ENR1 |= ( RCC_APB1ENR1_USART2EN );
 8008de0:	4b28      	ldr	r3, [pc, #160]	; (8008e84 <uart_UART2_config+0xac>)
 8008de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de4:	4a27      	ldr	r2, [pc, #156]	; (8008e84 <uart_UART2_config+0xac>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dea:	6593      	str	r3, [r2, #88]	; 0x58
  // Set word length to 8-bits
  USART2->CR1  &= ~(USART_CR1_M1);
 8008dec:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <uart_UART2_config+0xb0>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a25      	ldr	r2, [pc, #148]	; (8008e88 <uart_UART2_config+0xb0>)
 8008df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008df6:	6013      	str	r3, [r2, #0]
  // Set baud rate to 9600 Hz
  USART2->BRR = SYSTEM_CLK/9600;
 8008df8:	4a23      	ldr	r2, [pc, #140]	; (8008e88 <uart_UART2_config+0xb0>)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4923      	ldr	r1, [pc, #140]	; (8008e8c <uart_UART2_config+0xb4>)
 8008dfe:	fba1 1303 	umull	r1, r3, r1, r3
 8008e02:	0a9b      	lsrs	r3, r3, #10
 8008e04:	60d3      	str	r3, [r2, #12]
  // Parity control disabled
  USART2->CR1  &= ~(USART_CR1_PCE);
 8008e06:	4b20      	ldr	r3, [pc, #128]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1f      	ldr	r2, [pc, #124]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e10:	6013      	str	r3, [r2, #0]
  // Stop bits to 1
  USART2->CR2  &= ~(USART_CR2_STOP);
 8008e12:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	4a1c      	ldr	r2, [pc, #112]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008e1c:	6053      	str	r3, [r2, #4]
  // Disable HW flow control
  USART2->CR3  &= ~(USART_CR3_CTSE);
 8008e1e:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	4a19      	ldr	r2, [pc, #100]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e28:	6093      	str	r3, [r2, #8]
  USART2->CR3  &= ~(USART_CR3_RTSE);
 8008e2a:	4b17      	ldr	r3, [pc, #92]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	4a16      	ldr	r2, [pc, #88]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e34:	6093      	str	r3, [r2, #8]
  // Clear flags
  USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	4a13      	ldr	r2, [pc, #76]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e3c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008e40:	6053      	str	r3, [r2, #4]
  USART2->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN );
 8008e42:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	4a10      	ldr	r2, [pc, #64]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e48:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008e4c:	6093      	str	r3, [r2, #8]
  // Enable UART2 peripheral
  USART2->CR1 |= ( USART_CR1_RE | USART_CR1_TE | USART_CR1_UE );
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a0d      	ldr	r2, [pc, #52]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e54:	f043 030d 	orr.w	r3, r3, #13
 8008e58:	6013      	str	r3, [r2, #0]
  // Enable Rx ready to read interruption
  USART2->CR1 |= ( USART_CR1_RXNEIE );
 8008e5a:	4b0b      	ldr	r3, [pc, #44]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a0a      	ldr	r2, [pc, #40]	; (8008e88 <uart_UART2_config+0xb0>)
 8008e60:	f043 0320 	orr.w	r3, r3, #32
 8008e64:	6013      	str	r3, [r2, #0]
  //All priority bits assigned to the preempt priority group
  NVIC_SetPriorityGrouping(0U);
 8008e66:	2000      	movs	r0, #0
 8008e68:	f7ff fee8 	bl	8008c3c <__NVIC_SetPriorityGrouping>
  //Priority of the interrupt (NVIC)
  NVIC_SetPriority(USART2_IRQn,1);
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	2026      	movs	r0, #38	; 0x26
 8008e70:	f7ff ff26 	bl	8008cc0 <__NVIC_SetPriority>
  //Enable the interrupt
  NVIC_EnableIRQ(USART2_IRQn);
 8008e74:	2026      	movs	r0, #38	; 0x26
 8008e76:	f7ff ff05 	bl	8008c84 <__NVIC_EnableIRQ>

}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40021000 	.word	0x40021000
 8008e88:	40004400 	.word	0x40004400
 8008e8c:	1b4e81b5 	.word	0x1b4e81b5

08008e90 <uart_UART2_TX>:
/*
 * @Brief UART2 Transmit
 */
bool uart_UART2_TX(uint8_t *data,uint8_t len,uint32_t timeout)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	72fb      	strb	r3, [r7, #11]
  //Write to DR as TXE flag is HIGH (Tx buffer Empty)
  uint8_t dataIdx = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t startTick = HAL_GetTick();
 8008ea2:	f7f8 f8a1 	bl	8000fe8 <HAL_GetTick>
 8008ea6:	6138      	str	r0, [r7, #16]
  while(dataIdx<len)
 8008ea8:	e01a      	b.n	8008ee0 <uart_UART2_TX+0x50>
  {
    if(USART2->ISR & USART_ISR_TXE) //Tx buffer empty
 8008eaa:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <uart_UART2_TX+0x84>)
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <uart_UART2_TX+0x3c>
    {
      USART2->TDR = data[dataIdx];
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	4b15      	ldr	r3, [pc, #84]	; (8008f14 <uart_UART2_TX+0x84>)
 8008ec0:	b292      	uxth	r2, r2
 8008ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      dataIdx++;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
 8008eca:	e009      	b.n	8008ee0 <uart_UART2_TX+0x50>
    }
    else //Manage timeout
    {
      if((HAL_GetTick() - startTick)>= timeout) return false;
 8008ecc:	f7f8 f88c 	bl	8000fe8 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d801      	bhi.n	8008ee0 <uart_UART2_TX+0x50>
 8008edc:	2300      	movs	r3, #0
 8008ede:	e015      	b.n	8008f0c <uart_UART2_TX+0x7c>
  while(dataIdx<len)
 8008ee0:	7dfa      	ldrb	r2, [r7, #23]
 8008ee2:	7afb      	ldrb	r3, [r7, #11]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d3e0      	bcc.n	8008eaa <uart_UART2_TX+0x1a>
    }
  }
  //Wait for busy flag
  while((USART2->ISR & USART_ISR_TC))
 8008ee8:	e009      	b.n	8008efe <uart_UART2_TX+0x6e>
  {
    if((HAL_GetTick() - startTick)>= timeout) return false;
 8008eea:	f7f8 f87d 	bl	8000fe8 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d801      	bhi.n	8008efe <uart_UART2_TX+0x6e>
 8008efa:	2300      	movs	r3, #0
 8008efc:	e006      	b.n	8008f0c <uart_UART2_TX+0x7c>
  while((USART2->ISR & USART_ISR_TC))
 8008efe:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <uart_UART2_TX+0x84>)
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1ef      	bne.n	8008eea <uart_UART2_TX+0x5a>
  }
  return true;
 8008f0a:	2301      	movs	r3, #1

}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40004400 	.word	0x40004400

08008f18 <__errno>:
 8008f18:	4b01      	ldr	r3, [pc, #4]	; (8008f20 <__errno+0x8>)
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	20000024 	.word	0x20000024

08008f24 <__libc_init_array>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	4d0d      	ldr	r5, [pc, #52]	; (8008f5c <__libc_init_array+0x38>)
 8008f28:	4c0d      	ldr	r4, [pc, #52]	; (8008f60 <__libc_init_array+0x3c>)
 8008f2a:	1b64      	subs	r4, r4, r5
 8008f2c:	10a4      	asrs	r4, r4, #2
 8008f2e:	2600      	movs	r6, #0
 8008f30:	42a6      	cmp	r6, r4
 8008f32:	d109      	bne.n	8008f48 <__libc_init_array+0x24>
 8008f34:	4d0b      	ldr	r5, [pc, #44]	; (8008f64 <__libc_init_array+0x40>)
 8008f36:	4c0c      	ldr	r4, [pc, #48]	; (8008f68 <__libc_init_array+0x44>)
 8008f38:	f001 f824 	bl	8009f84 <_init>
 8008f3c:	1b64      	subs	r4, r4, r5
 8008f3e:	10a4      	asrs	r4, r4, #2
 8008f40:	2600      	movs	r6, #0
 8008f42:	42a6      	cmp	r6, r4
 8008f44:	d105      	bne.n	8008f52 <__libc_init_array+0x2e>
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4c:	4798      	blx	r3
 8008f4e:	3601      	adds	r6, #1
 8008f50:	e7ee      	b.n	8008f30 <__libc_init_array+0xc>
 8008f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f56:	4798      	blx	r3
 8008f58:	3601      	adds	r6, #1
 8008f5a:	e7f2      	b.n	8008f42 <__libc_init_array+0x1e>
 8008f5c:	0800a5e8 	.word	0x0800a5e8
 8008f60:	0800a5e8 	.word	0x0800a5e8
 8008f64:	0800a5e8 	.word	0x0800a5e8
 8008f68:	0800a5ec 	.word	0x0800a5ec

08008f6c <memset>:
 8008f6c:	4402      	add	r2, r0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d100      	bne.n	8008f76 <memset+0xa>
 8008f74:	4770      	bx	lr
 8008f76:	f803 1b01 	strb.w	r1, [r3], #1
 8008f7a:	e7f9      	b.n	8008f70 <memset+0x4>

08008f7c <iprintf>:
 8008f7c:	b40f      	push	{r0, r1, r2, r3}
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <iprintf+0x2c>)
 8008f80:	b513      	push	{r0, r1, r4, lr}
 8008f82:	681c      	ldr	r4, [r3, #0]
 8008f84:	b124      	cbz	r4, 8008f90 <iprintf+0x14>
 8008f86:	69a3      	ldr	r3, [r4, #24]
 8008f88:	b913      	cbnz	r3, 8008f90 <iprintf+0x14>
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fa5e 	bl	800944c <__sinit>
 8008f90:	ab05      	add	r3, sp, #20
 8008f92:	9a04      	ldr	r2, [sp, #16]
 8008f94:	68a1      	ldr	r1, [r4, #8]
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 fc67 	bl	800986c <_vfiprintf_r>
 8008f9e:	b002      	add	sp, #8
 8008fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa4:	b004      	add	sp, #16
 8008fa6:	4770      	bx	lr
 8008fa8:	20000024 	.word	0x20000024

08008fac <_puts_r>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	460e      	mov	r6, r1
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	b118      	cbz	r0, 8008fbc <_puts_r+0x10>
 8008fb4:	6983      	ldr	r3, [r0, #24]
 8008fb6:	b90b      	cbnz	r3, 8008fbc <_puts_r+0x10>
 8008fb8:	f000 fa48 	bl	800944c <__sinit>
 8008fbc:	69ab      	ldr	r3, [r5, #24]
 8008fbe:	68ac      	ldr	r4, [r5, #8]
 8008fc0:	b913      	cbnz	r3, 8008fc8 <_puts_r+0x1c>
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 fa42 	bl	800944c <__sinit>
 8008fc8:	4b2c      	ldr	r3, [pc, #176]	; (800907c <_puts_r+0xd0>)
 8008fca:	429c      	cmp	r4, r3
 8008fcc:	d120      	bne.n	8009010 <_puts_r+0x64>
 8008fce:	686c      	ldr	r4, [r5, #4]
 8008fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fd2:	07db      	lsls	r3, r3, #31
 8008fd4:	d405      	bmi.n	8008fe2 <_puts_r+0x36>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	0598      	lsls	r0, r3, #22
 8008fda:	d402      	bmi.n	8008fe2 <_puts_r+0x36>
 8008fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fde:	f000 fad3 	bl	8009588 <__retarget_lock_acquire_recursive>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	0719      	lsls	r1, r3, #28
 8008fe6:	d51d      	bpl.n	8009024 <_puts_r+0x78>
 8008fe8:	6923      	ldr	r3, [r4, #16]
 8008fea:	b1db      	cbz	r3, 8009024 <_puts_r+0x78>
 8008fec:	3e01      	subs	r6, #1
 8008fee:	68a3      	ldr	r3, [r4, #8]
 8008ff0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	60a3      	str	r3, [r4, #8]
 8008ff8:	bb39      	cbnz	r1, 800904a <_puts_r+0x9e>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	da38      	bge.n	8009070 <_puts_r+0xc4>
 8008ffe:	4622      	mov	r2, r4
 8009000:	210a      	movs	r1, #10
 8009002:	4628      	mov	r0, r5
 8009004:	f000 f848 	bl	8009098 <__swbuf_r>
 8009008:	3001      	adds	r0, #1
 800900a:	d011      	beq.n	8009030 <_puts_r+0x84>
 800900c:	250a      	movs	r5, #10
 800900e:	e011      	b.n	8009034 <_puts_r+0x88>
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <_puts_r+0xd4>)
 8009012:	429c      	cmp	r4, r3
 8009014:	d101      	bne.n	800901a <_puts_r+0x6e>
 8009016:	68ac      	ldr	r4, [r5, #8]
 8009018:	e7da      	b.n	8008fd0 <_puts_r+0x24>
 800901a:	4b1a      	ldr	r3, [pc, #104]	; (8009084 <_puts_r+0xd8>)
 800901c:	429c      	cmp	r4, r3
 800901e:	bf08      	it	eq
 8009020:	68ec      	ldreq	r4, [r5, #12]
 8009022:	e7d5      	b.n	8008fd0 <_puts_r+0x24>
 8009024:	4621      	mov	r1, r4
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f888 	bl	800913c <__swsetup_r>
 800902c:	2800      	cmp	r0, #0
 800902e:	d0dd      	beq.n	8008fec <_puts_r+0x40>
 8009030:	f04f 35ff 	mov.w	r5, #4294967295
 8009034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009036:	07da      	lsls	r2, r3, #31
 8009038:	d405      	bmi.n	8009046 <_puts_r+0x9a>
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	059b      	lsls	r3, r3, #22
 800903e:	d402      	bmi.n	8009046 <_puts_r+0x9a>
 8009040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009042:	f000 faa2 	bl	800958a <__retarget_lock_release_recursive>
 8009046:	4628      	mov	r0, r5
 8009048:	bd70      	pop	{r4, r5, r6, pc}
 800904a:	2b00      	cmp	r3, #0
 800904c:	da04      	bge.n	8009058 <_puts_r+0xac>
 800904e:	69a2      	ldr	r2, [r4, #24]
 8009050:	429a      	cmp	r2, r3
 8009052:	dc06      	bgt.n	8009062 <_puts_r+0xb6>
 8009054:	290a      	cmp	r1, #10
 8009056:	d004      	beq.n	8009062 <_puts_r+0xb6>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	6022      	str	r2, [r4, #0]
 800905e:	7019      	strb	r1, [r3, #0]
 8009060:	e7c5      	b.n	8008fee <_puts_r+0x42>
 8009062:	4622      	mov	r2, r4
 8009064:	4628      	mov	r0, r5
 8009066:	f000 f817 	bl	8009098 <__swbuf_r>
 800906a:	3001      	adds	r0, #1
 800906c:	d1bf      	bne.n	8008fee <_puts_r+0x42>
 800906e:	e7df      	b.n	8009030 <_puts_r+0x84>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	250a      	movs	r5, #10
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	6022      	str	r2, [r4, #0]
 8009078:	701d      	strb	r5, [r3, #0]
 800907a:	e7db      	b.n	8009034 <_puts_r+0x88>
 800907c:	0800a56c 	.word	0x0800a56c
 8009080:	0800a58c 	.word	0x0800a58c
 8009084:	0800a54c 	.word	0x0800a54c

08009088 <puts>:
 8009088:	4b02      	ldr	r3, [pc, #8]	; (8009094 <puts+0xc>)
 800908a:	4601      	mov	r1, r0
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	f7ff bf8d 	b.w	8008fac <_puts_r>
 8009092:	bf00      	nop
 8009094:	20000024 	.word	0x20000024

08009098 <__swbuf_r>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	460e      	mov	r6, r1
 800909c:	4614      	mov	r4, r2
 800909e:	4605      	mov	r5, r0
 80090a0:	b118      	cbz	r0, 80090aa <__swbuf_r+0x12>
 80090a2:	6983      	ldr	r3, [r0, #24]
 80090a4:	b90b      	cbnz	r3, 80090aa <__swbuf_r+0x12>
 80090a6:	f000 f9d1 	bl	800944c <__sinit>
 80090aa:	4b21      	ldr	r3, [pc, #132]	; (8009130 <__swbuf_r+0x98>)
 80090ac:	429c      	cmp	r4, r3
 80090ae:	d12b      	bne.n	8009108 <__swbuf_r+0x70>
 80090b0:	686c      	ldr	r4, [r5, #4]
 80090b2:	69a3      	ldr	r3, [r4, #24]
 80090b4:	60a3      	str	r3, [r4, #8]
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	071a      	lsls	r2, r3, #28
 80090ba:	d52f      	bpl.n	800911c <__swbuf_r+0x84>
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	b36b      	cbz	r3, 800911c <__swbuf_r+0x84>
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	6820      	ldr	r0, [r4, #0]
 80090c4:	1ac0      	subs	r0, r0, r3
 80090c6:	6963      	ldr	r3, [r4, #20]
 80090c8:	b2f6      	uxtb	r6, r6
 80090ca:	4283      	cmp	r3, r0
 80090cc:	4637      	mov	r7, r6
 80090ce:	dc04      	bgt.n	80090da <__swbuf_r+0x42>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 f926 	bl	8009324 <_fflush_r>
 80090d8:	bb30      	cbnz	r0, 8009128 <__swbuf_r+0x90>
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	3b01      	subs	r3, #1
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	701e      	strb	r6, [r3, #0]
 80090e8:	6963      	ldr	r3, [r4, #20]
 80090ea:	3001      	adds	r0, #1
 80090ec:	4283      	cmp	r3, r0
 80090ee:	d004      	beq.n	80090fa <__swbuf_r+0x62>
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	07db      	lsls	r3, r3, #31
 80090f4:	d506      	bpl.n	8009104 <__swbuf_r+0x6c>
 80090f6:	2e0a      	cmp	r6, #10
 80090f8:	d104      	bne.n	8009104 <__swbuf_r+0x6c>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 f911 	bl	8009324 <_fflush_r>
 8009102:	b988      	cbnz	r0, 8009128 <__swbuf_r+0x90>
 8009104:	4638      	mov	r0, r7
 8009106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009108:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <__swbuf_r+0x9c>)
 800910a:	429c      	cmp	r4, r3
 800910c:	d101      	bne.n	8009112 <__swbuf_r+0x7a>
 800910e:	68ac      	ldr	r4, [r5, #8]
 8009110:	e7cf      	b.n	80090b2 <__swbuf_r+0x1a>
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <__swbuf_r+0xa0>)
 8009114:	429c      	cmp	r4, r3
 8009116:	bf08      	it	eq
 8009118:	68ec      	ldreq	r4, [r5, #12]
 800911a:	e7ca      	b.n	80090b2 <__swbuf_r+0x1a>
 800911c:	4621      	mov	r1, r4
 800911e:	4628      	mov	r0, r5
 8009120:	f000 f80c 	bl	800913c <__swsetup_r>
 8009124:	2800      	cmp	r0, #0
 8009126:	d0cb      	beq.n	80090c0 <__swbuf_r+0x28>
 8009128:	f04f 37ff 	mov.w	r7, #4294967295
 800912c:	e7ea      	b.n	8009104 <__swbuf_r+0x6c>
 800912e:	bf00      	nop
 8009130:	0800a56c 	.word	0x0800a56c
 8009134:	0800a58c 	.word	0x0800a58c
 8009138:	0800a54c 	.word	0x0800a54c

0800913c <__swsetup_r>:
 800913c:	4b32      	ldr	r3, [pc, #200]	; (8009208 <__swsetup_r+0xcc>)
 800913e:	b570      	push	{r4, r5, r6, lr}
 8009140:	681d      	ldr	r5, [r3, #0]
 8009142:	4606      	mov	r6, r0
 8009144:	460c      	mov	r4, r1
 8009146:	b125      	cbz	r5, 8009152 <__swsetup_r+0x16>
 8009148:	69ab      	ldr	r3, [r5, #24]
 800914a:	b913      	cbnz	r3, 8009152 <__swsetup_r+0x16>
 800914c:	4628      	mov	r0, r5
 800914e:	f000 f97d 	bl	800944c <__sinit>
 8009152:	4b2e      	ldr	r3, [pc, #184]	; (800920c <__swsetup_r+0xd0>)
 8009154:	429c      	cmp	r4, r3
 8009156:	d10f      	bne.n	8009178 <__swsetup_r+0x3c>
 8009158:	686c      	ldr	r4, [r5, #4]
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009160:	0719      	lsls	r1, r3, #28
 8009162:	d42c      	bmi.n	80091be <__swsetup_r+0x82>
 8009164:	06dd      	lsls	r5, r3, #27
 8009166:	d411      	bmi.n	800918c <__swsetup_r+0x50>
 8009168:	2309      	movs	r3, #9
 800916a:	6033      	str	r3, [r6, #0]
 800916c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	f04f 30ff 	mov.w	r0, #4294967295
 8009176:	e03e      	b.n	80091f6 <__swsetup_r+0xba>
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <__swsetup_r+0xd4>)
 800917a:	429c      	cmp	r4, r3
 800917c:	d101      	bne.n	8009182 <__swsetup_r+0x46>
 800917e:	68ac      	ldr	r4, [r5, #8]
 8009180:	e7eb      	b.n	800915a <__swsetup_r+0x1e>
 8009182:	4b24      	ldr	r3, [pc, #144]	; (8009214 <__swsetup_r+0xd8>)
 8009184:	429c      	cmp	r4, r3
 8009186:	bf08      	it	eq
 8009188:	68ec      	ldreq	r4, [r5, #12]
 800918a:	e7e6      	b.n	800915a <__swsetup_r+0x1e>
 800918c:	0758      	lsls	r0, r3, #29
 800918e:	d512      	bpl.n	80091b6 <__swsetup_r+0x7a>
 8009190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009192:	b141      	cbz	r1, 80091a6 <__swsetup_r+0x6a>
 8009194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009198:	4299      	cmp	r1, r3
 800919a:	d002      	beq.n	80091a2 <__swsetup_r+0x66>
 800919c:	4630      	mov	r0, r6
 800919e:	f000 fa5b 	bl	8009658 <_free_r>
 80091a2:	2300      	movs	r3, #0
 80091a4:	6363      	str	r3, [r4, #52]	; 0x34
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	2300      	movs	r3, #0
 80091b0:	6063      	str	r3, [r4, #4]
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f043 0308 	orr.w	r3, r3, #8
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	b94b      	cbnz	r3, 80091d6 <__swsetup_r+0x9a>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091cc:	d003      	beq.n	80091d6 <__swsetup_r+0x9a>
 80091ce:	4621      	mov	r1, r4
 80091d0:	4630      	mov	r0, r6
 80091d2:	f000 fa01 	bl	80095d8 <__smakebuf_r>
 80091d6:	89a0      	ldrh	r0, [r4, #12]
 80091d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091dc:	f010 0301 	ands.w	r3, r0, #1
 80091e0:	d00a      	beq.n	80091f8 <__swsetup_r+0xbc>
 80091e2:	2300      	movs	r3, #0
 80091e4:	60a3      	str	r3, [r4, #8]
 80091e6:	6963      	ldr	r3, [r4, #20]
 80091e8:	425b      	negs	r3, r3
 80091ea:	61a3      	str	r3, [r4, #24]
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	b943      	cbnz	r3, 8009202 <__swsetup_r+0xc6>
 80091f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091f4:	d1ba      	bne.n	800916c <__swsetup_r+0x30>
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
 80091f8:	0781      	lsls	r1, r0, #30
 80091fa:	bf58      	it	pl
 80091fc:	6963      	ldrpl	r3, [r4, #20]
 80091fe:	60a3      	str	r3, [r4, #8]
 8009200:	e7f4      	b.n	80091ec <__swsetup_r+0xb0>
 8009202:	2000      	movs	r0, #0
 8009204:	e7f7      	b.n	80091f6 <__swsetup_r+0xba>
 8009206:	bf00      	nop
 8009208:	20000024 	.word	0x20000024
 800920c:	0800a56c 	.word	0x0800a56c
 8009210:	0800a58c 	.word	0x0800a58c
 8009214:	0800a54c 	.word	0x0800a54c

08009218 <__sflush_r>:
 8009218:	898a      	ldrh	r2, [r1, #12]
 800921a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800921e:	4605      	mov	r5, r0
 8009220:	0710      	lsls	r0, r2, #28
 8009222:	460c      	mov	r4, r1
 8009224:	d458      	bmi.n	80092d8 <__sflush_r+0xc0>
 8009226:	684b      	ldr	r3, [r1, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	dc05      	bgt.n	8009238 <__sflush_r+0x20>
 800922c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	dc02      	bgt.n	8009238 <__sflush_r+0x20>
 8009232:	2000      	movs	r0, #0
 8009234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800923a:	2e00      	cmp	r6, #0
 800923c:	d0f9      	beq.n	8009232 <__sflush_r+0x1a>
 800923e:	2300      	movs	r3, #0
 8009240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009244:	682f      	ldr	r7, [r5, #0]
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	d032      	beq.n	80092b0 <__sflush_r+0x98>
 800924a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	075a      	lsls	r2, r3, #29
 8009250:	d505      	bpl.n	800925e <__sflush_r+0x46>
 8009252:	6863      	ldr	r3, [r4, #4]
 8009254:	1ac0      	subs	r0, r0, r3
 8009256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009258:	b10b      	cbz	r3, 800925e <__sflush_r+0x46>
 800925a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800925c:	1ac0      	subs	r0, r0, r3
 800925e:	2300      	movs	r3, #0
 8009260:	4602      	mov	r2, r0
 8009262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009264:	6a21      	ldr	r1, [r4, #32]
 8009266:	4628      	mov	r0, r5
 8009268:	47b0      	blx	r6
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	d106      	bne.n	800927e <__sflush_r+0x66>
 8009270:	6829      	ldr	r1, [r5, #0]
 8009272:	291d      	cmp	r1, #29
 8009274:	d82c      	bhi.n	80092d0 <__sflush_r+0xb8>
 8009276:	4a2a      	ldr	r2, [pc, #168]	; (8009320 <__sflush_r+0x108>)
 8009278:	40ca      	lsrs	r2, r1
 800927a:	07d6      	lsls	r6, r2, #31
 800927c:	d528      	bpl.n	80092d0 <__sflush_r+0xb8>
 800927e:	2200      	movs	r2, #0
 8009280:	6062      	str	r2, [r4, #4]
 8009282:	04d9      	lsls	r1, r3, #19
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	d504      	bpl.n	8009294 <__sflush_r+0x7c>
 800928a:	1c42      	adds	r2, r0, #1
 800928c:	d101      	bne.n	8009292 <__sflush_r+0x7a>
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	b903      	cbnz	r3, 8009294 <__sflush_r+0x7c>
 8009292:	6560      	str	r0, [r4, #84]	; 0x54
 8009294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009296:	602f      	str	r7, [r5, #0]
 8009298:	2900      	cmp	r1, #0
 800929a:	d0ca      	beq.n	8009232 <__sflush_r+0x1a>
 800929c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a0:	4299      	cmp	r1, r3
 80092a2:	d002      	beq.n	80092aa <__sflush_r+0x92>
 80092a4:	4628      	mov	r0, r5
 80092a6:	f000 f9d7 	bl	8009658 <_free_r>
 80092aa:	2000      	movs	r0, #0
 80092ac:	6360      	str	r0, [r4, #52]	; 0x34
 80092ae:	e7c1      	b.n	8009234 <__sflush_r+0x1c>
 80092b0:	6a21      	ldr	r1, [r4, #32]
 80092b2:	2301      	movs	r3, #1
 80092b4:	4628      	mov	r0, r5
 80092b6:	47b0      	blx	r6
 80092b8:	1c41      	adds	r1, r0, #1
 80092ba:	d1c7      	bne.n	800924c <__sflush_r+0x34>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0c4      	beq.n	800924c <__sflush_r+0x34>
 80092c2:	2b1d      	cmp	r3, #29
 80092c4:	d001      	beq.n	80092ca <__sflush_r+0xb2>
 80092c6:	2b16      	cmp	r3, #22
 80092c8:	d101      	bne.n	80092ce <__sflush_r+0xb6>
 80092ca:	602f      	str	r7, [r5, #0]
 80092cc:	e7b1      	b.n	8009232 <__sflush_r+0x1a>
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d4:	81a3      	strh	r3, [r4, #12]
 80092d6:	e7ad      	b.n	8009234 <__sflush_r+0x1c>
 80092d8:	690f      	ldr	r7, [r1, #16]
 80092da:	2f00      	cmp	r7, #0
 80092dc:	d0a9      	beq.n	8009232 <__sflush_r+0x1a>
 80092de:	0793      	lsls	r3, r2, #30
 80092e0:	680e      	ldr	r6, [r1, #0]
 80092e2:	bf08      	it	eq
 80092e4:	694b      	ldreq	r3, [r1, #20]
 80092e6:	600f      	str	r7, [r1, #0]
 80092e8:	bf18      	it	ne
 80092ea:	2300      	movne	r3, #0
 80092ec:	eba6 0807 	sub.w	r8, r6, r7
 80092f0:	608b      	str	r3, [r1, #8]
 80092f2:	f1b8 0f00 	cmp.w	r8, #0
 80092f6:	dd9c      	ble.n	8009232 <__sflush_r+0x1a>
 80092f8:	6a21      	ldr	r1, [r4, #32]
 80092fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092fc:	4643      	mov	r3, r8
 80092fe:	463a      	mov	r2, r7
 8009300:	4628      	mov	r0, r5
 8009302:	47b0      	blx	r6
 8009304:	2800      	cmp	r0, #0
 8009306:	dc06      	bgt.n	8009316 <__sflush_r+0xfe>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	e78e      	b.n	8009234 <__sflush_r+0x1c>
 8009316:	4407      	add	r7, r0
 8009318:	eba8 0800 	sub.w	r8, r8, r0
 800931c:	e7e9      	b.n	80092f2 <__sflush_r+0xda>
 800931e:	bf00      	nop
 8009320:	20400001 	.word	0x20400001

08009324 <_fflush_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	4605      	mov	r5, r0
 800932a:	460c      	mov	r4, r1
 800932c:	b913      	cbnz	r3, 8009334 <_fflush_r+0x10>
 800932e:	2500      	movs	r5, #0
 8009330:	4628      	mov	r0, r5
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	b118      	cbz	r0, 800933e <_fflush_r+0x1a>
 8009336:	6983      	ldr	r3, [r0, #24]
 8009338:	b90b      	cbnz	r3, 800933e <_fflush_r+0x1a>
 800933a:	f000 f887 	bl	800944c <__sinit>
 800933e:	4b14      	ldr	r3, [pc, #80]	; (8009390 <_fflush_r+0x6c>)
 8009340:	429c      	cmp	r4, r3
 8009342:	d11b      	bne.n	800937c <_fflush_r+0x58>
 8009344:	686c      	ldr	r4, [r5, #4]
 8009346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0ef      	beq.n	800932e <_fflush_r+0xa>
 800934e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009350:	07d0      	lsls	r0, r2, #31
 8009352:	d404      	bmi.n	800935e <_fflush_r+0x3a>
 8009354:	0599      	lsls	r1, r3, #22
 8009356:	d402      	bmi.n	800935e <_fflush_r+0x3a>
 8009358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800935a:	f000 f915 	bl	8009588 <__retarget_lock_acquire_recursive>
 800935e:	4628      	mov	r0, r5
 8009360:	4621      	mov	r1, r4
 8009362:	f7ff ff59 	bl	8009218 <__sflush_r>
 8009366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009368:	07da      	lsls	r2, r3, #31
 800936a:	4605      	mov	r5, r0
 800936c:	d4e0      	bmi.n	8009330 <_fflush_r+0xc>
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	059b      	lsls	r3, r3, #22
 8009372:	d4dd      	bmi.n	8009330 <_fflush_r+0xc>
 8009374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009376:	f000 f908 	bl	800958a <__retarget_lock_release_recursive>
 800937a:	e7d9      	b.n	8009330 <_fflush_r+0xc>
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <_fflush_r+0x70>)
 800937e:	429c      	cmp	r4, r3
 8009380:	d101      	bne.n	8009386 <_fflush_r+0x62>
 8009382:	68ac      	ldr	r4, [r5, #8]
 8009384:	e7df      	b.n	8009346 <_fflush_r+0x22>
 8009386:	4b04      	ldr	r3, [pc, #16]	; (8009398 <_fflush_r+0x74>)
 8009388:	429c      	cmp	r4, r3
 800938a:	bf08      	it	eq
 800938c:	68ec      	ldreq	r4, [r5, #12]
 800938e:	e7da      	b.n	8009346 <_fflush_r+0x22>
 8009390:	0800a56c 	.word	0x0800a56c
 8009394:	0800a58c 	.word	0x0800a58c
 8009398:	0800a54c 	.word	0x0800a54c

0800939c <std>:
 800939c:	2300      	movs	r3, #0
 800939e:	b510      	push	{r4, lr}
 80093a0:	4604      	mov	r4, r0
 80093a2:	e9c0 3300 	strd	r3, r3, [r0]
 80093a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093aa:	6083      	str	r3, [r0, #8]
 80093ac:	8181      	strh	r1, [r0, #12]
 80093ae:	6643      	str	r3, [r0, #100]	; 0x64
 80093b0:	81c2      	strh	r2, [r0, #14]
 80093b2:	6183      	str	r3, [r0, #24]
 80093b4:	4619      	mov	r1, r3
 80093b6:	2208      	movs	r2, #8
 80093b8:	305c      	adds	r0, #92	; 0x5c
 80093ba:	f7ff fdd7 	bl	8008f6c <memset>
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <std+0x38>)
 80093c0:	6263      	str	r3, [r4, #36]	; 0x24
 80093c2:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <std+0x3c>)
 80093c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80093c6:	4b05      	ldr	r3, [pc, #20]	; (80093dc <std+0x40>)
 80093c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <std+0x44>)
 80093cc:	6224      	str	r4, [r4, #32]
 80093ce:	6323      	str	r3, [r4, #48]	; 0x30
 80093d0:	bd10      	pop	{r4, pc}
 80093d2:	bf00      	nop
 80093d4:	08009e15 	.word	0x08009e15
 80093d8:	08009e37 	.word	0x08009e37
 80093dc:	08009e6f 	.word	0x08009e6f
 80093e0:	08009e93 	.word	0x08009e93

080093e4 <_cleanup_r>:
 80093e4:	4901      	ldr	r1, [pc, #4]	; (80093ec <_cleanup_r+0x8>)
 80093e6:	f000 b8af 	b.w	8009548 <_fwalk_reent>
 80093ea:	bf00      	nop
 80093ec:	08009325 	.word	0x08009325

080093f0 <__sfmoreglue>:
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	2268      	movs	r2, #104	; 0x68
 80093f4:	1e4d      	subs	r5, r1, #1
 80093f6:	4355      	muls	r5, r2
 80093f8:	460e      	mov	r6, r1
 80093fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093fe:	f000 f997 	bl	8009730 <_malloc_r>
 8009402:	4604      	mov	r4, r0
 8009404:	b140      	cbz	r0, 8009418 <__sfmoreglue+0x28>
 8009406:	2100      	movs	r1, #0
 8009408:	e9c0 1600 	strd	r1, r6, [r0]
 800940c:	300c      	adds	r0, #12
 800940e:	60a0      	str	r0, [r4, #8]
 8009410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009414:	f7ff fdaa 	bl	8008f6c <memset>
 8009418:	4620      	mov	r0, r4
 800941a:	bd70      	pop	{r4, r5, r6, pc}

0800941c <__sfp_lock_acquire>:
 800941c:	4801      	ldr	r0, [pc, #4]	; (8009424 <__sfp_lock_acquire+0x8>)
 800941e:	f000 b8b3 	b.w	8009588 <__retarget_lock_acquire_recursive>
 8009422:	bf00      	nop
 8009424:	20002a8d 	.word	0x20002a8d

08009428 <__sfp_lock_release>:
 8009428:	4801      	ldr	r0, [pc, #4]	; (8009430 <__sfp_lock_release+0x8>)
 800942a:	f000 b8ae 	b.w	800958a <__retarget_lock_release_recursive>
 800942e:	bf00      	nop
 8009430:	20002a8d 	.word	0x20002a8d

08009434 <__sinit_lock_acquire>:
 8009434:	4801      	ldr	r0, [pc, #4]	; (800943c <__sinit_lock_acquire+0x8>)
 8009436:	f000 b8a7 	b.w	8009588 <__retarget_lock_acquire_recursive>
 800943a:	bf00      	nop
 800943c:	20002a8e 	.word	0x20002a8e

08009440 <__sinit_lock_release>:
 8009440:	4801      	ldr	r0, [pc, #4]	; (8009448 <__sinit_lock_release+0x8>)
 8009442:	f000 b8a2 	b.w	800958a <__retarget_lock_release_recursive>
 8009446:	bf00      	nop
 8009448:	20002a8e 	.word	0x20002a8e

0800944c <__sinit>:
 800944c:	b510      	push	{r4, lr}
 800944e:	4604      	mov	r4, r0
 8009450:	f7ff fff0 	bl	8009434 <__sinit_lock_acquire>
 8009454:	69a3      	ldr	r3, [r4, #24]
 8009456:	b11b      	cbz	r3, 8009460 <__sinit+0x14>
 8009458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800945c:	f7ff bff0 	b.w	8009440 <__sinit_lock_release>
 8009460:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009464:	6523      	str	r3, [r4, #80]	; 0x50
 8009466:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <__sinit+0x68>)
 8009468:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <__sinit+0x6c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	62a2      	str	r2, [r4, #40]	; 0x28
 800946e:	42a3      	cmp	r3, r4
 8009470:	bf04      	itt	eq
 8009472:	2301      	moveq	r3, #1
 8009474:	61a3      	streq	r3, [r4, #24]
 8009476:	4620      	mov	r0, r4
 8009478:	f000 f820 	bl	80094bc <__sfp>
 800947c:	6060      	str	r0, [r4, #4]
 800947e:	4620      	mov	r0, r4
 8009480:	f000 f81c 	bl	80094bc <__sfp>
 8009484:	60a0      	str	r0, [r4, #8]
 8009486:	4620      	mov	r0, r4
 8009488:	f000 f818 	bl	80094bc <__sfp>
 800948c:	2200      	movs	r2, #0
 800948e:	60e0      	str	r0, [r4, #12]
 8009490:	2104      	movs	r1, #4
 8009492:	6860      	ldr	r0, [r4, #4]
 8009494:	f7ff ff82 	bl	800939c <std>
 8009498:	68a0      	ldr	r0, [r4, #8]
 800949a:	2201      	movs	r2, #1
 800949c:	2109      	movs	r1, #9
 800949e:	f7ff ff7d 	bl	800939c <std>
 80094a2:	68e0      	ldr	r0, [r4, #12]
 80094a4:	2202      	movs	r2, #2
 80094a6:	2112      	movs	r1, #18
 80094a8:	f7ff ff78 	bl	800939c <std>
 80094ac:	2301      	movs	r3, #1
 80094ae:	61a3      	str	r3, [r4, #24]
 80094b0:	e7d2      	b.n	8009458 <__sinit+0xc>
 80094b2:	bf00      	nop
 80094b4:	0800a548 	.word	0x0800a548
 80094b8:	080093e5 	.word	0x080093e5

080094bc <__sfp>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	4607      	mov	r7, r0
 80094c0:	f7ff ffac 	bl	800941c <__sfp_lock_acquire>
 80094c4:	4b1e      	ldr	r3, [pc, #120]	; (8009540 <__sfp+0x84>)
 80094c6:	681e      	ldr	r6, [r3, #0]
 80094c8:	69b3      	ldr	r3, [r6, #24]
 80094ca:	b913      	cbnz	r3, 80094d2 <__sfp+0x16>
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7ff ffbd 	bl	800944c <__sinit>
 80094d2:	3648      	adds	r6, #72	; 0x48
 80094d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094d8:	3b01      	subs	r3, #1
 80094da:	d503      	bpl.n	80094e4 <__sfp+0x28>
 80094dc:	6833      	ldr	r3, [r6, #0]
 80094de:	b30b      	cbz	r3, 8009524 <__sfp+0x68>
 80094e0:	6836      	ldr	r6, [r6, #0]
 80094e2:	e7f7      	b.n	80094d4 <__sfp+0x18>
 80094e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094e8:	b9d5      	cbnz	r5, 8009520 <__sfp+0x64>
 80094ea:	4b16      	ldr	r3, [pc, #88]	; (8009544 <__sfp+0x88>)
 80094ec:	60e3      	str	r3, [r4, #12]
 80094ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094f2:	6665      	str	r5, [r4, #100]	; 0x64
 80094f4:	f000 f847 	bl	8009586 <__retarget_lock_init_recursive>
 80094f8:	f7ff ff96 	bl	8009428 <__sfp_lock_release>
 80094fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009504:	6025      	str	r5, [r4, #0]
 8009506:	61a5      	str	r5, [r4, #24]
 8009508:	2208      	movs	r2, #8
 800950a:	4629      	mov	r1, r5
 800950c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009510:	f7ff fd2c 	bl	8008f6c <memset>
 8009514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800951c:	4620      	mov	r0, r4
 800951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009520:	3468      	adds	r4, #104	; 0x68
 8009522:	e7d9      	b.n	80094d8 <__sfp+0x1c>
 8009524:	2104      	movs	r1, #4
 8009526:	4638      	mov	r0, r7
 8009528:	f7ff ff62 	bl	80093f0 <__sfmoreglue>
 800952c:	4604      	mov	r4, r0
 800952e:	6030      	str	r0, [r6, #0]
 8009530:	2800      	cmp	r0, #0
 8009532:	d1d5      	bne.n	80094e0 <__sfp+0x24>
 8009534:	f7ff ff78 	bl	8009428 <__sfp_lock_release>
 8009538:	230c      	movs	r3, #12
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	e7ee      	b.n	800951c <__sfp+0x60>
 800953e:	bf00      	nop
 8009540:	0800a548 	.word	0x0800a548
 8009544:	ffff0001 	.word	0xffff0001

08009548 <_fwalk_reent>:
 8009548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800954c:	4606      	mov	r6, r0
 800954e:	4688      	mov	r8, r1
 8009550:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009554:	2700      	movs	r7, #0
 8009556:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800955a:	f1b9 0901 	subs.w	r9, r9, #1
 800955e:	d505      	bpl.n	800956c <_fwalk_reent+0x24>
 8009560:	6824      	ldr	r4, [r4, #0]
 8009562:	2c00      	cmp	r4, #0
 8009564:	d1f7      	bne.n	8009556 <_fwalk_reent+0xe>
 8009566:	4638      	mov	r0, r7
 8009568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800956c:	89ab      	ldrh	r3, [r5, #12]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d907      	bls.n	8009582 <_fwalk_reent+0x3a>
 8009572:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009576:	3301      	adds	r3, #1
 8009578:	d003      	beq.n	8009582 <_fwalk_reent+0x3a>
 800957a:	4629      	mov	r1, r5
 800957c:	4630      	mov	r0, r6
 800957e:	47c0      	blx	r8
 8009580:	4307      	orrs	r7, r0
 8009582:	3568      	adds	r5, #104	; 0x68
 8009584:	e7e9      	b.n	800955a <_fwalk_reent+0x12>

08009586 <__retarget_lock_init_recursive>:
 8009586:	4770      	bx	lr

08009588 <__retarget_lock_acquire_recursive>:
 8009588:	4770      	bx	lr

0800958a <__retarget_lock_release_recursive>:
 800958a:	4770      	bx	lr

0800958c <__swhatbuf_r>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	460e      	mov	r6, r1
 8009590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009594:	2900      	cmp	r1, #0
 8009596:	b096      	sub	sp, #88	; 0x58
 8009598:	4614      	mov	r4, r2
 800959a:	461d      	mov	r5, r3
 800959c:	da08      	bge.n	80095b0 <__swhatbuf_r+0x24>
 800959e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	602a      	str	r2, [r5, #0]
 80095a6:	061a      	lsls	r2, r3, #24
 80095a8:	d410      	bmi.n	80095cc <__swhatbuf_r+0x40>
 80095aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ae:	e00e      	b.n	80095ce <__swhatbuf_r+0x42>
 80095b0:	466a      	mov	r2, sp
 80095b2:	f000 fc95 	bl	8009ee0 <_fstat_r>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	dbf1      	blt.n	800959e <__swhatbuf_r+0x12>
 80095ba:	9a01      	ldr	r2, [sp, #4]
 80095bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095c4:	425a      	negs	r2, r3
 80095c6:	415a      	adcs	r2, r3
 80095c8:	602a      	str	r2, [r5, #0]
 80095ca:	e7ee      	b.n	80095aa <__swhatbuf_r+0x1e>
 80095cc:	2340      	movs	r3, #64	; 0x40
 80095ce:	2000      	movs	r0, #0
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	b016      	add	sp, #88	; 0x58
 80095d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095d8 <__smakebuf_r>:
 80095d8:	898b      	ldrh	r3, [r1, #12]
 80095da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095dc:	079d      	lsls	r5, r3, #30
 80095de:	4606      	mov	r6, r0
 80095e0:	460c      	mov	r4, r1
 80095e2:	d507      	bpl.n	80095f4 <__smakebuf_r+0x1c>
 80095e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	6123      	str	r3, [r4, #16]
 80095ec:	2301      	movs	r3, #1
 80095ee:	6163      	str	r3, [r4, #20]
 80095f0:	b002      	add	sp, #8
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	ab01      	add	r3, sp, #4
 80095f6:	466a      	mov	r2, sp
 80095f8:	f7ff ffc8 	bl	800958c <__swhatbuf_r>
 80095fc:	9900      	ldr	r1, [sp, #0]
 80095fe:	4605      	mov	r5, r0
 8009600:	4630      	mov	r0, r6
 8009602:	f000 f895 	bl	8009730 <_malloc_r>
 8009606:	b948      	cbnz	r0, 800961c <__smakebuf_r+0x44>
 8009608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960c:	059a      	lsls	r2, r3, #22
 800960e:	d4ef      	bmi.n	80095f0 <__smakebuf_r+0x18>
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	f043 0302 	orr.w	r3, r3, #2
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	e7e3      	b.n	80095e4 <__smakebuf_r+0xc>
 800961c:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <__smakebuf_r+0x7c>)
 800961e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	6020      	str	r0, [r4, #0]
 8009624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	9b00      	ldr	r3, [sp, #0]
 800962c:	6163      	str	r3, [r4, #20]
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	6120      	str	r0, [r4, #16]
 8009632:	b15b      	cbz	r3, 800964c <__smakebuf_r+0x74>
 8009634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009638:	4630      	mov	r0, r6
 800963a:	f000 fc63 	bl	8009f04 <_isatty_r>
 800963e:	b128      	cbz	r0, 800964c <__smakebuf_r+0x74>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	89a0      	ldrh	r0, [r4, #12]
 800964e:	4305      	orrs	r5, r0
 8009650:	81a5      	strh	r5, [r4, #12]
 8009652:	e7cd      	b.n	80095f0 <__smakebuf_r+0x18>
 8009654:	080093e5 	.word	0x080093e5

08009658 <_free_r>:
 8009658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800965a:	2900      	cmp	r1, #0
 800965c:	d044      	beq.n	80096e8 <_free_r+0x90>
 800965e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009662:	9001      	str	r0, [sp, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	f1a1 0404 	sub.w	r4, r1, #4
 800966a:	bfb8      	it	lt
 800966c:	18e4      	addlt	r4, r4, r3
 800966e:	f000 fc6b 	bl	8009f48 <__malloc_lock>
 8009672:	4a1e      	ldr	r2, [pc, #120]	; (80096ec <_free_r+0x94>)
 8009674:	9801      	ldr	r0, [sp, #4]
 8009676:	6813      	ldr	r3, [r2, #0]
 8009678:	b933      	cbnz	r3, 8009688 <_free_r+0x30>
 800967a:	6063      	str	r3, [r4, #4]
 800967c:	6014      	str	r4, [r2, #0]
 800967e:	b003      	add	sp, #12
 8009680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009684:	f000 bc66 	b.w	8009f54 <__malloc_unlock>
 8009688:	42a3      	cmp	r3, r4
 800968a:	d908      	bls.n	800969e <_free_r+0x46>
 800968c:	6825      	ldr	r5, [r4, #0]
 800968e:	1961      	adds	r1, r4, r5
 8009690:	428b      	cmp	r3, r1
 8009692:	bf01      	itttt	eq
 8009694:	6819      	ldreq	r1, [r3, #0]
 8009696:	685b      	ldreq	r3, [r3, #4]
 8009698:	1949      	addeq	r1, r1, r5
 800969a:	6021      	streq	r1, [r4, #0]
 800969c:	e7ed      	b.n	800967a <_free_r+0x22>
 800969e:	461a      	mov	r2, r3
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	b10b      	cbz	r3, 80096a8 <_free_r+0x50>
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	d9fa      	bls.n	800969e <_free_r+0x46>
 80096a8:	6811      	ldr	r1, [r2, #0]
 80096aa:	1855      	adds	r5, r2, r1
 80096ac:	42a5      	cmp	r5, r4
 80096ae:	d10b      	bne.n	80096c8 <_free_r+0x70>
 80096b0:	6824      	ldr	r4, [r4, #0]
 80096b2:	4421      	add	r1, r4
 80096b4:	1854      	adds	r4, r2, r1
 80096b6:	42a3      	cmp	r3, r4
 80096b8:	6011      	str	r1, [r2, #0]
 80096ba:	d1e0      	bne.n	800967e <_free_r+0x26>
 80096bc:	681c      	ldr	r4, [r3, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	6053      	str	r3, [r2, #4]
 80096c2:	4421      	add	r1, r4
 80096c4:	6011      	str	r1, [r2, #0]
 80096c6:	e7da      	b.n	800967e <_free_r+0x26>
 80096c8:	d902      	bls.n	80096d0 <_free_r+0x78>
 80096ca:	230c      	movs	r3, #12
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	e7d6      	b.n	800967e <_free_r+0x26>
 80096d0:	6825      	ldr	r5, [r4, #0]
 80096d2:	1961      	adds	r1, r4, r5
 80096d4:	428b      	cmp	r3, r1
 80096d6:	bf04      	itt	eq
 80096d8:	6819      	ldreq	r1, [r3, #0]
 80096da:	685b      	ldreq	r3, [r3, #4]
 80096dc:	6063      	str	r3, [r4, #4]
 80096de:	bf04      	itt	eq
 80096e0:	1949      	addeq	r1, r1, r5
 80096e2:	6021      	streq	r1, [r4, #0]
 80096e4:	6054      	str	r4, [r2, #4]
 80096e6:	e7ca      	b.n	800967e <_free_r+0x26>
 80096e8:	b003      	add	sp, #12
 80096ea:	bd30      	pop	{r4, r5, pc}
 80096ec:	20002a90 	.word	0x20002a90

080096f0 <sbrk_aligned>:
 80096f0:	b570      	push	{r4, r5, r6, lr}
 80096f2:	4e0e      	ldr	r6, [pc, #56]	; (800972c <sbrk_aligned+0x3c>)
 80096f4:	460c      	mov	r4, r1
 80096f6:	6831      	ldr	r1, [r6, #0]
 80096f8:	4605      	mov	r5, r0
 80096fa:	b911      	cbnz	r1, 8009702 <sbrk_aligned+0x12>
 80096fc:	f000 fb7a 	bl	8009df4 <_sbrk_r>
 8009700:	6030      	str	r0, [r6, #0]
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f000 fb75 	bl	8009df4 <_sbrk_r>
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	d00a      	beq.n	8009724 <sbrk_aligned+0x34>
 800970e:	1cc4      	adds	r4, r0, #3
 8009710:	f024 0403 	bic.w	r4, r4, #3
 8009714:	42a0      	cmp	r0, r4
 8009716:	d007      	beq.n	8009728 <sbrk_aligned+0x38>
 8009718:	1a21      	subs	r1, r4, r0
 800971a:	4628      	mov	r0, r5
 800971c:	f000 fb6a 	bl	8009df4 <_sbrk_r>
 8009720:	3001      	adds	r0, #1
 8009722:	d101      	bne.n	8009728 <sbrk_aligned+0x38>
 8009724:	f04f 34ff 	mov.w	r4, #4294967295
 8009728:	4620      	mov	r0, r4
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	20002a94 	.word	0x20002a94

08009730 <_malloc_r>:
 8009730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	1ccd      	adds	r5, r1, #3
 8009736:	f025 0503 	bic.w	r5, r5, #3
 800973a:	3508      	adds	r5, #8
 800973c:	2d0c      	cmp	r5, #12
 800973e:	bf38      	it	cc
 8009740:	250c      	movcc	r5, #12
 8009742:	2d00      	cmp	r5, #0
 8009744:	4607      	mov	r7, r0
 8009746:	db01      	blt.n	800974c <_malloc_r+0x1c>
 8009748:	42a9      	cmp	r1, r5
 800974a:	d905      	bls.n	8009758 <_malloc_r+0x28>
 800974c:	230c      	movs	r3, #12
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	2600      	movs	r6, #0
 8009752:	4630      	mov	r0, r6
 8009754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009758:	4e2e      	ldr	r6, [pc, #184]	; (8009814 <_malloc_r+0xe4>)
 800975a:	f000 fbf5 	bl	8009f48 <__malloc_lock>
 800975e:	6833      	ldr	r3, [r6, #0]
 8009760:	461c      	mov	r4, r3
 8009762:	bb34      	cbnz	r4, 80097b2 <_malloc_r+0x82>
 8009764:	4629      	mov	r1, r5
 8009766:	4638      	mov	r0, r7
 8009768:	f7ff ffc2 	bl	80096f0 <sbrk_aligned>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	4604      	mov	r4, r0
 8009770:	d14d      	bne.n	800980e <_malloc_r+0xde>
 8009772:	6834      	ldr	r4, [r6, #0]
 8009774:	4626      	mov	r6, r4
 8009776:	2e00      	cmp	r6, #0
 8009778:	d140      	bne.n	80097fc <_malloc_r+0xcc>
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	4631      	mov	r1, r6
 800977e:	4638      	mov	r0, r7
 8009780:	eb04 0803 	add.w	r8, r4, r3
 8009784:	f000 fb36 	bl	8009df4 <_sbrk_r>
 8009788:	4580      	cmp	r8, r0
 800978a:	d13a      	bne.n	8009802 <_malloc_r+0xd2>
 800978c:	6821      	ldr	r1, [r4, #0]
 800978e:	3503      	adds	r5, #3
 8009790:	1a6d      	subs	r5, r5, r1
 8009792:	f025 0503 	bic.w	r5, r5, #3
 8009796:	3508      	adds	r5, #8
 8009798:	2d0c      	cmp	r5, #12
 800979a:	bf38      	it	cc
 800979c:	250c      	movcc	r5, #12
 800979e:	4629      	mov	r1, r5
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7ff ffa5 	bl	80096f0 <sbrk_aligned>
 80097a6:	3001      	adds	r0, #1
 80097a8:	d02b      	beq.n	8009802 <_malloc_r+0xd2>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	442b      	add	r3, r5
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	e00e      	b.n	80097d0 <_malloc_r+0xa0>
 80097b2:	6822      	ldr	r2, [r4, #0]
 80097b4:	1b52      	subs	r2, r2, r5
 80097b6:	d41e      	bmi.n	80097f6 <_malloc_r+0xc6>
 80097b8:	2a0b      	cmp	r2, #11
 80097ba:	d916      	bls.n	80097ea <_malloc_r+0xba>
 80097bc:	1961      	adds	r1, r4, r5
 80097be:	42a3      	cmp	r3, r4
 80097c0:	6025      	str	r5, [r4, #0]
 80097c2:	bf18      	it	ne
 80097c4:	6059      	strne	r1, [r3, #4]
 80097c6:	6863      	ldr	r3, [r4, #4]
 80097c8:	bf08      	it	eq
 80097ca:	6031      	streq	r1, [r6, #0]
 80097cc:	5162      	str	r2, [r4, r5]
 80097ce:	604b      	str	r3, [r1, #4]
 80097d0:	4638      	mov	r0, r7
 80097d2:	f104 060b 	add.w	r6, r4, #11
 80097d6:	f000 fbbd 	bl	8009f54 <__malloc_unlock>
 80097da:	f026 0607 	bic.w	r6, r6, #7
 80097de:	1d23      	adds	r3, r4, #4
 80097e0:	1af2      	subs	r2, r6, r3
 80097e2:	d0b6      	beq.n	8009752 <_malloc_r+0x22>
 80097e4:	1b9b      	subs	r3, r3, r6
 80097e6:	50a3      	str	r3, [r4, r2]
 80097e8:	e7b3      	b.n	8009752 <_malloc_r+0x22>
 80097ea:	6862      	ldr	r2, [r4, #4]
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	bf0c      	ite	eq
 80097f0:	6032      	streq	r2, [r6, #0]
 80097f2:	605a      	strne	r2, [r3, #4]
 80097f4:	e7ec      	b.n	80097d0 <_malloc_r+0xa0>
 80097f6:	4623      	mov	r3, r4
 80097f8:	6864      	ldr	r4, [r4, #4]
 80097fa:	e7b2      	b.n	8009762 <_malloc_r+0x32>
 80097fc:	4634      	mov	r4, r6
 80097fe:	6876      	ldr	r6, [r6, #4]
 8009800:	e7b9      	b.n	8009776 <_malloc_r+0x46>
 8009802:	230c      	movs	r3, #12
 8009804:	603b      	str	r3, [r7, #0]
 8009806:	4638      	mov	r0, r7
 8009808:	f000 fba4 	bl	8009f54 <__malloc_unlock>
 800980c:	e7a1      	b.n	8009752 <_malloc_r+0x22>
 800980e:	6025      	str	r5, [r4, #0]
 8009810:	e7de      	b.n	80097d0 <_malloc_r+0xa0>
 8009812:	bf00      	nop
 8009814:	20002a90 	.word	0x20002a90

08009818 <__sfputc_r>:
 8009818:	6893      	ldr	r3, [r2, #8]
 800981a:	3b01      	subs	r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	b410      	push	{r4}
 8009820:	6093      	str	r3, [r2, #8]
 8009822:	da08      	bge.n	8009836 <__sfputc_r+0x1e>
 8009824:	6994      	ldr	r4, [r2, #24]
 8009826:	42a3      	cmp	r3, r4
 8009828:	db01      	blt.n	800982e <__sfputc_r+0x16>
 800982a:	290a      	cmp	r1, #10
 800982c:	d103      	bne.n	8009836 <__sfputc_r+0x1e>
 800982e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009832:	f7ff bc31 	b.w	8009098 <__swbuf_r>
 8009836:	6813      	ldr	r3, [r2, #0]
 8009838:	1c58      	adds	r0, r3, #1
 800983a:	6010      	str	r0, [r2, #0]
 800983c:	7019      	strb	r1, [r3, #0]
 800983e:	4608      	mov	r0, r1
 8009840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009844:	4770      	bx	lr

08009846 <__sfputs_r>:
 8009846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009848:	4606      	mov	r6, r0
 800984a:	460f      	mov	r7, r1
 800984c:	4614      	mov	r4, r2
 800984e:	18d5      	adds	r5, r2, r3
 8009850:	42ac      	cmp	r4, r5
 8009852:	d101      	bne.n	8009858 <__sfputs_r+0x12>
 8009854:	2000      	movs	r0, #0
 8009856:	e007      	b.n	8009868 <__sfputs_r+0x22>
 8009858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800985c:	463a      	mov	r2, r7
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ffda 	bl	8009818 <__sfputc_r>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d1f3      	bne.n	8009850 <__sfputs_r+0xa>
 8009868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800986c <_vfiprintf_r>:
 800986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	460d      	mov	r5, r1
 8009872:	b09d      	sub	sp, #116	; 0x74
 8009874:	4614      	mov	r4, r2
 8009876:	4698      	mov	r8, r3
 8009878:	4606      	mov	r6, r0
 800987a:	b118      	cbz	r0, 8009884 <_vfiprintf_r+0x18>
 800987c:	6983      	ldr	r3, [r0, #24]
 800987e:	b90b      	cbnz	r3, 8009884 <_vfiprintf_r+0x18>
 8009880:	f7ff fde4 	bl	800944c <__sinit>
 8009884:	4b89      	ldr	r3, [pc, #548]	; (8009aac <_vfiprintf_r+0x240>)
 8009886:	429d      	cmp	r5, r3
 8009888:	d11b      	bne.n	80098c2 <_vfiprintf_r+0x56>
 800988a:	6875      	ldr	r5, [r6, #4]
 800988c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800988e:	07d9      	lsls	r1, r3, #31
 8009890:	d405      	bmi.n	800989e <_vfiprintf_r+0x32>
 8009892:	89ab      	ldrh	r3, [r5, #12]
 8009894:	059a      	lsls	r2, r3, #22
 8009896:	d402      	bmi.n	800989e <_vfiprintf_r+0x32>
 8009898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800989a:	f7ff fe75 	bl	8009588 <__retarget_lock_acquire_recursive>
 800989e:	89ab      	ldrh	r3, [r5, #12]
 80098a0:	071b      	lsls	r3, r3, #28
 80098a2:	d501      	bpl.n	80098a8 <_vfiprintf_r+0x3c>
 80098a4:	692b      	ldr	r3, [r5, #16]
 80098a6:	b9eb      	cbnz	r3, 80098e4 <_vfiprintf_r+0x78>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff fc46 	bl	800913c <__swsetup_r>
 80098b0:	b1c0      	cbz	r0, 80098e4 <_vfiprintf_r+0x78>
 80098b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b4:	07dc      	lsls	r4, r3, #31
 80098b6:	d50e      	bpl.n	80098d6 <_vfiprintf_r+0x6a>
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	b01d      	add	sp, #116	; 0x74
 80098be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c2:	4b7b      	ldr	r3, [pc, #492]	; (8009ab0 <_vfiprintf_r+0x244>)
 80098c4:	429d      	cmp	r5, r3
 80098c6:	d101      	bne.n	80098cc <_vfiprintf_r+0x60>
 80098c8:	68b5      	ldr	r5, [r6, #8]
 80098ca:	e7df      	b.n	800988c <_vfiprintf_r+0x20>
 80098cc:	4b79      	ldr	r3, [pc, #484]	; (8009ab4 <_vfiprintf_r+0x248>)
 80098ce:	429d      	cmp	r5, r3
 80098d0:	bf08      	it	eq
 80098d2:	68f5      	ldreq	r5, [r6, #12]
 80098d4:	e7da      	b.n	800988c <_vfiprintf_r+0x20>
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	0598      	lsls	r0, r3, #22
 80098da:	d4ed      	bmi.n	80098b8 <_vfiprintf_r+0x4c>
 80098dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098de:	f7ff fe54 	bl	800958a <__retarget_lock_release_recursive>
 80098e2:	e7e9      	b.n	80098b8 <_vfiprintf_r+0x4c>
 80098e4:	2300      	movs	r3, #0
 80098e6:	9309      	str	r3, [sp, #36]	; 0x24
 80098e8:	2320      	movs	r3, #32
 80098ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80098f2:	2330      	movs	r3, #48	; 0x30
 80098f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ab8 <_vfiprintf_r+0x24c>
 80098f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098fc:	f04f 0901 	mov.w	r9, #1
 8009900:	4623      	mov	r3, r4
 8009902:	469a      	mov	sl, r3
 8009904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009908:	b10a      	cbz	r2, 800990e <_vfiprintf_r+0xa2>
 800990a:	2a25      	cmp	r2, #37	; 0x25
 800990c:	d1f9      	bne.n	8009902 <_vfiprintf_r+0x96>
 800990e:	ebba 0b04 	subs.w	fp, sl, r4
 8009912:	d00b      	beq.n	800992c <_vfiprintf_r+0xc0>
 8009914:	465b      	mov	r3, fp
 8009916:	4622      	mov	r2, r4
 8009918:	4629      	mov	r1, r5
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff ff93 	bl	8009846 <__sfputs_r>
 8009920:	3001      	adds	r0, #1
 8009922:	f000 80aa 	beq.w	8009a7a <_vfiprintf_r+0x20e>
 8009926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009928:	445a      	add	r2, fp
 800992a:	9209      	str	r2, [sp, #36]	; 0x24
 800992c:	f89a 3000 	ldrb.w	r3, [sl]
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 80a2 	beq.w	8009a7a <_vfiprintf_r+0x20e>
 8009936:	2300      	movs	r3, #0
 8009938:	f04f 32ff 	mov.w	r2, #4294967295
 800993c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009940:	f10a 0a01 	add.w	sl, sl, #1
 8009944:	9304      	str	r3, [sp, #16]
 8009946:	9307      	str	r3, [sp, #28]
 8009948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800994c:	931a      	str	r3, [sp, #104]	; 0x68
 800994e:	4654      	mov	r4, sl
 8009950:	2205      	movs	r2, #5
 8009952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009956:	4858      	ldr	r0, [pc, #352]	; (8009ab8 <_vfiprintf_r+0x24c>)
 8009958:	f7f6 fc3a 	bl	80001d0 <memchr>
 800995c:	9a04      	ldr	r2, [sp, #16]
 800995e:	b9d8      	cbnz	r0, 8009998 <_vfiprintf_r+0x12c>
 8009960:	06d1      	lsls	r1, r2, #27
 8009962:	bf44      	itt	mi
 8009964:	2320      	movmi	r3, #32
 8009966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800996a:	0713      	lsls	r3, r2, #28
 800996c:	bf44      	itt	mi
 800996e:	232b      	movmi	r3, #43	; 0x2b
 8009970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009974:	f89a 3000 	ldrb.w	r3, [sl]
 8009978:	2b2a      	cmp	r3, #42	; 0x2a
 800997a:	d015      	beq.n	80099a8 <_vfiprintf_r+0x13c>
 800997c:	9a07      	ldr	r2, [sp, #28]
 800997e:	4654      	mov	r4, sl
 8009980:	2000      	movs	r0, #0
 8009982:	f04f 0c0a 	mov.w	ip, #10
 8009986:	4621      	mov	r1, r4
 8009988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800998c:	3b30      	subs	r3, #48	; 0x30
 800998e:	2b09      	cmp	r3, #9
 8009990:	d94e      	bls.n	8009a30 <_vfiprintf_r+0x1c4>
 8009992:	b1b0      	cbz	r0, 80099c2 <_vfiprintf_r+0x156>
 8009994:	9207      	str	r2, [sp, #28]
 8009996:	e014      	b.n	80099c2 <_vfiprintf_r+0x156>
 8009998:	eba0 0308 	sub.w	r3, r0, r8
 800999c:	fa09 f303 	lsl.w	r3, r9, r3
 80099a0:	4313      	orrs	r3, r2
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	46a2      	mov	sl, r4
 80099a6:	e7d2      	b.n	800994e <_vfiprintf_r+0xe2>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	1d19      	adds	r1, r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	9103      	str	r1, [sp, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfbb      	ittet	lt
 80099b4:	425b      	neglt	r3, r3
 80099b6:	f042 0202 	orrlt.w	r2, r2, #2
 80099ba:	9307      	strge	r3, [sp, #28]
 80099bc:	9307      	strlt	r3, [sp, #28]
 80099be:	bfb8      	it	lt
 80099c0:	9204      	strlt	r2, [sp, #16]
 80099c2:	7823      	ldrb	r3, [r4, #0]
 80099c4:	2b2e      	cmp	r3, #46	; 0x2e
 80099c6:	d10c      	bne.n	80099e2 <_vfiprintf_r+0x176>
 80099c8:	7863      	ldrb	r3, [r4, #1]
 80099ca:	2b2a      	cmp	r3, #42	; 0x2a
 80099cc:	d135      	bne.n	8009a3a <_vfiprintf_r+0x1ce>
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	1d1a      	adds	r2, r3, #4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	9203      	str	r2, [sp, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	bfb8      	it	lt
 80099da:	f04f 33ff 	movlt.w	r3, #4294967295
 80099de:	3402      	adds	r4, #2
 80099e0:	9305      	str	r3, [sp, #20]
 80099e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ac8 <_vfiprintf_r+0x25c>
 80099e6:	7821      	ldrb	r1, [r4, #0]
 80099e8:	2203      	movs	r2, #3
 80099ea:	4650      	mov	r0, sl
 80099ec:	f7f6 fbf0 	bl	80001d0 <memchr>
 80099f0:	b140      	cbz	r0, 8009a04 <_vfiprintf_r+0x198>
 80099f2:	2340      	movs	r3, #64	; 0x40
 80099f4:	eba0 000a 	sub.w	r0, r0, sl
 80099f8:	fa03 f000 	lsl.w	r0, r3, r0
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	4303      	orrs	r3, r0
 8009a00:	3401      	adds	r4, #1
 8009a02:	9304      	str	r3, [sp, #16]
 8009a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a08:	482c      	ldr	r0, [pc, #176]	; (8009abc <_vfiprintf_r+0x250>)
 8009a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a0e:	2206      	movs	r2, #6
 8009a10:	f7f6 fbde 	bl	80001d0 <memchr>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d03f      	beq.n	8009a98 <_vfiprintf_r+0x22c>
 8009a18:	4b29      	ldr	r3, [pc, #164]	; (8009ac0 <_vfiprintf_r+0x254>)
 8009a1a:	bb1b      	cbnz	r3, 8009a64 <_vfiprintf_r+0x1f8>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	3307      	adds	r3, #7
 8009a20:	f023 0307 	bic.w	r3, r3, #7
 8009a24:	3308      	adds	r3, #8
 8009a26:	9303      	str	r3, [sp, #12]
 8009a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2a:	443b      	add	r3, r7
 8009a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2e:	e767      	b.n	8009900 <_vfiprintf_r+0x94>
 8009a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a34:	460c      	mov	r4, r1
 8009a36:	2001      	movs	r0, #1
 8009a38:	e7a5      	b.n	8009986 <_vfiprintf_r+0x11a>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	3401      	adds	r4, #1
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	4619      	mov	r1, r3
 8009a42:	f04f 0c0a 	mov.w	ip, #10
 8009a46:	4620      	mov	r0, r4
 8009a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a4c:	3a30      	subs	r2, #48	; 0x30
 8009a4e:	2a09      	cmp	r2, #9
 8009a50:	d903      	bls.n	8009a5a <_vfiprintf_r+0x1ee>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0c5      	beq.n	80099e2 <_vfiprintf_r+0x176>
 8009a56:	9105      	str	r1, [sp, #20]
 8009a58:	e7c3      	b.n	80099e2 <_vfiprintf_r+0x176>
 8009a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a5e:	4604      	mov	r4, r0
 8009a60:	2301      	movs	r3, #1
 8009a62:	e7f0      	b.n	8009a46 <_vfiprintf_r+0x1da>
 8009a64:	ab03      	add	r3, sp, #12
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4b16      	ldr	r3, [pc, #88]	; (8009ac4 <_vfiprintf_r+0x258>)
 8009a6c:	a904      	add	r1, sp, #16
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f3af 8000 	nop.w
 8009a74:	4607      	mov	r7, r0
 8009a76:	1c78      	adds	r0, r7, #1
 8009a78:	d1d6      	bne.n	8009a28 <_vfiprintf_r+0x1bc>
 8009a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7c:	07d9      	lsls	r1, r3, #31
 8009a7e:	d405      	bmi.n	8009a8c <_vfiprintf_r+0x220>
 8009a80:	89ab      	ldrh	r3, [r5, #12]
 8009a82:	059a      	lsls	r2, r3, #22
 8009a84:	d402      	bmi.n	8009a8c <_vfiprintf_r+0x220>
 8009a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a88:	f7ff fd7f 	bl	800958a <__retarget_lock_release_recursive>
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	065b      	lsls	r3, r3, #25
 8009a90:	f53f af12 	bmi.w	80098b8 <_vfiprintf_r+0x4c>
 8009a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a96:	e711      	b.n	80098bc <_vfiprintf_r+0x50>
 8009a98:	ab03      	add	r3, sp, #12
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	462a      	mov	r2, r5
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <_vfiprintf_r+0x258>)
 8009aa0:	a904      	add	r1, sp, #16
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f000 f880 	bl	8009ba8 <_printf_i>
 8009aa8:	e7e4      	b.n	8009a74 <_vfiprintf_r+0x208>
 8009aaa:	bf00      	nop
 8009aac:	0800a56c 	.word	0x0800a56c
 8009ab0:	0800a58c 	.word	0x0800a58c
 8009ab4:	0800a54c 	.word	0x0800a54c
 8009ab8:	0800a5ac 	.word	0x0800a5ac
 8009abc:	0800a5b6 	.word	0x0800a5b6
 8009ac0:	00000000 	.word	0x00000000
 8009ac4:	08009847 	.word	0x08009847
 8009ac8:	0800a5b2 	.word	0x0800a5b2

08009acc <_printf_common>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	4699      	mov	r9, r3
 8009ad4:	688a      	ldr	r2, [r1, #8]
 8009ad6:	690b      	ldr	r3, [r1, #16]
 8009ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009adc:	4293      	cmp	r3, r2
 8009ade:	bfb8      	it	lt
 8009ae0:	4613      	movlt	r3, r2
 8009ae2:	6033      	str	r3, [r6, #0]
 8009ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae8:	4607      	mov	r7, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	b10a      	cbz	r2, 8009af2 <_printf_common+0x26>
 8009aee:	3301      	adds	r3, #1
 8009af0:	6033      	str	r3, [r6, #0]
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	0699      	lsls	r1, r3, #26
 8009af6:	bf42      	ittt	mi
 8009af8:	6833      	ldrmi	r3, [r6, #0]
 8009afa:	3302      	addmi	r3, #2
 8009afc:	6033      	strmi	r3, [r6, #0]
 8009afe:	6825      	ldr	r5, [r4, #0]
 8009b00:	f015 0506 	ands.w	r5, r5, #6
 8009b04:	d106      	bne.n	8009b14 <_printf_common+0x48>
 8009b06:	f104 0a19 	add.w	sl, r4, #25
 8009b0a:	68e3      	ldr	r3, [r4, #12]
 8009b0c:	6832      	ldr	r2, [r6, #0]
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	42ab      	cmp	r3, r5
 8009b12:	dc26      	bgt.n	8009b62 <_printf_common+0x96>
 8009b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b18:	1e13      	subs	r3, r2, #0
 8009b1a:	6822      	ldr	r2, [r4, #0]
 8009b1c:	bf18      	it	ne
 8009b1e:	2301      	movne	r3, #1
 8009b20:	0692      	lsls	r2, r2, #26
 8009b22:	d42b      	bmi.n	8009b7c <_printf_common+0xb0>
 8009b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	47c0      	blx	r8
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d01e      	beq.n	8009b70 <_printf_common+0xa4>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	68e5      	ldr	r5, [r4, #12]
 8009b36:	6832      	ldr	r2, [r6, #0]
 8009b38:	f003 0306 	and.w	r3, r3, #6
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	bf08      	it	eq
 8009b40:	1aad      	subeq	r5, r5, r2
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	bf0c      	ite	eq
 8009b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b4c:	2500      	movne	r5, #0
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	bfc4      	itt	gt
 8009b52:	1a9b      	subgt	r3, r3, r2
 8009b54:	18ed      	addgt	r5, r5, r3
 8009b56:	2600      	movs	r6, #0
 8009b58:	341a      	adds	r4, #26
 8009b5a:	42b5      	cmp	r5, r6
 8009b5c:	d11a      	bne.n	8009b94 <_printf_common+0xc8>
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e008      	b.n	8009b74 <_printf_common+0xa8>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4652      	mov	r2, sl
 8009b66:	4649      	mov	r1, r9
 8009b68:	4638      	mov	r0, r7
 8009b6a:	47c0      	blx	r8
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d103      	bne.n	8009b78 <_printf_common+0xac>
 8009b70:	f04f 30ff 	mov.w	r0, #4294967295
 8009b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b78:	3501      	adds	r5, #1
 8009b7a:	e7c6      	b.n	8009b0a <_printf_common+0x3e>
 8009b7c:	18e1      	adds	r1, r4, r3
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	2030      	movs	r0, #48	; 0x30
 8009b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b86:	4422      	add	r2, r4
 8009b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b90:	3302      	adds	r3, #2
 8009b92:	e7c7      	b.n	8009b24 <_printf_common+0x58>
 8009b94:	2301      	movs	r3, #1
 8009b96:	4622      	mov	r2, r4
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c0      	blx	r8
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d0e6      	beq.n	8009b70 <_printf_common+0xa4>
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	e7d9      	b.n	8009b5a <_printf_common+0x8e>
	...

08009ba8 <_printf_i>:
 8009ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bac:	7e0f      	ldrb	r7, [r1, #24]
 8009bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bb0:	2f78      	cmp	r7, #120	; 0x78
 8009bb2:	4691      	mov	r9, r2
 8009bb4:	4680      	mov	r8, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	469a      	mov	sl, r3
 8009bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bbe:	d807      	bhi.n	8009bd0 <_printf_i+0x28>
 8009bc0:	2f62      	cmp	r7, #98	; 0x62
 8009bc2:	d80a      	bhi.n	8009bda <_printf_i+0x32>
 8009bc4:	2f00      	cmp	r7, #0
 8009bc6:	f000 80d8 	beq.w	8009d7a <_printf_i+0x1d2>
 8009bca:	2f58      	cmp	r7, #88	; 0x58
 8009bcc:	f000 80a3 	beq.w	8009d16 <_printf_i+0x16e>
 8009bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd8:	e03a      	b.n	8009c50 <_printf_i+0xa8>
 8009bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bde:	2b15      	cmp	r3, #21
 8009be0:	d8f6      	bhi.n	8009bd0 <_printf_i+0x28>
 8009be2:	a101      	add	r1, pc, #4	; (adr r1, 8009be8 <_printf_i+0x40>)
 8009be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009be8:	08009c41 	.word	0x08009c41
 8009bec:	08009c55 	.word	0x08009c55
 8009bf0:	08009bd1 	.word	0x08009bd1
 8009bf4:	08009bd1 	.word	0x08009bd1
 8009bf8:	08009bd1 	.word	0x08009bd1
 8009bfc:	08009bd1 	.word	0x08009bd1
 8009c00:	08009c55 	.word	0x08009c55
 8009c04:	08009bd1 	.word	0x08009bd1
 8009c08:	08009bd1 	.word	0x08009bd1
 8009c0c:	08009bd1 	.word	0x08009bd1
 8009c10:	08009bd1 	.word	0x08009bd1
 8009c14:	08009d61 	.word	0x08009d61
 8009c18:	08009c85 	.word	0x08009c85
 8009c1c:	08009d43 	.word	0x08009d43
 8009c20:	08009bd1 	.word	0x08009bd1
 8009c24:	08009bd1 	.word	0x08009bd1
 8009c28:	08009d83 	.word	0x08009d83
 8009c2c:	08009bd1 	.word	0x08009bd1
 8009c30:	08009c85 	.word	0x08009c85
 8009c34:	08009bd1 	.word	0x08009bd1
 8009c38:	08009bd1 	.word	0x08009bd1
 8009c3c:	08009d4b 	.word	0x08009d4b
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	1d1a      	adds	r2, r3, #4
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	602a      	str	r2, [r5, #0]
 8009c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c50:	2301      	movs	r3, #1
 8009c52:	e0a3      	b.n	8009d9c <_printf_i+0x1f4>
 8009c54:	6820      	ldr	r0, [r4, #0]
 8009c56:	6829      	ldr	r1, [r5, #0]
 8009c58:	0606      	lsls	r6, r0, #24
 8009c5a:	f101 0304 	add.w	r3, r1, #4
 8009c5e:	d50a      	bpl.n	8009c76 <_printf_i+0xce>
 8009c60:	680e      	ldr	r6, [r1, #0]
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	2e00      	cmp	r6, #0
 8009c66:	da03      	bge.n	8009c70 <_printf_i+0xc8>
 8009c68:	232d      	movs	r3, #45	; 0x2d
 8009c6a:	4276      	negs	r6, r6
 8009c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c70:	485e      	ldr	r0, [pc, #376]	; (8009dec <_printf_i+0x244>)
 8009c72:	230a      	movs	r3, #10
 8009c74:	e019      	b.n	8009caa <_printf_i+0x102>
 8009c76:	680e      	ldr	r6, [r1, #0]
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c7e:	bf18      	it	ne
 8009c80:	b236      	sxthne	r6, r6
 8009c82:	e7ef      	b.n	8009c64 <_printf_i+0xbc>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	6820      	ldr	r0, [r4, #0]
 8009c88:	1d19      	adds	r1, r3, #4
 8009c8a:	6029      	str	r1, [r5, #0]
 8009c8c:	0601      	lsls	r1, r0, #24
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0xec>
 8009c90:	681e      	ldr	r6, [r3, #0]
 8009c92:	e002      	b.n	8009c9a <_printf_i+0xf2>
 8009c94:	0646      	lsls	r6, r0, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0xe8>
 8009c98:	881e      	ldrh	r6, [r3, #0]
 8009c9a:	4854      	ldr	r0, [pc, #336]	; (8009dec <_printf_i+0x244>)
 8009c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c9e:	bf0c      	ite	eq
 8009ca0:	2308      	moveq	r3, #8
 8009ca2:	230a      	movne	r3, #10
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009caa:	6865      	ldr	r5, [r4, #4]
 8009cac:	60a5      	str	r5, [r4, #8]
 8009cae:	2d00      	cmp	r5, #0
 8009cb0:	bfa2      	ittt	ge
 8009cb2:	6821      	ldrge	r1, [r4, #0]
 8009cb4:	f021 0104 	bicge.w	r1, r1, #4
 8009cb8:	6021      	strge	r1, [r4, #0]
 8009cba:	b90e      	cbnz	r6, 8009cc0 <_printf_i+0x118>
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	d04d      	beq.n	8009d5c <_printf_i+0x1b4>
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cc6:	fb03 6711 	mls	r7, r3, r1, r6
 8009cca:	5dc7      	ldrb	r7, [r0, r7]
 8009ccc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cd0:	4637      	mov	r7, r6
 8009cd2:	42bb      	cmp	r3, r7
 8009cd4:	460e      	mov	r6, r1
 8009cd6:	d9f4      	bls.n	8009cc2 <_printf_i+0x11a>
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d10b      	bne.n	8009cf4 <_printf_i+0x14c>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	07de      	lsls	r6, r3, #31
 8009ce0:	d508      	bpl.n	8009cf4 <_printf_i+0x14c>
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	6861      	ldr	r1, [r4, #4]
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	bfde      	ittt	le
 8009cea:	2330      	movle	r3, #48	; 0x30
 8009cec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cf4:	1b52      	subs	r2, r2, r5
 8009cf6:	6122      	str	r2, [r4, #16]
 8009cf8:	f8cd a000 	str.w	sl, [sp]
 8009cfc:	464b      	mov	r3, r9
 8009cfe:	aa03      	add	r2, sp, #12
 8009d00:	4621      	mov	r1, r4
 8009d02:	4640      	mov	r0, r8
 8009d04:	f7ff fee2 	bl	8009acc <_printf_common>
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d14c      	bne.n	8009da6 <_printf_i+0x1fe>
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	b004      	add	sp, #16
 8009d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d16:	4835      	ldr	r0, [pc, #212]	; (8009dec <_printf_i+0x244>)
 8009d18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d1c:	6829      	ldr	r1, [r5, #0]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d24:	6029      	str	r1, [r5, #0]
 8009d26:	061d      	lsls	r5, r3, #24
 8009d28:	d514      	bpl.n	8009d54 <_printf_i+0x1ac>
 8009d2a:	07df      	lsls	r7, r3, #31
 8009d2c:	bf44      	itt	mi
 8009d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d32:	6023      	strmi	r3, [r4, #0]
 8009d34:	b91e      	cbnz	r6, 8009d3e <_printf_i+0x196>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	f023 0320 	bic.w	r3, r3, #32
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	2310      	movs	r3, #16
 8009d40:	e7b0      	b.n	8009ca4 <_printf_i+0xfc>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	f043 0320 	orr.w	r3, r3, #32
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	2378      	movs	r3, #120	; 0x78
 8009d4c:	4828      	ldr	r0, [pc, #160]	; (8009df0 <_printf_i+0x248>)
 8009d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d52:	e7e3      	b.n	8009d1c <_printf_i+0x174>
 8009d54:	0659      	lsls	r1, r3, #25
 8009d56:	bf48      	it	mi
 8009d58:	b2b6      	uxthmi	r6, r6
 8009d5a:	e7e6      	b.n	8009d2a <_printf_i+0x182>
 8009d5c:	4615      	mov	r5, r2
 8009d5e:	e7bb      	b.n	8009cd8 <_printf_i+0x130>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	6826      	ldr	r6, [r4, #0]
 8009d64:	6961      	ldr	r1, [r4, #20]
 8009d66:	1d18      	adds	r0, r3, #4
 8009d68:	6028      	str	r0, [r5, #0]
 8009d6a:	0635      	lsls	r5, r6, #24
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	d501      	bpl.n	8009d74 <_printf_i+0x1cc>
 8009d70:	6019      	str	r1, [r3, #0]
 8009d72:	e002      	b.n	8009d7a <_printf_i+0x1d2>
 8009d74:	0670      	lsls	r0, r6, #25
 8009d76:	d5fb      	bpl.n	8009d70 <_printf_i+0x1c8>
 8009d78:	8019      	strh	r1, [r3, #0]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	6123      	str	r3, [r4, #16]
 8009d7e:	4615      	mov	r5, r2
 8009d80:	e7ba      	b.n	8009cf8 <_printf_i+0x150>
 8009d82:	682b      	ldr	r3, [r5, #0]
 8009d84:	1d1a      	adds	r2, r3, #4
 8009d86:	602a      	str	r2, [r5, #0]
 8009d88:	681d      	ldr	r5, [r3, #0]
 8009d8a:	6862      	ldr	r2, [r4, #4]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f7f6 fa1e 	bl	80001d0 <memchr>
 8009d94:	b108      	cbz	r0, 8009d9a <_printf_i+0x1f2>
 8009d96:	1b40      	subs	r0, r0, r5
 8009d98:	6060      	str	r0, [r4, #4]
 8009d9a:	6863      	ldr	r3, [r4, #4]
 8009d9c:	6123      	str	r3, [r4, #16]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da4:	e7a8      	b.n	8009cf8 <_printf_i+0x150>
 8009da6:	6923      	ldr	r3, [r4, #16]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4649      	mov	r1, r9
 8009dac:	4640      	mov	r0, r8
 8009dae:	47d0      	blx	sl
 8009db0:	3001      	adds	r0, #1
 8009db2:	d0ab      	beq.n	8009d0c <_printf_i+0x164>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	079b      	lsls	r3, r3, #30
 8009db8:	d413      	bmi.n	8009de2 <_printf_i+0x23a>
 8009dba:	68e0      	ldr	r0, [r4, #12]
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	4298      	cmp	r0, r3
 8009dc0:	bfb8      	it	lt
 8009dc2:	4618      	movlt	r0, r3
 8009dc4:	e7a4      	b.n	8009d10 <_printf_i+0x168>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4649      	mov	r1, r9
 8009dcc:	4640      	mov	r0, r8
 8009dce:	47d0      	blx	sl
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d09b      	beq.n	8009d0c <_printf_i+0x164>
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	9903      	ldr	r1, [sp, #12]
 8009dda:	1a5b      	subs	r3, r3, r1
 8009ddc:	42ab      	cmp	r3, r5
 8009dde:	dcf2      	bgt.n	8009dc6 <_printf_i+0x21e>
 8009de0:	e7eb      	b.n	8009dba <_printf_i+0x212>
 8009de2:	2500      	movs	r5, #0
 8009de4:	f104 0619 	add.w	r6, r4, #25
 8009de8:	e7f5      	b.n	8009dd6 <_printf_i+0x22e>
 8009dea:	bf00      	nop
 8009dec:	0800a5bd 	.word	0x0800a5bd
 8009df0:	0800a5ce 	.word	0x0800a5ce

08009df4 <_sbrk_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d06      	ldr	r5, [pc, #24]	; (8009e10 <_sbrk_r+0x1c>)
 8009df8:	2300      	movs	r3, #0
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	4608      	mov	r0, r1
 8009dfe:	602b      	str	r3, [r5, #0]
 8009e00:	f7f7 f818 	bl	8000e34 <_sbrk>
 8009e04:	1c43      	adds	r3, r0, #1
 8009e06:	d102      	bne.n	8009e0e <_sbrk_r+0x1a>
 8009e08:	682b      	ldr	r3, [r5, #0]
 8009e0a:	b103      	cbz	r3, 8009e0e <_sbrk_r+0x1a>
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	20002a98 	.word	0x20002a98

08009e14 <__sread>:
 8009e14:	b510      	push	{r4, lr}
 8009e16:	460c      	mov	r4, r1
 8009e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1c:	f000 f8a0 	bl	8009f60 <_read_r>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	bfab      	itete	ge
 8009e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e26:	89a3      	ldrhlt	r3, [r4, #12]
 8009e28:	181b      	addge	r3, r3, r0
 8009e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e2e:	bfac      	ite	ge
 8009e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e32:	81a3      	strhlt	r3, [r4, #12]
 8009e34:	bd10      	pop	{r4, pc}

08009e36 <__swrite>:
 8009e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3a:	461f      	mov	r7, r3
 8009e3c:	898b      	ldrh	r3, [r1, #12]
 8009e3e:	05db      	lsls	r3, r3, #23
 8009e40:	4605      	mov	r5, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	4616      	mov	r6, r2
 8009e46:	d505      	bpl.n	8009e54 <__swrite+0x1e>
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f000 f868 	bl	8009f24 <_lseek_r>
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	4632      	mov	r2, r6
 8009e62:	463b      	mov	r3, r7
 8009e64:	4628      	mov	r0, r5
 8009e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6a:	f000 b817 	b.w	8009e9c <_write_r>

08009e6e <__sseek>:
 8009e6e:	b510      	push	{r4, lr}
 8009e70:	460c      	mov	r4, r1
 8009e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e76:	f000 f855 	bl	8009f24 <_lseek_r>
 8009e7a:	1c43      	adds	r3, r0, #1
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	bf15      	itete	ne
 8009e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e8a:	81a3      	strheq	r3, [r4, #12]
 8009e8c:	bf18      	it	ne
 8009e8e:	81a3      	strhne	r3, [r4, #12]
 8009e90:	bd10      	pop	{r4, pc}

08009e92 <__sclose>:
 8009e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e96:	f000 b813 	b.w	8009ec0 <_close_r>
	...

08009e9c <_write_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	; (8009ebc <_write_r+0x20>)
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f7f6 fe7a 	bl	8000ba4 <_write>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_write_r+0x1e>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_write_r+0x1e>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	20002a98 	.word	0x20002a98

08009ec0 <_close_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4d06      	ldr	r5, [pc, #24]	; (8009edc <_close_r+0x1c>)
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4608      	mov	r0, r1
 8009eca:	602b      	str	r3, [r5, #0]
 8009ecc:	f7f6 ff7d 	bl	8000dca <_close>
 8009ed0:	1c43      	adds	r3, r0, #1
 8009ed2:	d102      	bne.n	8009eda <_close_r+0x1a>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	b103      	cbz	r3, 8009eda <_close_r+0x1a>
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	20002a98 	.word	0x20002a98

08009ee0 <_fstat_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d07      	ldr	r5, [pc, #28]	; (8009f00 <_fstat_r+0x20>)
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	4608      	mov	r0, r1
 8009eea:	4611      	mov	r1, r2
 8009eec:	602b      	str	r3, [r5, #0]
 8009eee:	f7f6 ff78 	bl	8000de2 <_fstat>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	d102      	bne.n	8009efc <_fstat_r+0x1c>
 8009ef6:	682b      	ldr	r3, [r5, #0]
 8009ef8:	b103      	cbz	r3, 8009efc <_fstat_r+0x1c>
 8009efa:	6023      	str	r3, [r4, #0]
 8009efc:	bd38      	pop	{r3, r4, r5, pc}
 8009efe:	bf00      	nop
 8009f00:	20002a98 	.word	0x20002a98

08009f04 <_isatty_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d06      	ldr	r5, [pc, #24]	; (8009f20 <_isatty_r+0x1c>)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	602b      	str	r3, [r5, #0]
 8009f10:	f7f6 ff77 	bl	8000e02 <_isatty>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_isatty_r+0x1a>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_isatty_r+0x1a>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	20002a98 	.word	0x20002a98

08009f24 <_lseek_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d07      	ldr	r5, [pc, #28]	; (8009f44 <_lseek_r+0x20>)
 8009f28:	4604      	mov	r4, r0
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	602a      	str	r2, [r5, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f7f6 ff70 	bl	8000e18 <_lseek>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_lseek_r+0x1e>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_lseek_r+0x1e>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20002a98 	.word	0x20002a98

08009f48 <__malloc_lock>:
 8009f48:	4801      	ldr	r0, [pc, #4]	; (8009f50 <__malloc_lock+0x8>)
 8009f4a:	f7ff bb1d 	b.w	8009588 <__retarget_lock_acquire_recursive>
 8009f4e:	bf00      	nop
 8009f50:	20002a8c 	.word	0x20002a8c

08009f54 <__malloc_unlock>:
 8009f54:	4801      	ldr	r0, [pc, #4]	; (8009f5c <__malloc_unlock+0x8>)
 8009f56:	f7ff bb18 	b.w	800958a <__retarget_lock_release_recursive>
 8009f5a:	bf00      	nop
 8009f5c:	20002a8c 	.word	0x20002a8c

08009f60 <_read_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	; (8009f80 <_read_r+0x20>)
 8009f64:	4604      	mov	r4, r0
 8009f66:	4608      	mov	r0, r1
 8009f68:	4611      	mov	r1, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	602a      	str	r2, [r5, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f7f6 ff0e 	bl	8000d90 <_read>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_read_r+0x1e>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_read_r+0x1e>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20002a98 	.word	0x20002a98

08009f84 <_init>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	bf00      	nop
 8009f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8a:	bc08      	pop	{r3}
 8009f8c:	469e      	mov	lr, r3
 8009f8e:	4770      	bx	lr

08009f90 <_fini>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	bf00      	nop
 8009f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f96:	bc08      	pop	{r3}
 8009f98:	469e      	mov	lr, r3
 8009f9a:	4770      	bx	lr
